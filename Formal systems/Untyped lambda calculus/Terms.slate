%../../../../logics/hlm%

/**
 * @remarks This formalization of the untyped lambda calculus is fairly standard except for one aspect: The right side of a lambda abstraction depends on the value of the bound variable used to define it (which is kind of the point of bound variables). To prevent wild pseudo-terms that actually differ in nontrivial ways depending on the variable, there needs to be an additional substitutability constraint. Although substitution is defined later, we can use it in this case because we are applying it to subterms only (i.e. we are employing mutual induction).
 *
 * @references * https://en.wikipedia.org/wiki/Lambda_calculus
 *             * https://ncatlab.org/nlab/show/lambda-calculus#https://ncatlab.org/nlab/show/lambda-calculus#pure_lambda_calculus
 */
$Terms(
  V: %Subset(
    $../Variables,
    auto = %true
  ),
  _1: %Constraint($../../Essentials/Sets/finite(S = V))
): %Construction {
  $variable(x: %Element(V)): %Constructor {
    notation = $Parens(
      body = x,
      style = '()'
    ),
    equalityDefinition = {
      leftParameters = #(x: %Element(V)),
      rightParameters = #(y: %Element(V)),
      definition = [%equals(x, y)],
      isomorphic = %true
    }
  }

  $abstraction(
    _2: %Binder(
      #(x: %Element($../"Fresh variables"(V = V))),
      #(M: %Element($Terms(V = $../../Essentials/Sets/Union(
        U = $../Variables,
        S = V,
        T = %enumeration(x)
      ))))
    ),
    _3: %Constraint(%forall(
      #(x,y: %Element($../"Fresh variables"(V = V))),
      %equals(
        $substitution(
          V = $Terms(V = $../../Essentials/Sets/Union(
            U = $../Variables,
            S = V,
            T = %enumeration(x)
          )),
          T = M[x = x],
          x = x,
          R = y
        ),
        M[x = y]
      )
    ))
  ): %Constructor {
    notation = $LambdaAbstraction(
      variable = x,
      term = M
    ),
    equalityDefinition = {
      leftParameters = #(
        _2: %Binder(
          #(x: %Element($../"Fresh variables"(V = V))),
          #(M: %Element($Terms(V = $../../Essentials/Sets/Union(
            U = $../Variables,
            S = V,
            T = %enumeration(x)
          ))))
        ),
        _3: %Constraint(%forall(
          #(x,y: %Element($../"Fresh variables"(V = V))),
          %equals(
            $substitution(
              V = $Terms(V = $../../Essentials/Sets/Union(
                U = $../Variables,
                S = V,
                T = %enumeration(x)
              )),
              T = M[x = x],
              x = x,
              R = y
            ),
            M[x = y]
          )
        ))
      ),
      rightParameters = #(
        _4: %Binder(
          #(x: %Element($../"Fresh variables"(V = V))),
          #("M'": %Element($Terms(V = $../../Essentials/Sets/Union(
            U = $../Variables,
            S = V,
            T = %enumeration(x)
          ))))
        ),
        _5: %Constraint(%forall(
          #(x,y: %Element($../"Fresh variables"(V = V))),
          %equals(
            $substitution(
              V = $Terms(V = $../../Essentials/Sets/Union(
                U = $../Variables,
                S = V,
                T = %enumeration(x)
              )),
              T = "M'"[x = x],
              x = x,
              R = y
            ),
            "M'"[x = y]
          )
        ))
      ),
      definition = [
        %forall(
          #(x: %Element($../"Fresh variables"(V = V))),
          %equals(M[x = x], "M'"[x = x])
        ),
        %exists(
          #(x: %Element($../"Fresh variables"(V = V))),
          formula = %equals(M[x = x], "M'"[x = x])
        )
      ],
      isomorphic = %true
    }
  }

  $application(M,N: %Element($Terms(V = V))): %Constructor {
    notation = $LambdaApplication(
      function = M,
      argument = N
    ),
    equalityDefinition = {
      leftParameters = #(M,N: %Element($Terms(V = V))),
      rightParameters = #("M'","N'": %Element($Terms(V = V))),
      definition = [%and(
        %equals(M, "M'"),
        %equals(N, "N'")
      )],
      isomorphic = %true
    }
  }

  notation = $SubSup(
    body = 'ùì£',
    sub = V
  ),
  embedding = {
    parameter = #(x: %Element(V)),
    target = $Terms(V = V).variable(x = x)
  }
}
