%../../../../logics/hlm%

/**
 * @remarks This definition checks whether a rewrite rule matches a pair of terms. It considers both the pair itself as well as all subterms. Structural induction on both sides makes the definition a bit complicated.
 */
$rewritable(
  V: %Subset(
    $../Variables,
    auto = %true
  ),
  _1: %Constraint($../../Essentials/Sets/finite(S = V)),
  ℜ: %Subset($../"Rewriting rules"(T = $Terms(V = V))),
  L,R: %Element($Terms(V = V))
): %Predicate {
  notation = $Relation(
    symbol = $SubSup(
      body = %neg('→', '↛'),
      sub = ℜ
    ),
    operands = [L, R]
  ),
  definition = [%or(
    %in(
      $../"Rewriting rules"(T = $Terms(V = V)).rule(l = L, r = R),
      ℜ
    ),
    %structural(
      R,
      $Terms(V = V),
      [
        {
          constructor = $Terms.variable,
          parameters = #(z: %Element(V)),
          value = %or
        },
        {
          constructor = $Terms.abstraction,
          parameters = #(
            _4: %Binder(
              #(z: %Element($../"Fresh variables"(V = V))),
              #(N: %Element($Terms(V = $../../Essentials/Sets/Union(
                U = $../Variables,
                S = V,
                T = %enumeration(z)
              ))))
            ),
            _5: %Constraint(%forall(
              #(a,b: %Element($../"Fresh variables"(V = V))),
              %equals(
                $substitution(
                  V = $Terms(V = $../../Essentials/Sets/Union(
                    U = $../Variables,
                    S = V,
                    T = %enumeration(a)
                  )),
                  T = N[z = a],
                  x = a, R = b
                ),
                N[z = b]
              )
            ))
          ),
          value = %structural(
            L,
            $Terms(V = V),
            [
              {
                constructor = $Terms.variable,
                parameters = #(y: %Element(V)),
                value = %or
              },
              {
                constructor = $Terms.abstraction,
                parameters = #(
                  _2: %Binder(
                    #(y: %Element($../"Fresh variables"(V = V))),
                    #(M: %Element($Terms(V = $../../Essentials/Sets/Union(
                      U = $../Variables,
                      S = V,
                      T = %enumeration(y)
                    ))))
                  ),
                  _3: %Constraint(%forall(
                    #(a,b: %Element($../"Fresh variables"(V = V))),
                    %equals(
                      $substitution(
                        V = $Terms(V = $../../Essentials/Sets/Union(
                          U = $../Variables,
                          S = V,
                          T = %enumeration(a)
                        )),
                        T = M[y = a],
                        x = a, R = b
                      ),
                      M[y = b]
                    )
                  ))
                ),
                value = %forall(
                  #(v: %Element($../"Fresh variables"(V = V))),
                  $rewritable(
                    V = $../../Essentials/Sets/Union(
                      U = $../Variables,
                      S = V,
                      T = %enumeration(v)
                    ),
                    ℜ = ℜ,
                    L = M[y = v],
                    R = N[z = v]
                  )
                )
              },
              {
                constructor = $Terms.application,
                parameters = #(M,N: %Element($Terms(V = V))),
                value = %or
              }
            ]
          )
        },
        {
          constructor = $Terms.application,
          parameters = #(O,P: %Element($Terms(V = V))),
          value = %structural(
            L,
            $Terms(V = V),
            [
              {
                constructor = $Terms.variable,
                parameters = #(y: %Element(V)),
                value = %or
              },
              {
                constructor = $Terms.abstraction,
                parameters = #(
                  _2: %Binder(
                    #(y: %Element($../"Fresh variables"(V = V))),
                    #(M: %Element($Terms(V = $../../Essentials/Sets/Union(
                      U = $../Variables,
                      S = V,
                      T = %enumeration(y)
                    ))))
                  ),
                  _3: %Constraint(%forall(
                    #(a,b: %Element($../"Fresh variables"(V = V))),
                    %equals(
                      $substitution(
                        V = $Terms(V = $../../Essentials/Sets/Union(
                          U = $../Variables,
                          S = V,
                          T = %enumeration(a)
                        )),
                        T = M[y = a],
                        x = a, R = b
                      ),
                      M[y = b]
                    )
                  ))
                ),
                value = %or
              },
              {
                constructor = $Terms.application,
                parameters = #(M,N: %Element($Terms(V = V))),
                value = %or(
                  %and(
                    $rewritable(V = V, ℜ = ℜ, L = M, R = O),
                    %equals(N, P)
                  ),
                  %and(
                    %equals(M, O),
                    $rewritable(V = V, ℜ = ℜ, L = N, R = P)
                  )
                )
              }
            ]
          )
        }
      ]
    )
  )]
}
