%../../../../logics/hlm%

/**
 * @remarks Note that we do not allow `x` to appear free in `R`. This ensures that `x` does not appear free in the result either, which is important for e.g. the definition `$"beta reduction"` of beta reduction.
 *
 * @references * https://en.wikipedia.org/wiki/Lambda_calculus#Substitution
 *             * https://ncatlab.org/nlab/show/substitution#avoiding+variable+capture
 */
$substitution(
  V: %Subset(
    $../Variables,
    auto = %true
  ),
  _1: %Constraint($../../Essentials/Sets/finite(S = {V})),
  T: %Element($Terms(V = {V})),
  x: %Element(V),
  R: %Element($Terms(V = {$../../Essentials/Sets/"Relative complement"(
    U = {V},
    S = {V},
    T = {%enumeration(x)}
  )}))
): %ExplicitOperator {
  notation = [$LambdaSubstitution(
    term = T,
    variable = x,
    replacement = R
  )],
  definition = [%structuralCases(
    T,
    $Terms(V = {V}),
    [
      {
        constructor = $Terms.variable,
        parameters = #(y: %Element(V)),
        value = %cases([
          {
            formula = %equals(x, y),
            value = R
          },
          {
            formula = %not(%equals(x, y)),
            value = $Terms(V = {V}).variable(x = {y})
          }
        ])
      },
      {
        constructor = $Terms.abstraction,
        parameters = #(
          y: %Binding(
            $../"Fresh variables"(V = {V}),
            #(M: %Element($Terms(V = {$../../Essentials/Sets/Union(
              U = {$../Variables},
              S = {V},
              T = {%enumeration(y)}
            )})))
          ),
          _2: %Constraint(%forall(
            #(
              y: %Element($../"Fresh variables"(V = {V})),
              z: %Element(%previous)
            ),
            %equals(
              $substitution(
                V = {$Terms(V = {$../../Essentials/Sets/Union(
                  U = {$../Variables},
                  S = {V},
                  T = {%enumeration(y)}
                )})},
                T = {M[y]},
                x = {y},
                R = {z}
              ),
              M[z]
            )
          ))
        ),
        value = $Terms(V = {$../../Essentials/Sets/"Relative complement"(
            U = {V},
            S = {V},
            T = {%enumeration(x)}
          )}).abstraction(x = {
            #(z: %Element($../"Fresh variables"(V = {$../../Essentials/Sets/"Relative complement"(
              U = {V},
              S = {V},
              T = {%enumeration(x)}
            )}))),
            {M = {$substitution(
              V = {$../"Fresh variables"(V = {V})},
              T = {M[z]},
              x = {x},
              R = {R}
            )}}
        })
      },
      {
        constructor = $Terms.application,
        parameters = #(
          M: %Element($Terms(V = {V})),
          N: %Element(%previous)
        ),
        value = $Terms(V = {$../../Essentials/Sets/"Relative complement"(
            U = {V},
            S = {V},
            T = {%enumeration(x)}
          )}).application(
            M = {$substitution(
              V = {V},
              T = {M},
              x = {x},
              R = {R}
            )},
            N = {$substitution(
              V = {V},
              T = {N},
              x = {x},
              R = {R}
            )}
        )
      }
    ]
  )]
}
