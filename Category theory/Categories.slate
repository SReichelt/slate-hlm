%../../../logics/hlm%

/**
 * @remarks This definition of categories includes the additional requirement that all categories are [skeletal](https://en.wikipedia.org/wiki/Skeleton_(category_theory)). The reasoning behind this is that I expect the equality definition above, which is derived purely syntactically, to be equivalent to _isomorphism_ of categories, not _equivalence_. That is, without this restriction, two isomorphic categories would be considered equal, but two equivalent categories would not necessarily be. (This needs to be verified.)
 *
 *          For skeletal categories, the two concepts coincide. Since in HLM, all of the usual examples of categories happen to be skeletal anyway, and we care about equivalence much more than isomorphism, it makes sense to include this requirement directly in the definition of a category.
 *
 *          The natural number `u` is required to be able to define a category of (smaller) categories or functors, which would otherwise be prevented by non-circularity rules. Informally, `u` can be regarded as a "universe size" that is relevant only in the context of category theory. (The "universes" that are implicit in other contexts are already large enough.)
 *
 * @references * https://en.wikipedia.org/wiki/Category_(mathematics)
 *             * https://mathworld.wolfram.com/Category.html
 *             * https://proofwiki.org/wiki/Definition:Category
 *             * https://ncatlab.org/nlab/show/category
 *             * https://leanprover-community.github.io/mathlib_docs/category_theory/category/default.html#category_theory.category
 */
$Categories(u: %Element($../Essentials/Numbers/Natural/"Natural numbers")): %Construction {
  $category(
    O: %Set,
    _1: %Binder(
      #(𝐀,𝐁: %Element(O)),
      #(M: %Set)
    ),
    _2: %Binder(
      #(𝐂: %Element(O)),
      #(i: %Element(M[𝐀 = {𝐂}, 𝐁 = {𝐂}]))
    ),
    _3: %Binder(
      #(𝐃,𝐄,𝐅: %Element(O)),
      #(∘: %Element($../Essentials/Operations/Operations(
        X = {M[𝐀 = {𝐄}, 𝐁 = {𝐅}]},
        Y = {M[𝐀 = {𝐃}, 𝐁 = {𝐄}]},
        Z = {M[𝐀 = {𝐃}, 𝐁 = {𝐅}]}
      )))
    ),
    _4: %Constraint(%forall(
      #(
        𝐖,𝐗,𝐘,𝐙: %Element(O),
        f: %Element(M[𝐀 = {𝐖}, 𝐁 = {𝐗}]),
        g: %Element(M[𝐀 = {𝐗}, 𝐁 = {𝐘}]),
        h: %Element(M[𝐀 = {𝐘}, 𝐁 = {𝐙}])
      ),
      %equals(
        $../Essentials/Operations/value(
          X = {M[𝐀 = {𝐗}, 𝐁 = {𝐙}]},
          Y = {M[𝐀 = {𝐖}, 𝐁 = {𝐗}]},
          Z = {M[𝐀 = {𝐖}, 𝐁 = {𝐙}]},
          ∗ = {∘[𝐃 = {𝐖}, 𝐄 = {𝐗}, 𝐅 = {𝐙}]},
          x = {$../Essentials/Operations/value(
            X = {M[𝐀 = {𝐘}, 𝐁 = {𝐙}]},
            Y = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
            Z = {M[𝐀 = {𝐗}, 𝐁 = {𝐙}]},
            ∗ = {∘[𝐃 = {𝐗}, 𝐄 = {𝐘}, 𝐅 = {𝐙}]},
            x = {h},
            y = {g}
          )},
          y = {f}
        ),
        $../Essentials/Operations/value(
          X = {M[𝐀 = {𝐘}, 𝐁 = {𝐙}]},
          Y = {M[𝐀 = {𝐖}, 𝐁 = {𝐘}]},
          Z = {M[𝐀 = {𝐖}, 𝐁 = {𝐙}]},
          ∗ = {∘[𝐃 = {𝐖}, 𝐄 = {𝐘}, 𝐅 = {𝐙}]},
          x = {h},
          y = {$../Essentials/Operations/value(
            X = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
            Y = {M[𝐀 = {𝐖}, 𝐁 = {𝐗}]},
            Z = {M[𝐀 = {𝐖}, 𝐁 = {𝐘}]},
            ∗ = {∘[𝐃 = {𝐖}, 𝐄 = {𝐗}, 𝐅 = {𝐘}]},
            x = {g},
            y = {f}
          )}
        )
      )
    )),
    _5: %Constraint(%forall(
      #(
        𝐗,𝐘: %Element(O),
        f: %Element(M[𝐀 = {𝐗}, 𝐁 = {𝐘}])
      ),
      %equals(
        $../Essentials/Operations/value(
          X = {M[𝐀 = {𝐘}, 𝐁 = {𝐘}]},
          Y = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
          Z = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
          ∗ = {∘[𝐃 = {𝐗}, 𝐄 = {𝐘}, 𝐅 = {𝐘}]},
          x = {i[𝐂 = {𝐘}]},
          y = {f}
        ),
        $../Essentials/Operations/value(
          X = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
          Y = {M[𝐀 = {𝐗}, 𝐁 = {𝐗}]},
          Z = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
          ∗ = {∘[𝐃 = {𝐗}, 𝐄 = {𝐗}, 𝐅 = {𝐘}]},
          x = {f},
          y = {i[𝐂 = {𝐗}]}
        ),
        f
      )
    )),
    _6: %Constraint(%forall(
      #(
        𝐗,𝐘: %Element(O),
        _4: %Constraint(%exists(
          #(
            f: %Element(M[𝐀 = {𝐗}, 𝐁 = {𝐘}]),
            g: %Element(M[𝐀 = {𝐘}, 𝐁 = {𝐗}])
          ),
          formula = %and(
            %equals(
              $../Essentials/Operations/value(
                X = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
                Y = {M[𝐀 = {𝐘}, 𝐁 = {𝐗}]},
                Z = {M[𝐀 = {𝐘}, 𝐁 = {𝐘}]},
                ∗ = {∘[𝐃 = {𝐘}, 𝐄 = {𝐗}, 𝐅 = {𝐘}]},
                x = {f},
                y = {g}
              ),
              i[𝐂 = {𝐘}]
            ),
            %equals(
              $../Essentials/Operations/value(
                X = {M[𝐀 = {𝐘}, 𝐁 = {𝐗}]},
                Y = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
                Z = {M[𝐀 = {𝐗}, 𝐁 = {𝐗}]},
                ∗ = {∘[𝐃 = {𝐗}, 𝐄 = {𝐘}, 𝐅 = {𝐗}]},
                x = {g},
                y = {f}
              ),
              i[𝐂 = {𝐗}]
            )
          )
        ))
      ),
      %equals(𝐗, 𝐘)
    ))
  ): %Constructor {
    notation = $SubSup(
      body = $VerticalTuple(
        items = [
          O,
          $SubSup(
            body = $Parens(
              body = M,
              style = '()'
            ),
            sub = $ElementRelation(operands = [
              $Group(
                items = [𝐀, 𝐁],
                separator = ','
              ),
              O
            ])
          ),
          $SubSup(
            body = $Parens(
              body = i,
              style = '()'
            ),
            sub = $ElementRelation(operands = [𝐂, O])
          ),
          $SubSup(
            body = $Parens(
              body = ∘,
              style = '()'
            ),
            sub = $ElementRelation(operands = [
              $Group(
                items = [𝐃, 𝐄, 𝐅],
                separator = ','
              ),
              O
            ])
          )
        ],
        style = '[]'
      ),
      sub = u
    ),
    equalityDefinition = {
      leftParameters = #(
        O: %Set,
        _1: %Binder(
          #(𝐀,𝐁: %Element(O)),
          #(M: %Set)
        ),
        _2: %Binder(
          #(𝐂: %Element(O)),
          #(i: %Element(M[𝐀 = {𝐂}, 𝐁 = {𝐂}]))
        ),
        _3: %Binder(
          #(𝐃,𝐄,𝐅: %Element(O)),
          #(∘: %Element($../Essentials/Operations/Operations(
            X = {M[𝐀 = {𝐄}, 𝐁 = {𝐅}]},
            Y = {M[𝐀 = {𝐃}, 𝐁 = {𝐄}]},
            Z = {M[𝐀 = {𝐃}, 𝐁 = {𝐅}]}
          )))
        ),
        _4: %Constraint(%forall(
          #(
            𝐖,𝐗,𝐘,𝐙: %Element(O),
            f: %Element(M[𝐀 = {𝐖}, 𝐁 = {𝐗}]),
            g: %Element(M[𝐀 = {𝐗}, 𝐁 = {𝐘}]),
            h: %Element(M[𝐀 = {𝐘}, 𝐁 = {𝐙}])
          ),
          %equals(
            $../Essentials/Operations/value(
              X = {M[𝐀 = {𝐗}, 𝐁 = {𝐙}]},
              Y = {M[𝐀 = {𝐖}, 𝐁 = {𝐗}]},
              Z = {M[𝐀 = {𝐖}, 𝐁 = {𝐙}]},
              ∗ = {∘[𝐃 = {𝐖}, 𝐄 = {𝐗}, 𝐅 = {𝐙}]},
              x = {$../Essentials/Operations/value(
                X = {M[𝐀 = {𝐘}, 𝐁 = {𝐙}]},
                Y = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
                Z = {M[𝐀 = {𝐗}, 𝐁 = {𝐙}]},
                ∗ = {∘[𝐃 = {𝐗}, 𝐄 = {𝐘}, 𝐅 = {𝐙}]},
                x = {h},
                y = {g}
              )},
              y = {f}
            ),
            $../Essentials/Operations/value(
              X = {M[𝐀 = {𝐘}, 𝐁 = {𝐙}]},
              Y = {M[𝐀 = {𝐖}, 𝐁 = {𝐘}]},
              Z = {M[𝐀 = {𝐖}, 𝐁 = {𝐙}]},
              ∗ = {∘[𝐃 = {𝐖}, 𝐄 = {𝐘}, 𝐅 = {𝐙}]},
              x = {h},
              y = {$../Essentials/Operations/value(
                X = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
                Y = {M[𝐀 = {𝐖}, 𝐁 = {𝐗}]},
                Z = {M[𝐀 = {𝐖}, 𝐁 = {𝐘}]},
                ∗ = {∘[𝐃 = {𝐖}, 𝐄 = {𝐗}, 𝐅 = {𝐘}]},
                x = {g},
                y = {f}
              )}
            )
          )
        )),
        _5: %Constraint(%forall(
          #(
            𝐗,𝐘: %Element(O),
            f: %Element(M[𝐀 = {𝐗}, 𝐁 = {𝐘}])
          ),
          %equals(
            $../Essentials/Operations/value(
              X = {M[𝐀 = {𝐘}, 𝐁 = {𝐘}]},
              Y = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
              Z = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
              ∗ = {∘[𝐃 = {𝐗}, 𝐄 = {𝐘}, 𝐅 = {𝐘}]},
              x = {i[𝐂 = {𝐘}]},
              y = {f}
            ),
            $../Essentials/Operations/value(
              X = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
              Y = {M[𝐀 = {𝐗}, 𝐁 = {𝐗}]},
              Z = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
              ∗ = {∘[𝐃 = {𝐗}, 𝐄 = {𝐗}, 𝐅 = {𝐘}]},
              x = {f},
              y = {i[𝐂 = {𝐗}]}
            ),
            f
          )
        )),
        _6: %Constraint(%forall(
          #(
            𝐗,𝐘: %Element(O),
            _4: %Constraint(%exists(
              #(
                f: %Element(M[𝐀 = {𝐗}, 𝐁 = {𝐘}]),
                g: %Element(M[𝐀 = {𝐘}, 𝐁 = {𝐗}])
              ),
              formula = %and(
                %equals(
                  $../Essentials/Operations/value(
                    X = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
                    Y = {M[𝐀 = {𝐘}, 𝐁 = {𝐗}]},
                    Z = {M[𝐀 = {𝐘}, 𝐁 = {𝐘}]},
                    ∗ = {∘[𝐃 = {𝐘}, 𝐄 = {𝐗}, 𝐅 = {𝐘}]},
                    x = {f},
                    y = {g}
                  ),
                  i[𝐂 = {𝐘}]
                ),
                %equals(
                  $../Essentials/Operations/value(
                    X = {M[𝐀 = {𝐘}, 𝐁 = {𝐗}]},
                    Y = {M[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
                    Z = {M[𝐀 = {𝐗}, 𝐁 = {𝐗}]},
                    ∗ = {∘[𝐃 = {𝐗}, 𝐄 = {𝐘}, 𝐅 = {𝐗}]},
                    x = {g},
                    y = {f}
                  ),
                  i[𝐂 = {𝐗}]
                )
              )
            ))
          ),
          %equals(𝐗, 𝐘)
        ))
      ),
      rightParameters = #(
        P: %Set,
        _7: %Binder(
          #(𝐀,𝐁: %Element(P)),
          #(N: %Set)
        ),
        _8: %Binder(
          #(𝐂: %Element(P)),
          #(j: %Element(N[𝐀 = {𝐂}, 𝐁 = {𝐂}]))
        ),
        _9: %Binder(
          #(𝐃,𝐄,𝐅: %Element(P)),
          #(∙: %Element($../Essentials/Operations/Operations(
            X = {N[𝐀 = {𝐄}, 𝐁 = {𝐅}]},
            Y = {N[𝐀 = {𝐃}, 𝐁 = {𝐄}]},
            Z = {N[𝐀 = {𝐃}, 𝐁 = {𝐅}]}
          )))
        ),
        _10: %Constraint(%forall(
          #(
            𝐖,𝐗,𝐘,𝐙: %Element(P),
            f: %Element(N[𝐀 = {𝐖}, 𝐁 = {𝐗}]),
            g: %Element(N[𝐀 = {𝐗}, 𝐁 = {𝐘}]),
            h: %Element(N[𝐀 = {𝐘}, 𝐁 = {𝐙}])
          ),
          %equals(
            $../Essentials/Operations/value(
              X = {N[𝐀 = {𝐗}, 𝐁 = {𝐙}]},
              Y = {N[𝐀 = {𝐖}, 𝐁 = {𝐗}]},
              Z = {N[𝐀 = {𝐖}, 𝐁 = {𝐙}]},
              ∗ = {∙[𝐃 = {𝐖}, 𝐄 = {𝐗}, 𝐅 = {𝐙}]},
              x = {$../Essentials/Operations/value(
                X = {N[𝐀 = {𝐘}, 𝐁 = {𝐙}]},
                Y = {N[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
                Z = {N[𝐀 = {𝐗}, 𝐁 = {𝐙}]},
                ∗ = {∙[𝐃 = {𝐗}, 𝐄 = {𝐘}, 𝐅 = {𝐙}]},
                x = {h},
                y = {g}
              )},
              y = {f}
            ),
            $../Essentials/Operations/value(
              X = {N[𝐀 = {𝐘}, 𝐁 = {𝐙}]},
              Y = {N[𝐀 = {𝐖}, 𝐁 = {𝐘}]},
              Z = {N[𝐀 = {𝐖}, 𝐁 = {𝐙}]},
              ∗ = {∙[𝐃 = {𝐖}, 𝐄 = {𝐘}, 𝐅 = {𝐙}]},
              x = {h},
              y = {$../Essentials/Operations/value(
                X = {N[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
                Y = {N[𝐀 = {𝐖}, 𝐁 = {𝐗}]},
                Z = {N[𝐀 = {𝐖}, 𝐁 = {𝐘}]},
                ∗ = {∙[𝐃 = {𝐖}, 𝐄 = {𝐗}, 𝐅 = {𝐘}]},
                x = {g},
                y = {f}
              )}
            )
          )
        )),
        _11: %Constraint(%forall(
          #(
            𝐗,𝐘: %Element(P),
            f: %Element(N[𝐀 = {𝐗}, 𝐁 = {𝐘}])
          ),
          %equals(
            $../Essentials/Operations/value(
              X = {N[𝐀 = {𝐘}, 𝐁 = {𝐘}]},
              Y = {N[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
              Z = {N[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
              ∗ = {∙[𝐃 = {𝐗}, 𝐄 = {𝐘}, 𝐅 = {𝐘}]},
              x = {j[𝐂 = {𝐘}]},
              y = {f}
            ),
            $../Essentials/Operations/value(
              X = {N[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
              Y = {N[𝐀 = {𝐗}, 𝐁 = {𝐗}]},
              Z = {N[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
              ∗ = {∙[𝐃 = {𝐗}, 𝐄 = {𝐗}, 𝐅 = {𝐘}]},
              x = {f},
              y = {j[𝐂 = {𝐗}]}
            ),
            f
          )
        )),
        _12: %Constraint(%forall(
          #(
            𝐗,𝐘: %Element(P),
            _4: %Constraint(%exists(
              #(
                f: %Element(N[𝐀 = {𝐗}, 𝐁 = {𝐘}]),
                g: %Element(N[𝐀 = {𝐘}, 𝐁 = {𝐗}])
              ),
              formula = %and(
                %equals(
                  $../Essentials/Operations/value(
                    X = {N[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
                    Y = {N[𝐀 = {𝐘}, 𝐁 = {𝐗}]},
                    Z = {N[𝐀 = {𝐘}, 𝐁 = {𝐘}]},
                    ∗ = {∙[𝐃 = {𝐘}, 𝐄 = {𝐗}, 𝐅 = {𝐘}]},
                    x = {f},
                    y = {g}
                  ),
                  j[𝐂 = {𝐘}]
                ),
                %equals(
                  $../Essentials/Operations/value(
                    X = {N[𝐀 = {𝐘}, 𝐁 = {𝐗}]},
                    Y = {N[𝐀 = {𝐗}, 𝐁 = {𝐘}]},
                    Z = {N[𝐀 = {𝐗}, 𝐁 = {𝐗}]},
                    ∗ = {∙[𝐃 = {𝐗}, 𝐄 = {𝐘}, 𝐅 = {𝐗}]},
                    x = {g},
                    y = {f}
                  ),
                  j[𝐂 = {𝐗}]
                )
              )
            ))
          ),
          %equals(𝐗, 𝐘)
        ))
      ),
      definition = [%exists(
        #(
          φ: %Element($../Essentials/Functions/Bijections(
            X = {O},
            Y = {P}
          )),
          _13: %Binder(
            #(𝐀,𝐁: %Element(O)),
            #(ψ: %Element($../Essentials/Functions/Bijections(
              X = {M[𝐀 = {𝐀}, 𝐁 = {𝐁}]},
              Y = {N[𝐀 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐀}
                )}, 𝐁 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐁}
              )}]}
            )))
          )
        ),
        formula = %and(
          %forall(
            #(𝐂: %Element(O)),
            $../Algebra/Generic/Isomorphisms/"element condition"(
              X = {M[𝐀 = {𝐂}, 𝐁 = {𝐂}]},
              Y = {N[𝐀 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐂}
                )}, 𝐁 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐂}
              )}]},
              φ = {ψ[𝐀 = {𝐂}, 𝐁 = {𝐂}]},
              x = {i[𝐂 = {𝐂}]},
              y = {j[𝐂 = {$../Essentials/Functions/value(
                X = {O},
                Y = {P},
                f = {φ},
                x = {𝐂}
              )}]}
            )
          ),
          %forall(
            #(𝐃,𝐄,𝐅: %Element(O)),
            $../Algebra/Generic/Isomorphisms/"morphism condition"(
              X_1 = {M[𝐀 = {𝐄}, 𝐁 = {𝐅}]},
              X_2 = {M[𝐀 = {𝐃}, 𝐁 = {𝐄}]},
              X_3 = {M[𝐀 = {𝐃}, 𝐁 = {𝐅}]},
              Y_1 = {N[𝐀 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐄}
                )}, 𝐁 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐅}
              )}]},
              Y_2 = {N[𝐀 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐃}
                )}, 𝐁 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐄}
              )}]},
              Y_3 = {N[𝐀 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐃}
                )}, 𝐁 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐅}
              )}]},
              φ_1 = {ψ[𝐀 = {𝐄}, 𝐁 = {𝐅}]},
              φ_2 = {ψ[𝐀 = {𝐃}, 𝐁 = {𝐄}]},
              φ_3 = {ψ[𝐀 = {𝐃}, 𝐁 = {𝐅}]},
              ∗ = {∘[𝐃 = {𝐃}, 𝐄 = {𝐄}, 𝐅 = {𝐅}]},
              ⋆ = {∙[𝐃 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐃}
                )}, 𝐄 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐄}
                )}, 𝐅 = {$../Essentials/Functions/value(
                  X = {O},
                  Y = {P},
                  f = {φ},
                  x = {𝐅}
              )}]}
            )
          )
        )
      )],
      isomorphic = %true
    }
  }

  notation = $SubSup(
    body = '𝓒𝓪𝓽',
    sub = u
  ),
  definitionNotation = {
    parameter = #(𝓒: %Expr),
    singularName = [[
      $DependentWord(
        word = 'small',
        argument = u
      ),
      ' category'
    ]],
    pluralName = [[
      $DependentWord(
        word = 'small',
        argument = u
      ),
      ' categories'
    ]]
  }
}
