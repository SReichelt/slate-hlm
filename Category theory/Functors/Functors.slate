%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Functor
 *             * https://mathworld.wolfram.com/Functor.html
 *             * https://proofwiki.org/wiki/Definition:Functor
 *             * https://ncatlab.org/nlab/show/functor
 *             * https://leanprover-community.github.io/mathlib_docs/category_theory/functor.html#category_theory.functor
 */
$Functors(
  u,v: %Element(
    $../../Essentials/Numbers/Natural/"Natural numbers",
    auto = %true
  ),
  𝓒: %Element($../Categories(u = u)),
  𝓓: %Element($../Categories(u = v))
): %Construction {
  $functor(
    _1: %Binder(
      #(𝐗: %Element($../Objects(u = u, 𝓒 = 𝓒))),
      #(𝐘: %Element($../Objects(u = v, 𝓒 = 𝓓)))
    ),
    _2: %Binder(
      #(
        𝐀,𝐁: %Element($../Objects(u = u, 𝓒 = 𝓒)),
        f: %Element($../Morphisms(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀, 𝐘 = 𝐁))
      ),
      #(g: %Element($../Morphisms(u = v, 𝓒 = 𝓓, 𝐗 = 𝐘[𝐗 = 𝐀], 𝐘 = 𝐘[𝐗 = 𝐁])))
    ),
    _3: %Constraint(%forall(
      #(𝐀: %Element($../Objects(u = u, 𝓒 = 𝓒))),
      %equals(
        g[𝐀 = 𝐀, 𝐁 = 𝐀, f = $../identity(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀)],
        $../identity(u = v, 𝓒 = 𝓓, 𝐗 = 𝐘[𝐗 = 𝐀])
      )
    )),
    _4: %Constraint(%forall(
      #(
        𝐀,𝐁,𝐂: %Element($../Objects(u = u, 𝓒 = 𝓒)),
        d: %Element($../Morphisms(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀, 𝐘 = 𝐁)),
        e: %Element($../Morphisms(u = u, 𝓒 = 𝓒, 𝐗 = 𝐁, 𝐘 = 𝐂))
      ),
      %equals(
        g[𝐀 = 𝐀, 𝐁 = 𝐂, f = $../composition(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀, 𝐘 = 𝐁, 𝐙 = 𝐂, g = e, f = d)],
        $../composition(u = v, 𝓒 = 𝓓, 𝐗 = 𝐘[𝐗 = 𝐀], 𝐘 = 𝐘[𝐗 = 𝐁], 𝐙 = 𝐘[𝐗 = 𝐂], g = g[𝐀 = 𝐁, 𝐁 = 𝐂, f = e], f = g[𝐀 = 𝐀, 𝐁 = 𝐁, f = d])
      )
    ))
  ): %Constructor {
    notation = $Parens(
      body = $FunctorBody(
        domain = 𝓒,
        codomain = 𝓓,
        objectParameter = 𝐗,
        objectValue = 𝐘,
        morphismParameter = $Parens(
          body = $FunctionDeclaration(
            function = f,
            operands = [𝐀, 𝐁]
          ),
          style = '()'
        ),
        morphismValue = g
      ),
      style = '()'
    ),
    definitionNotation = {
      parameter = #(F: %Expr),
      notation = $FunctorDefinition(
        functor = F,
        domain = 𝓒,
        codomain = 𝓓,
        objectParameter = 𝐗,
        objectValue = 𝐘,
        morphismParameter = $Parens(
          body = $FunctionDeclaration(
            function = f,
            operands = [𝐀, 𝐁]
          ),
          style = '()'
        ),
        morphismValue = g
      )
    },
    equalityDefinition = {
      leftParameters = #(
        _1: %Binder(
          #(𝐗: %Element($../Objects(u = u, 𝓒 = 𝓒))),
          #(𝐘: %Element($../Objects(u = v, 𝓒 = 𝓓)))
        ),
        _2: %Binder(
          #(
            𝐀,𝐁: %Element($../Objects(u = u, 𝓒 = 𝓒)),
            f: %Element($../Morphisms(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀, 𝐘 = 𝐁))
          ),
          #(g: %Element($../Morphisms(u = v, 𝓒 = 𝓓, 𝐗 = 𝐘[𝐗 = 𝐀], 𝐘 = 𝐘[𝐗 = 𝐁])))
        ),
        _3: %Constraint(%forall(
          #(𝐀: %Element($../Objects(u = u, 𝓒 = 𝓒))),
          %equals(
            g[𝐀 = 𝐀, 𝐁 = 𝐀, f = $../identity(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀)],
            $../identity(u = v, 𝓒 = 𝓓, 𝐗 = 𝐘[𝐗 = 𝐀])
          )
        )),
        _4: %Constraint(%forall(
          #(
            𝐀,𝐁,𝐂: %Element($../Objects(u = u, 𝓒 = 𝓒)),
            d: %Element($../Morphisms(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀, 𝐘 = 𝐁)),
            e: %Element($../Morphisms(u = u, 𝓒 = 𝓒, 𝐗 = 𝐁, 𝐘 = 𝐂))
          ),
          %equals(
            g[𝐀 = 𝐀, 𝐁 = 𝐂, f = $../composition(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀, 𝐘 = 𝐁, 𝐙 = 𝐂, g = e, f = d)],
            $../composition(u = v, 𝓒 = 𝓓, 𝐗 = 𝐘[𝐗 = 𝐀], 𝐘 = 𝐘[𝐗 = 𝐁], 𝐙 = 𝐘[𝐗 = 𝐂], g = g[𝐀 = 𝐁, 𝐁 = 𝐂, f = e], f = g[𝐀 = 𝐀, 𝐁 = 𝐁, f = d])
          )
        ))
      ),
      rightParameters = #(
        _5: %Binder(
          #(𝐗: %Element($../Objects(u = u, 𝓒 = 𝓒))),
          #("𝐘'": %Element($../Objects(u = v, 𝓒 = 𝓓)))
        ),
        _6: %Binder(
          #(
            𝐀,𝐁: %Element($../Objects(u = u, 𝓒 = 𝓒)),
            f: %Element($../Morphisms(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀, 𝐘 = 𝐁))
          ),
          #("g'": %Element($../Morphisms(u = v, 𝓒 = 𝓓, 𝐗 = "𝐘'"[𝐗 = 𝐀], 𝐘 = "𝐘'"[𝐗 = 𝐁])))
        ),
        _7: %Constraint(%forall(
          #(𝐀: %Element($../Objects(u = u, 𝓒 = 𝓒))),
          %equals(
            "g'"[𝐀 = 𝐀, 𝐁 = 𝐀, f = $../identity(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀)],
            $../identity(u = v, 𝓒 = 𝓓, 𝐗 = "𝐘'"[𝐗 = 𝐀])
          )
        )),
        _8: %Constraint(%forall(
          #(
            𝐀,𝐁,𝐂: %Element($../Objects(u = u, 𝓒 = 𝓒)),
            d: %Element($../Morphisms(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀, 𝐘 = 𝐁)),
            e: %Element($../Morphisms(u = u, 𝓒 = 𝓒, 𝐗 = 𝐁, 𝐘 = 𝐂))
          ),
          %equals(
            "g'"[𝐀 = 𝐀, 𝐁 = 𝐂, f = $../composition(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀, 𝐘 = 𝐁, 𝐙 = 𝐂, g = e, f = d)],
            $../composition(u = v, 𝓒 = 𝓓, 𝐗 = "𝐘'"[𝐗 = 𝐀], 𝐘 = "𝐘'"[𝐗 = 𝐁], 𝐙 = "𝐘'"[𝐗 = 𝐂], g = "g'"[𝐀 = 𝐁, 𝐁 = 𝐂, f = e], f = "g'"[𝐀 = 𝐀, 𝐁 = 𝐁, f = d])
          )
        ))
      ),
      definition = [%exists(
        #(_9: %Binder(
          #(𝐗: %Element($../Objects(u = u, 𝓒 = 𝓒))),
          #(i: %Element($../Isomorphisms(u = v, 𝓒 = 𝓓, 𝐗 = 𝐘[𝐗 = 𝐗], 𝐘 = "𝐘'"[𝐗 = 𝐗])))
        )),
        formula = %forall(
          #(
            𝐀,𝐁: %Element($../Objects(u = u, 𝓒 = 𝓒)),
            f: %Element($../Morphisms(u = u, 𝓒 = 𝓒, 𝐗 = 𝐀, 𝐘 = 𝐁))
          ),
          %equals(
            $../composition(u = v, 𝓒 = 𝓓, 𝐗 = 𝐘[𝐗 = 𝐀], 𝐘 = 𝐘[𝐗 = 𝐁], 𝐙 = "𝐘'"[𝐗 = 𝐁], f = g[𝐀 = 𝐀, 𝐁 = 𝐁, f = f], g = i[𝐗 = 𝐁]),
            $../composition(u = v, 𝓒 = 𝓓, 𝐗 = 𝐘[𝐗 = 𝐀], 𝐘 = "𝐘'"[𝐗 = 𝐀], 𝐙 = "𝐘'"[𝐗 = 𝐁], f = i[𝐗 = 𝐀], g = "g'"[𝐀 = 𝐀, 𝐁 = 𝐁, f = f])
          )
        )
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = 'Fun',
    arguments = [𝓒, 𝓓]
  ),
  definitionNotation = {
    parameter = #(F: %Expr),
    notation = $FunctionDeclaration(
      function = F,
      operands = [𝓒, 𝓓]
    ),
    singularName = 'functor',
    pluralName = 'functors',
    nameOptional = %true
  }
}
