%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Functor
 *             * https://mathworld.wolfram.com/Functor.html
 *             * https://proofwiki.org/wiki/Definition:Functor
 *             * https://ncatlab.org/nlab/show/functor
 *             * https://leanprover-community.github.io/mathlib_docs/category_theory/functor.html#category_theory.functor
 */
$Functors(
  u: %Element(
    $../../Essentials/Numbers/Natural/"Natural numbers",
    auto = %true
  ),
  v: %Element(
    %previous,
    auto = %true
  ),
  𝓒: %Element($../Categories(u = {u})),
  𝓓: %Element($../Categories(u = {v}))
): %Construction {
  $functor(
    𝐗: %Binding(
      $../Objects(
        u = {u},
        𝓒 = {𝓒}
      ),
      #(𝐘: %Element($../Objects(
        u = {v},
        𝓒 = {𝓓}
      )))
    ),
    𝐀: %Binding(
      $../Objects(
        u = {u},
        𝓒 = {𝓒}
      ),
      #(𝐁: %Binding(
        %previous,
        #(f: %Binding(
          $../Morphisms(
            u = {u},
            𝓒 = {𝓒},
            𝐗 = {𝐀},
            𝐘 = {𝐁}
          ),
          #(g: %Element($../Morphisms(
            u = {v},
            𝓒 = {𝓓},
            𝐗 = {𝐘[𝐀]},
            𝐘 = {𝐘[𝐁]}
          )))
        ))
      ))
    ),
    _1: %Constraint(%forall(
      #(𝐀: %Element($../Objects(
        u = {u},
        𝓒 = {𝓒}
      ))),
      %equals(
        g[
          𝐀,
          𝐀,
          $../identity(
            u = {u},
            𝓒 = {𝓒},
            𝐗 = {𝐀}
          )
        ],
        $../identity(
          u = {v},
          𝓒 = {𝓓},
          𝐗 = {𝐘[𝐀]}
        )
      )
    )),
    _2: %Constraint(%forall(
      #(
        𝐀: %Element($../Objects(
          u = {u},
          𝓒 = {𝓒}
        )),
        𝐁: %Element(%previous),
        𝐂: %Element(%previous),
        d: %Element($../Morphisms(
          u = {u},
          𝓒 = {𝓒},
          𝐗 = {𝐀},
          𝐘 = {𝐁}
        )),
        e: %Element($../Morphisms(
          u = {u},
          𝓒 = {𝓒},
          𝐗 = {𝐁},
          𝐘 = {𝐂}
        ))
      ),
      %equals(
        g[
          𝐀,
          𝐂,
          $../composition(
            u = {u},
            𝓒 = {𝓒},
            𝐗 = {𝐀},
            𝐘 = {𝐁},
            𝐙 = {𝐂},
            g = {e},
            f = {d}
          )
        ],
        $../composition(
          u = {v},
          𝓒 = {𝓓},
          𝐗 = {𝐘[𝐀]},
          𝐘 = {𝐘[𝐁]},
          𝐙 = {𝐘[𝐂]},
          g = {g[𝐁,𝐂,e]},
          f = {g[𝐀,𝐁,d]}
        )
      )
    ))
  ): %Constructor {
    notation = [$Parens(
      body = $Table(
        items = [
          [
            $InnerParens(
              body = 𝓒,
              maxLevel = 0
            ),
            ' → ',
            $InnerParens(
              body = 𝓓,
              maxLevel = 0
            )
          ],
          [𝐗, ' ↦ ', 𝐘],
          [
            $Parens(
              body = $FunctionDefinition(
                function = f,
                symbol = '→',
                operands = [𝐀, 𝐁]
              ),
              style = '()'
            ),
            ' ↦ ',
            g
          ]
        ],
        style = 'aligned'
      ),
      style = '()'
    )],
    definitionNotation = {
      parameter = #(F: %Expr),
      notation = [$FunctionPrefix(
        function = F,
        body = [
          ' ',
          $Table(
            items = [
              [
                $InnerParens(
                  body = 𝓒,
                  maxLevel = 0
                ),
                ' → ',
                $InnerParens(
                  body = 𝓓,
                  maxLevel = 0
                )
              ],
              [𝐗, ' ↦ ', 𝐘],
              [
                $Parens(
                  body = $FunctionDefinition(
                    function = f,
                    symbol = '→',
                    operands = [𝐀, 𝐁]
                  ),
                  style = '()'
                ),
                ' ↦ ',
                g
              ]
            ],
            style = 'aligned'
          )
        ]
      )]
    },
    equalityDefinition = {
      leftParameters = #(
        𝐗: %Binding(
          $../Objects(
            u = {u},
            𝓒 = {𝓒}
          ),
          #(𝐘: %Element($../Objects(
            u = {v},
            𝓒 = {𝓓}
          )))
        ),
        𝐀: %Binding(
          $../Objects(
            u = {u},
            𝓒 = {𝓒}
          ),
          #(𝐁: %Binding(
            %previous,
            #(f: %Binding(
              $../Morphisms(
                u = {u},
                𝓒 = {𝓒},
                𝐗 = {𝐀},
                𝐘 = {𝐁}
              ),
              #(g: %Element($../Morphisms(
                u = {v},
                𝓒 = {𝓓},
                𝐗 = {𝐘[𝐀]},
                𝐘 = {𝐘[𝐁]}
              )))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(𝐀: %Element($../Objects(
            u = {u},
            𝓒 = {𝓒}
          ))),
          %equals(
            g[
              𝐀,
              𝐀,
              $../identity(
                u = {u},
                𝓒 = {𝓒},
                𝐗 = {𝐀}
              )
            ],
            $../identity(
              u = {v},
              𝓒 = {𝓓},
              𝐗 = {𝐘[𝐀]}
            )
          )
        )),
        _2: %Constraint(%forall(
          #(
            𝐀: %Element($../Objects(
              u = {u},
              𝓒 = {𝓒}
            )),
            𝐁: %Element(%previous),
            𝐂: %Element(%previous),
            d: %Element($../Morphisms(
              u = {u},
              𝓒 = {𝓒},
              𝐗 = {𝐀},
              𝐘 = {𝐁}
            )),
            e: %Element($../Morphisms(
              u = {u},
              𝓒 = {𝓒},
              𝐗 = {𝐁},
              𝐘 = {𝐂}
            ))
          ),
          %equals(
            g[
              𝐀,
              𝐂,
              $../composition(
                u = {u},
                𝓒 = {𝓒},
                𝐗 = {𝐀},
                𝐘 = {𝐁},
                𝐙 = {𝐂},
                g = {e},
                f = {d}
              )
            ],
            $../composition(
              u = {v},
              𝓒 = {𝓓},
              𝐗 = {𝐘[𝐀]},
              𝐘 = {𝐘[𝐁]},
              𝐙 = {𝐘[𝐂]},
              g = {g[𝐁,𝐂,e]},
              f = {g[𝐀,𝐁,d]}
            )
          )
        ))
      ),
      rightParameters = #(
        𝐗: %Binding(
          $../Objects(
            u = {u},
            𝓒 = {𝓒}
          ),
          #("𝐘'": %Element($../Objects(
            u = {v},
            𝓒 = {𝓓}
          )))
        ),
        𝐀: %Binding(
          $../Objects(
            u = {u},
            𝓒 = {𝓒}
          ),
          #(𝐁: %Binding(
            %previous,
            #(f: %Binding(
              $../Morphisms(
                u = {u},
                𝓒 = {𝓒},
                𝐗 = {𝐀},
                𝐘 = {𝐁}
              ),
              #("g'": %Element($../Morphisms(
                u = {v},
                𝓒 = {𝓓},
                𝐗 = {"𝐘'"[𝐀]},
                𝐘 = {"𝐘'"[𝐁]}
              )))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(𝐀: %Element($../Objects(
            u = {u},
            𝓒 = {𝓒}
          ))),
          %equals(
            "g'"[
              𝐀,
              𝐀,
              $../identity(
                u = {u},
                𝓒 = {𝓒},
                𝐗 = {𝐀}
              )
            ],
            $../identity(
              u = {v},
              𝓒 = {𝓓},
              𝐗 = {"𝐘'"[𝐀]}
            )
          )
        )),
        _2: %Constraint(%forall(
          #(
            𝐀: %Element($../Objects(
              u = {u},
              𝓒 = {𝓒}
            )),
            𝐁: %Element(%previous),
            𝐂: %Element(%previous),
            d: %Element($../Morphisms(
              u = {u},
              𝓒 = {𝓒},
              𝐗 = {𝐀},
              𝐘 = {𝐁}
            )),
            e: %Element($../Morphisms(
              u = {u},
              𝓒 = {𝓒},
              𝐗 = {𝐁},
              𝐘 = {𝐂}
            ))
          ),
          %equals(
            "g'"[
              𝐀,
              𝐂,
              $../composition(
                u = {u},
                𝓒 = {𝓒},
                𝐗 = {𝐀},
                𝐘 = {𝐁},
                𝐙 = {𝐂},
                g = {e},
                f = {d}
              )
            ],
            $../composition(
              u = {v},
              𝓒 = {𝓓},
              𝐗 = {"𝐘'"[𝐀]},
              𝐘 = {"𝐘'"[𝐁]},
              𝐙 = {"𝐘'"[𝐂]},
              g = {"g'"[𝐁,𝐂,e]},
              f = {"g'"[𝐀,𝐁,d]}
            )
          )
        ))
      ),
      definition = [%exists(
        #(𝐗: %Binding(
          $../Objects(
            u = {u},
            𝓒 = {𝓒}
          ),
          #(i: %Element($../Isomorphisms(
            u = {v},
            𝓒 = {𝓓},
            𝐗 = {𝐘[𝐗]},
            𝐘 = {"𝐘'"[𝐗]}
          )))
        )),
        formula = %forall(
          #(
            𝐀: %Element($../Objects(
              u = {u},
              𝓒 = {𝓒}
            )),
            𝐁: %Element(%previous),
            f: %Element($../Morphisms(
              u = {u},
              𝓒 = {𝓒},
              𝐗 = {𝐀},
              𝐘 = {𝐁}
            ))
          ),
          %equals(
            $../composition(
              u = {v},
              𝓒 = {𝓓},
              𝐗 = {𝐘[𝐀]},
              𝐘 = {𝐘[𝐁]},
              𝐙 = {"𝐘'"[𝐁]},
              f = {g[𝐀,𝐁,f]},
              g = {i[𝐁]}
            ),
            $../composition(
              u = {v},
              𝓒 = {𝓓},
              𝐗 = {𝐘[𝐀]},
              𝐘 = {"𝐘'"[𝐀]},
              𝐙 = {"𝐘'"[𝐁]},
              f = {i[𝐀]},
              g = {"g'"[𝐀,𝐁,f]}
            )
          )
        )
      )],
      isomorphic = %true
    }
  }

  notation = [$Function(
    function = 'Fun',
    arguments = [𝓒, 𝓓]
  )],
  definitionNotation = {
    parameter = #(F: %Expr),
    notation = [$FunctionDefinition(
      function = F,
      symbol = '→',
      operands = [𝓒, 𝓓]
    )],
    singularName = 'functor',
    pluralName = 'functors',
    nameOptional = %true
  }
}
