%../../../../logics/hlm%

/**
 * @remarks This is one possible formalization of the discrete category obtained from elements of `S`. We simply define morphisms to be elements of `S` as well, such that `%setEquals($../Morphisms(u = {u}, 𝓒 = {$elements(u = {u}, S = {S})}, 𝐗 = {a}, 𝐘 = {a}), %enumeration($../identity(u = {u}, 𝓒 = {$elements(u = {u}, S = {S})}, 𝐗 = {a})), %enumeration(a))`, and `%setEquals($../Morphisms(u = {u}, 𝓒 = {$elements(u = {u}, S = {S})}, 𝐗 = {a}, 𝐘 = {b}), $../../Essentials/Sets/"Empty set")` if `%not(%equals(a, b))`.
 *
 *          (Note that the existence of `x` in the definition of morphism composition implies that `%equals(d, e, f)`.)
 *
 * @references * https://en.wikipedia.org/wiki/Discrete_category
 *             * https://ncatlab.org/nlab/show/discrete+category#CategoricalMeaning
 *             * https://proofwiki.org/wiki/Definition:Discrete_Category_on_Set
 *             * https://leanprover-community.github.io/mathlib_docs/category_theory/discrete_category.html#category_theory.discrete_category
 */
$elements(
  u: %Element($../../Essentials/Numbers/Natural/"Natural numbers"),
  S: %Set
): %ExplicitOperator {
  notation = $Function(
    function = $SubSup(
      body = '𝐃𝐢𝐬',
      sub = u
    ),
    arguments = [S]
  ),
  definition = [$../Categories(u = {u}).category(
      O = {S},
      _𝐀 = {
        #(
          a: %Element(S),
          b: %Element(%previous)
        ),
        {M = {$../../Essentials/Sets/Intersection(
          U = {S},
          S = {%enumeration(a)},
          T = {%enumeration(b)}
        )}}
      },
      _𝐂 = {
        #(c: %Element(S)),
        {i = {c}}
      },
      _𝐃 = {
        #(
          d: %Element(S),
          e: %Element(%previous),
          f: %Element(%previous)
        ),
        {∘ = {$../../Essentials/Functions/Functions(
            X = {$../../Essentials/Sets/"Cartesian product"(
              S = {$../../Essentials/Sets/Intersection(
                U = {S},
                S = {%enumeration(e)},
                T = {%enumeration(f)}
              )},
              T = {$../../Essentials/Sets/Intersection(
                U = {S},
                S = {%enumeration(d)},
                T = {%enumeration(e)}
              )}
            )},
            Y = {$../../Essentials/Sets/Intersection(
              U = {S},
              S = {%enumeration(d)},
              T = {%enumeration(f)}
            )}
          ).function(_x = {
            #(x: %Element($../../Essentials/Sets/"Cartesian product"(
              S = {$../../Essentials/Sets/Intersection(
                U = {S},
                S = {%enumeration(e)},
                T = {%enumeration(f)}
              )},
              T = {$../../Essentials/Sets/Intersection(
                U = {S},
                S = {%enumeration(d)},
                T = {%enumeration(e)}
              )}
            ))),
            {y = {e}}
        })}}
      }
  )]
}
