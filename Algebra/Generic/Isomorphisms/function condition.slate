%../../../../../logics/hlm%

[
  $~Functions = $../../../Essentials/Functions/Functions,
  $~composition = $../../../Essentials/Functions/composition,
  $~value = $../../../Essentials/Functions/value
]

$"function condition"(
  X,Y: %Set(auto = %true),
  φ: %Element($../../../Essentials/Functions/Bijections(X = X, Y = Y)),
  f: %Element($~Functions(X = X, Y = X)),
  g: %Element($~Functions(X = Y, Y = Y))
): %Predicate {
  notation = $SpecificIsomorphismRelation(
    operands = [f, g],
    function = φ
  ),
  definition = [
    %structural(
      g,
      $~Functions(X = Y, Y = Y),
      [{
        constructor = $~Functions.function,
        parameters = #(_2: %Binder(
          #(y: %Element(Y)),
          #(b: %Element(Y))
        )),
        value = %structural(
          f,
          $~Functions(X = X, Y = X),
          [{
            constructor = $~Functions.function,
            parameters = #(_1: %Binder(
              #(x: %Element(X)),
              #(a: %Element(X))
            )),
            value = %forall(
              #(x: %Element(X)),
              %equals(
                $~value(
                  X = X, Y = Y, f = φ,
                  x = a[x = x]
                ),
                b[y = $~value(X = X, Y = Y, f = φ, x = x)]
              )
            )
          }]
        )
      }]
    ),
    %forall(
      #(x: %Element(X)),
      %equals(
        $~value(
          X = X, Y = Y, f = φ,
          x = $~value(X = X, Y = X, f = f, x = x)
        ),
        $~value(
          X = Y, Y = Y, f = g,
          x = $~value(X = X, Y = Y, f = φ, x = x)
        )
      )
    ),
    %equals(
      $~composition(X = X, Y = X, Z = Y, g = φ, f = f),
      $~composition(X = X, Y = Y, Z = Y, g = g, f = φ)
    )
  ]
}
