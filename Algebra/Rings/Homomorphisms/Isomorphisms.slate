%../../../../../logics/hlm%

[
  $~Carrier = $../Carrier,
  $~Functions = $../../../Essentials/Functions,
  $~Rings = $../Rings,
  $~one = $../one,
  $~product = $../product,
  $~sum = $../sum,
  $~value = $../../../Essentials/Functions/value
]

$Isomorphisms(𝐑,𝐒: %Element($~Rings)): %SetOperator {
  notation = $Function(
    function = 'Iso',
    arguments = [𝐑, 𝐒]
  ),
  definitionNotation = {
    parameter = #(φ: %Expr),
    notation = $FunctionDeclaration(
      function = φ,
      symbol = '↔',
      operands = [𝐑, 𝐒]
    ),
    singularName = 'isomorphism',
    pluralName = 'isomorphisms'
  },
  definition = [
    %subset(
      #(φ: %Element($Homomorphisms(𝐑 = 𝐑, 𝐒 = 𝐒))),
      $~Functions/bijective(
        X = $~Carrier(𝐑 = 𝐑),
        Y = $~Carrier(𝐑 = 𝐒),
        f = φ
      )
    ),
    %subset(
      #(f: %Element($~Functions/Bijections(
        X = $~Carrier(𝐑 = 𝐑),
        Y = $~Carrier(𝐑 = 𝐒)
      ))),
      %and(
        %forall(
          #(a,b: %Element($~Carrier(𝐑 = 𝐑))),
          %equals(
            $~value(
              X = $~Carrier(𝐑 = 𝐑),
              Y = $~Carrier(𝐑 = 𝐒),
              f = f,
              x = $~sum(𝐑 = 𝐑, a = a, b = b)
            ),
            $~sum(
              𝐑 = 𝐒,
              a = $~value(
                X = $~Carrier(𝐑 = 𝐑),
                Y = $~Carrier(𝐑 = 𝐒),
                f = f, x = a
              ),
              b = $~value(
                X = $~Carrier(𝐑 = 𝐑),
                Y = $~Carrier(𝐑 = 𝐒),
                f = f, x = b
              )
            )
          )
        ),
        %forall(
          #(d,e: %Element($~Carrier(𝐑 = 𝐑))),
          %equals(
            $~value(
              X = $~Carrier(𝐑 = 𝐑),
              Y = $~Carrier(𝐑 = 𝐒),
              f = f,
              x = $~product(𝐑 = 𝐑, a = d, b = e)
            ),
            $~product(
              𝐑 = 𝐒,
              a = $~value(
                X = $~Carrier(𝐑 = 𝐑),
                Y = $~Carrier(𝐑 = 𝐒),
                f = f, x = d
              ),
              b = $~value(
                X = $~Carrier(𝐑 = 𝐑),
                Y = $~Carrier(𝐑 = 𝐒),
                f = f, x = e
              )
            )
          )
        ),
        %equals(
          $~value(
            X = $~Carrier(𝐑 = 𝐑),
            Y = $~Carrier(𝐑 = 𝐒),
            f = f,
            x = $~one(𝐑 = 𝐑)
          ),
          $~one(𝐑 = 𝐒)
        )
      )
    )
  ]
}
