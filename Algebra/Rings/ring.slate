%../../../../logics/hlm%

[
  $~Essentials = $../../Essentials,
  $~"Inner operations" = $../../Essentials/Operations/"Inner operations",
  $~Operations = $../../Essentials/Operations,
  $~"abelian group" = $../Groups/"abelian group",
  $~distributive = $../../Essentials/Operations/distributive,
  $~monoid = $../Monoids/monoid
]

/**
 * @references * https://en.wikipedia.org/wiki/Ring_(mathematics)
 *             * https://mathworld.wolfram.com/UnitRing.html
 *             * https://proofwiki.org/wiki/Definition:Ring_with_Unity
 *             * https://ncatlab.org/nlab/show/ring
 *             * https://coq.inria.fr/library/Coq.setoid_ring.Ring_theory.html#ring_theory
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/ring/basic.html#ring
 */
$ring(
  R: %Set,
  ⊕: %Element($~"Inner operations"(X = R)),
  "0": %Element(R),
  ⊖: %Element($~Essentials/Functions/Functions(X = R, Y = R)),
  ⊙: %Element($~"Inner operations"(X = R)),
  "1": %Element(R)
): %Predicate {
  notation = $Structure(
    items = [R, ⊕, "0", ⊖, ⊙, "1"],
    singular = 'ring',
    plural = 'rings'
  ),
  definition = [
    %and(
      $~"abelian group"(G = R, ∗ = ⊕, e = "0", i = ⊖),
      $~monoid(M = R, ∗ = ⊙, e = "1"),
      $~distributive(X = R, ∗ = ⊙, ⋆ = ⊕),
      $~Operations/"absorbing element"(X = R, ∗ = ⊙, z = "0"),
      %forall(
        #(a,b: %Element(R)),
        %equals(
          $~Operations/value(
            X = R, Y = R, Z = R, ∗ = ⊙, x = a,
            y = $~Essentials/Functions/value(X = R, Y = R, f = ⊖, x = b)
          ),
          $~Operations/value(
            X = R, Y = R, Z = R, ∗ = ⊙,
            x = $~Essentials/Functions/value(X = R, Y = R, f = ⊖, x = a),
            y = b
          ),
          $~Essentials/Functions/value(
            X = R, Y = R, f = ⊖,
            x = $~Operations/value(X = R, Y = R, Z = R, ∗ = ⊙, x = a, y = b)
          )
        )
      )
    ),
    %and(
      $~"abelian group"(G = R, ∗ = ⊕, e = "0", i = ⊖),
      $~monoid(M = R, ∗ = ⊙, e = "1"),
      $~distributive(X = R, ∗ = ⊙, ⋆ = ⊕)
    ),
    %and(
      $../Semirings/semiring(R = R, ⊕ = ⊕, "0" = "0", ⊙ = ⊙, "1" = "1"),
      %forall(
        #(a: %Element(R)),
        %equals(
          $~Operations/value(
            X = R, Y = R, Z = R, ∗ = ⊕, x = a,
            y = $~Essentials/Functions/value(X = R, Y = R, f = ⊖, x = a)
          ),
          $~Operations/value(
            X = R, Y = R, Z = R, ∗ = ⊕,
            x = $~Essentials/Functions/value(X = R, Y = R, f = ⊖, x = a),
            y = a
          ),
          "0"
        )
      )
    )
  ]
}
