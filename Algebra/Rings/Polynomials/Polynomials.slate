%../../../../../logics/hlm%

/**
 * @remarks The variable `X` does not serve any mathematical purpose but helps improve readability. However, it is important that polynomials are defined as a construction so that two polynomials using different variables cannot be mixed.
 *
 *          There are, of course, various different ways to formalize abstract polynomials. We chose to define polynomials inductively in such a way that each inductive step adds one coefficient. The highest coefficient is not allowed to be 0; otherwise equality of polynomials would not behave as expected.
 *
 * @references * https://en.wikipedia.org/wiki/Polynomial#Abstract_algebra
 *             * https://proofwiki.org/wiki/Definition:Polynomial_over_Ring/One_Variable
 *             * https://ncatlab.org/nlab/show/polynomial
 *             * https://leanprover-community.github.io/mathlib_docs/data/polynomial/basic.html#polynomial
 */
$Polynomials(
  𝐑: %Element(
    $../Rings,
    auto = %true
  ),
  X: %Element($../../../"Formal systems"/Variables)
): %Construction {
  $zero: %Constructor {
    notation = $SubSup(
      body = $Parens(
        body = $ConstructorName(name = '0'),
        style = '()'
      ),
      sub = $Function(
        function = 𝐑,
        arguments = [X],
        style = '[]'
      )
    )
  }

  $term(
    p: %Element($Polynomials(
      𝐑 = 𝐑,
      X = X
    )),
    a: %Element($../Carrier(𝐑 = 𝐑)),
    _1: %Constraint(%or(
      %not(%equals(
        p,
        $Polynomials(
            𝐑 = 𝐑,
            X = X
          ).zero
      )),
      %not(%equals(
        a,
        $../zero(𝐑 = 𝐑)
      ))
    ))
  ): %Constructor {
    notation = $Parens(
      body = $Operator(
        symbol = $ConstructorName(name = '+'),
        operands = [
          $Operator(
            symbol = '',
            operands = [p, X],
            space = '',
            minParenLevel = 3
          ),
          a
        ],
        space = ''
      ),
      style = '()'
    ),
    equalityDefinition = {
      leftParameters = #(
        p: %Element($Polynomials(
          𝐑 = 𝐑,
          X = X
        )),
        a: %Element($../Carrier(𝐑 = 𝐑)),
        _1: %Constraint(%or(
          %not(%equals(
            p,
            $Polynomials(
                𝐑 = 𝐑,
                X = X
              ).zero
          )),
          %not(%equals(
            a,
            $../zero(𝐑 = 𝐑)
          ))
        ))
      ),
      rightParameters = #(
        q: %Element($Polynomials(
          𝐑 = 𝐑,
          X = X
        )),
        b: %Element($../Carrier(𝐑 = 𝐑)),
        _2: %Constraint(%or(
          %not(%equals(
            q,
            $Polynomials(
                𝐑 = 𝐑,
                X = X
              ).zero
          )),
          %not(%equals(
            b,
            $../zero(𝐑 = 𝐑)
          ))
        ))
      ),
      definition = [%and(
        %equals(p, q),
        %equals(a, b)
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = 𝐑,
    arguments = [X],
    style = '[]'
  ),
  embedding = {
    parameter = #(a: %Element($../Carrier(𝐑 = 𝐑))),
    target = %cases([
      {
        formula = %equals(
          a,
          $../zero(𝐑 = 𝐑)
        ),
        value = $Polynomials(
            𝐑 = 𝐑,
            X = X
          ).zero
      },
      {
        formula = %not(%equals(
          a,
          $../zero(𝐑 = 𝐑)
        )),
        value = $Polynomials(
            𝐑 = 𝐑,
            X = X
          ).term(
            p = $Polynomials(
                𝐑 = 𝐑,
                X = X
              ).zero,
            a = a
        )
      }
    ])
  }
}
