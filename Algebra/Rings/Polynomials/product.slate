%../../../../../logics/hlm%

$product(
  𝐑: %Element(
    $../Rings,
    auto = %true
  ),
  X: %Element(
    $../../../"Formal systems"/Variables,
    auto = %true
  ),
  p: %Element($Polynomials(
    𝐑 = {𝐑},
    X = {X}
  )),
  q: %Element(%previous)
): %ExplicitOperator {
  notation = [$MultiplicationOperator(operands = [p, q])],
  definition = [%structuralCases(
    p,
    $Polynomials(
      𝐑 = {𝐑},
      X = {X}
    ),
    [
      {
        constructor = $Polynomials.zero,
        value = $Polynomials(
            𝐑 = {𝐑},
            X = {X}
          ).zero
      },
      {
        constructor = $Polynomials.term,
        parameters = #(
          r: %Element($Polynomials(
            𝐑 = {𝐑},
            X = {X}
          )),
          a: %Element($../Carrier(𝐑 = {𝐑})),
          _1: %Constraint(%or(
            %not(%equals(
              r,
              $Polynomials(
                  𝐑 = {𝐑},
                  X = {X}
                ).zero
            )),
            %not(%equals(
              a,
              $../zero(𝐑 = {𝐑})
            ))
          ))
        ),
        value = $sum(
          𝐑 = {𝐑},
          X = {X},
          p = {$normalized(
            𝐑 = {𝐑},
            X = {X},
            p = {$product(
              𝐑 = {𝐑},
              X = {X},
              p = {r},
              q = {q}
            )},
            a = {$../zero(𝐑 = {𝐑})}
          )},
          q = {$"product with left scalar"(
            𝐑 = {𝐑},
            X = {X},
            a = {a},
            p = {q}
          )}
        )
      }
    ]
  )]
}
