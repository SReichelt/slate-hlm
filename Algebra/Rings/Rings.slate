%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Ring_(mathematics)
 *             * https://mathworld.wolfram.com/UnitRing.html
 *             * https://proofwiki.org/wiki/Definition:Ring_with_Unity
 *             * https://ncatlab.org/nlab/show/ring
 *             * https://coq.inria.fr/library/Coq.setoid_ring.Ring_theory.html#ring_theory
 *             * https://leanprover-community.github.io/mathlib_docs/core/init/algebra/ring.html#ring
 */
$Rings: %Construction {
  $ring(
    R: %Set,
    ⊕: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
    "0": %Element(R),
    ⊖: %Element($../../Essentials/Functions/Functions(
      X = {R},
      Y = {R}
    )),
    ⊙: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
    "1": %Element(R),
    _1: %Constraint($ring(
      R = {R},
      ⊕ = {⊕},
      "0" = {"0"},
      ⊖ = {⊖},
      ⊙ = {⊙},
      "1" = {"1"}
    ))
  ): %Constructor {
    notation = $Tuple(
      items = [R, ⊕, "0", ⊖, ⊙, "1"],
      style = '[]'
    ),
    equalityDefinition = {
      leftParameters = #(
        R: %Set,
        ⊕: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        "0": %Element(R),
        ⊖: %Element($../../Essentials/Functions/Functions(
          X = {R},
          Y = {R}
        )),
        ⊙: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        "1": %Element(R),
        _1: %Constraint($ring(
          R = {R},
          ⊕ = {⊕},
          "0" = {"0"},
          ⊖ = {⊖},
          ⊙ = {⊙},
          "1" = {"1"}
        ))
      ),
      rightParameters = #(
        S: %Set,
        ⋆: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {S})),
        𝟢: %Element(S),
        ∼: %Element($../../Essentials/Functions/Functions(
          X = {S},
          Y = {S}
        )),
        ∗: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {S})),
        𝟣: %Element(S),
        _2: %Constraint($ring(
          R = {S},
          ⊕ = {⋆},
          "0" = {𝟢},
          ⊖ = {∼},
          ⊙ = {∗},
          "1" = {𝟣}
        ))
      ),
      definition = [%exists(
        #(φ: %Element($../../Essentials/Functions/Bijections(
          X = {R},
          Y = {S}
        ))),
        formula = %and(
          %equals(
            $../Generic/Isomorphisms/"inner operation transport"(
              X = {R},
              Y = {S},
              φ = {φ},
              ∗ = {⊕}
            ),
            ⋆
          ),
          %equals(
            $../Generic/Isomorphisms/"element transport"(
              X = {R},
              Y = {S},
              φ = {φ},
              x = {"0"}
            ),
            𝟢
          ),
          %equals(
            $../Generic/Isomorphisms/"function transport"(
              X = {R},
              Y = {S},
              φ = {φ},
              f = {⊖}
            ),
            ∼
          ),
          %equals(
            $../Generic/Isomorphisms/"inner operation transport"(
              X = {R},
              Y = {S},
              φ = {φ},
              ∗ = {⊙}
            ),
            ∗
          ),
          %equals(
            $../Generic/Isomorphisms/"element transport"(
              X = {R},
              Y = {S},
              φ = {φ},
              x = {"1"}
            ),
            𝟣
          )
        )
      )],
      isomorphic = %true
    }
  }

  notation = '𝓡𝓲𝓷𝓰',
  definitionNotation = {
    parameter = #(𝐑: %Expr),
    singularName = 'ring',
    pluralName = 'rings'
  }
}
