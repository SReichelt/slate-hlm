%../../../../logics/hlm%

[
  $~Functions = $../../Essentials/Functions/Functions,
  $~"Inner operations" = $../../Essentials/Operations/"Inner operations",
  $~Operations = $../../Essentials/Operations/Operations,
  $~"element condition" = $../Generic/Isomorphisms/"element condition",
  $~"inner operation condition" = $../Generic/Isomorphisms/"inner operation condition"
]

/**
 * @references * https://en.wikipedia.org/wiki/Ring_(mathematics)
 *             * https://mathworld.wolfram.com/UnitRing.html
 *             * https://proofwiki.org/wiki/Definition:Ring_with_Unity
 *             * https://ncatlab.org/nlab/show/ring
 *             * https://coq.inria.fr/library/Coq.setoid_ring.Ring_theory.html#ring_theory
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/ring/basic.html#ring
 */
$Rings: %Construction {
  $ring(
    R: %Set,
    ⊕: %Element($~"Inner operations"(X = R)),
    "0": %Element(R),
    ⊖: %Element($~Functions(X = R, Y = R)),
    ⊙: %Element($~"Inner operations"(X = R)),
    "1": %Element(R),
    _1: %Constraint($ring(R = R, ⊕ = ⊕, "0" = "0", ⊖ = ⊖, ⊙ = ⊙, "1" = "1"))
  ): %Constructor {
    notation = $Tuple(
      items = [R, ⊕, "0", ⊖, ⊙, "1"],
      style = '[]'
    ),
    equalityDefinition = {
      leftParameters = #(
        R: %Set,
        ⊕: %Element($~"Inner operations"(X = R)),
        "0": %Element(R),
        ⊖: %Element($~Functions(X = R, Y = R)),
        ⊙: %Element($~"Inner operations"(X = R)),
        "1": %Element(R),
        _1: %Constraint($ring(R = R, ⊕ = ⊕, "0" = "0", ⊖ = ⊖, ⊙ = ⊙, "1" = "1"))
      ),
      rightParameters = #(
        S: %Set,
        ⋆: %Element($~"Inner operations"(X = S)),
        𝟢: %Element(S),
        ∼: %Element($~Functions(X = S, Y = S)),
        ∗: %Element($~"Inner operations"(X = S)),
        𝟣: %Element(S),
        _2: %Constraint($ring(R = S, ⊕ = ⋆, "0" = 𝟢, ⊖ = ∼, ⊙ = ∗, "1" = 𝟣))
      ),
      definition = [%exists(
        #(φ: %Element($../../Essentials/Functions/Bijections(X = R, Y = S))),
        formula = %and(
          $~"inner operation condition"(X = R, Y = S, φ = φ, ∗ = ⊕, ⋆ = ⋆),
          $~"element condition"(X = R, Y = S, φ = φ, x = "0", y = 𝟢),
          $../Generic/Isomorphisms/"function condition"(X = R, Y = S, φ = φ, f = ⊖, g = ∼),
          $~"inner operation condition"(X = R, Y = S, φ = φ, ∗ = ⊙, ⋆ = ∗),
          $~"element condition"(X = R, Y = S, φ = φ, x = "1", y = 𝟣)
        )
      )],
      isomorphic = %true
    }
  }

  notation = '𝓡𝓲𝓷𝓰',
  definitionNotation = {
    parameter = #(𝐑: %Expr),
    singularName = 'ring',
    pluralName = 'rings'
  },
  rewrite = {
    parameter = #(𝐑: %Element($Rings)),
    value = $Rings.ring(
      R = $Carrier(𝐑 = 𝐑),
      ⊕ = $~Operations(
          X = $Carrier(𝐑 = 𝐑),
          Y = $Carrier(𝐑 = 𝐑),
          Z = $Carrier(𝐑 = 𝐑)
        ).operation(_1 = {
          #(a,b: %Element($Carrier(𝐑 = 𝐑))),
          {z = $sum(𝐑 = 𝐑, a = a, b = b)}
      }),
      "0" = $zero(𝐑 = 𝐑),
      ⊖ = $~Functions(
          X = $Carrier(𝐑 = 𝐑),
          Y = $Carrier(𝐑 = 𝐑)
        ).function(_1 = {
          #(a: %Element($Carrier(𝐑 = 𝐑))),
          {y = $"additive inverse"(𝐑 = 𝐑, a = a)}
      }),
      ⊙ = $~Operations(
          X = $Carrier(𝐑 = 𝐑),
          Y = $Carrier(𝐑 = 𝐑),
          Z = $Carrier(𝐑 = 𝐑)
        ).operation(_1 = {
          #(a,b: %Element($Carrier(𝐑 = 𝐑))),
          {z = $product(𝐑 = 𝐑, a = a, b = b)}
      }),
      "1" = $one(𝐑 = 𝐑)
    )
  }
}
