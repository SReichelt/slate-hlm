%../../../../logics/hlm%

/**
 * @remarks This definition lets us multiply elements without decomposing the ring.
 */
$product(
  ùêë: %Element(
    $Rings,
    auto = %true
  ),
  a: %Element($Carrier(ùêë = {ùêë})),
  b: %Element(%previous)
): %ExplicitOperator {
  display = [$Operator(
    symbol = '‚ãÖ',
    operands = [a, b],
    space = '‚Ää',
    minParenLevel = 2,
    maxParenLevel = 2
  )],
  definition = [%structuralCases(
    ùêë,
    $Rings,
    [{
      constructor = $Rings.ring,
      parameters = #(
        R: %Set,
        ‚äï: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        _1: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {R},
          ‚àó = {‚äï}
        )),
        _2: %Constraint($../../Essentials/Functions/Operations/commutative(
          X = {R},
          Z = {R},
          ‚àó = {‚äï}
        )),
        "0": %Element(R),
        _3: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {a},
              y = {"0"}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {"0"},
              y = {a}
            ),
            a
          )
        )),
        ‚äñ: %Element($../../Essentials/Functions/Functions(
          X = {R},
          Y = {R}
        )),
        _4: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {a},
              y = {$../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {a}
              )}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {$../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {a}
              )},
              y = {a}
            ),
            "0"
          )
        )),
        ‚äô: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        _5: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {R},
          ‚àó = {‚äô}
        )),
        _6: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {a},
              y = {"0"}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {"0"},
              y = {a}
            ),
            "0"
          )
        )),
        _7: %Constraint(%forall(
          #(
            a: %Element(R),
            b: %Element(%previous)
          ),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {a},
              y = {$../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {b}
              )}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {$../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {a}
              )},
              y = {b}
            ),
            $../../Essentials/Functions/value(
              X = {R},
              Y = {R},
              f = {‚äñ},
              x = {$../../Essentials/Functions/Operations/value(
                X = {R},
                Y = {R},
                Z = {R},
                ‚àó = {‚äô},
                x = {a},
                y = {b}
              )}
            )
          )
        )),
        "1": %Element(R),
        _8: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {a},
              y = {"1"}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {"1"},
              y = {a}
            ),
            a
          )
        )),
        _9: %Constraint($../../Essentials/Functions/Operations/distributive(
          X = {R},
          ‚àó = {‚äô},
          ‚ãÜ = {‚äï}
        ))
      ),
      value = $../../Essentials/Functions/Operations/value(
        X = {R},
        Y = {R},
        Z = {R},
        ‚àó = {‚äô},
        x = {a},
        y = {b}
      )
    }]
  )]
}
