%../../../../logics/hlm%

[
  $~Functions = $../../Essentials/Functions/Functions,
  $~"Inner operations" = $../../Essentials/Operations/"Inner operations"
]

/**
 * @references * https://en.wikipedia.org/wiki/Unit_(ring_theory)#Group_of_units
 *             * https://proofwiki.org/wiki/Definition:Group_of_Units/Ring
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/group/units.html#units.comm_group
 */
$"unit group"(𝐑: %Element($Rings)): %ExplicitOperator {
  notation = $Parens(
    body = $SubSup(body = 𝐑, sup = '×'),
    style = '[]'
  ),
  definition = [%structuralCases(
    𝐑, $Rings,
    [{
      constructor = $Rings.ring,
      parameters = #(
        R: %Set,
        ⊕: %Element($~"Inner operations"(X = R)),
        "0": %Element(R),
        ⊖: %Element($~Functions(X = R, Y = R)),
        ⊙: %Element($~"Inner operations"(X = R)),
        "1": %Element(R),
        _1: %Constraint($ring(R = R, ⊕ = ⊕, "0" = "0", ⊖ = ⊖, ⊙ = ⊙, "1" = "1"))
      ),
      value = $../Groups/Groups.group(
        G = $Units(𝐑 = 𝐑),
        ∗ = $../../Essentials/Operations/"inner operation restriction"(
          X = R,
          A = $Units(𝐑 = 𝐑),
          ∗ = ⊙
        ),
        e = "1",
        i = $~Functions(
            X = $Units(𝐑 = 𝐑),
            Y = $Units(𝐑 = 𝐑)
          ).function(_1 = {
            #(a: %Element($Units(𝐑 = 𝐑))),
            {y = $"multiplicative inverse"(𝐑 = 𝐑, a = a)}
        })
      )
    }]
  )]
}
