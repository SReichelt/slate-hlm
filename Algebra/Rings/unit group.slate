%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Unit_(ring_theory)#Group_of_units
 *             * https://proofwiki.org/wiki/Definition:Group_of_Units/Ring
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/group/units.html#units.comm_group
 */
$"unit group"(𝐑: %Element($Rings)): %ExplicitOperator {
  display = [$Parens(
    body = $SubSup(
      body = 𝐑,
      sup = '×'
    ),
    style = '[]'
  )],
  definition = [%structuralCases(
    𝐑,
    $Rings,
    [{
      constructor = $Rings.ring,
      parameters = #(
        R: %Set,
        ⊕: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        _1: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {R},
          ∗ = {⊕}
        )),
        _2: %Constraint($../../Essentials/Functions/Operations/commutative(
          X = {R},
          Z = {R},
          ∗ = {⊕}
        )),
        "0": %Element(R),
        _3: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊕},
              x = {a},
              y = {"0"}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊕},
              x = {"0"},
              y = {a}
            ),
            a
          )
        )),
        ⊖: %Element($../../Essentials/Functions/Functions(
          X = {R},
          Y = {R}
        )),
        _4: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊕},
              x = {a},
              y = {$../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {⊖},
                x = {a}
              )}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊕},
              x = {$../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {⊖},
                x = {a}
              )},
              y = {a}
            ),
            "0"
          )
        )),
        ⊙: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        _5: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {R},
          ∗ = {⊙}
        )),
        _6: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊙},
              x = {a},
              y = {"0"}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊙},
              x = {"0"},
              y = {a}
            ),
            "0"
          )
        )),
        _7: %Constraint(%forall(
          #(
            a: %Element(R),
            b: %Element(%previous)
          ),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊙},
              x = {a},
              y = {$../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {⊖},
                x = {b}
              )}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊙},
              x = {$../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {⊖},
                x = {a}
              )},
              y = {b}
            ),
            $../../Essentials/Functions/value(
              X = {R},
              Y = {R},
              f = {⊖},
              x = {$../../Essentials/Functions/Operations/value(
                X = {R},
                Y = {R},
                Z = {R},
                ∗ = {⊙},
                x = {a},
                y = {b}
              )}
            )
          )
        )),
        "1": %Element(R),
        _8: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊙},
              x = {a},
              y = {"1"}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊙},
              x = {"1"},
              y = {a}
            ),
            a
          )
        )),
        _9: %Constraint($../../Essentials/Functions/Operations/distributive(
          X = {R},
          ∗ = {⊙},
          ⋆ = {⊕}
        ))
      ),
      value = $../Groups/Groups.group(
        G = {$Units(𝐑 = {𝐑})},
        ∗ = {$../../Essentials/Functions/Operations/"inner operation restriction"(
          X = {R},
          A = {$Units(𝐑 = {𝐑})},
          ∗ = {⊙}
        )},
        e = {"1"},
        i = {$../../Essentials/Functions/Functions(
            X = {$Units(𝐑 = {𝐑})},
            Y = {$Units(𝐑 = {𝐑})}
          ).function(x = {
            #(a: %Element($Units(𝐑 = {𝐑}))),
            {y = {$"multiplicative inverse"(
              𝐑 = {𝐑},
              a = {a}
            )}}
        })}
      )
    }]
  )]
}
