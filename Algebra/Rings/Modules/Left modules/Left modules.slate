%../../../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Module_(mathematics)
 *             * https://mathworld.wolfram.com/Module.html
 *             * https://proofwiki.org/wiki/Definition:Unitary_Module
 *             * https://ncatlab.org/nlab/show/module#ModulesOverARingInTermsOfStabilizedSlices
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/module/basic.html#module
 */
$"Left modules"(𝐑: %Element($../../Rings)): %Construction {
  $module(
    M: %Set,
    ⊕: %Element($../../../../Essentials/Operations/"Inner operations"(X = M)),
    "0": %Element(M),
    ⊖: %Element($../../../../Essentials/Functions/Functions(
      X = M,
      Y = M
    )),
    ⊙: %Element($../../../../Essentials/Operations/Operations(
      X = $../../Carrier(𝐑 = 𝐑),
      Y = M,
      Z = M
    )),
    _1: %Constraint($"left module"(
      𝐑 = 𝐑,
      M = M,
      ⊕ = ⊕,
      "0" = "0",
      ⊖ = ⊖,
      ⊙ = ⊙
    ))
  ): %Constructor {
    notation = $SubSup(
      body = $Tuple(
        items = [M, ⊕, "0", ⊖, ⊙],
        style = '[]'
      ),
      sub = 𝐑
    ),
    equalityDefinition = {
      leftParameters = #(
        M: %Set,
        ⊕: %Element($../../../../Essentials/Operations/"Inner operations"(X = M)),
        "0": %Element(M),
        ⊖: %Element($../../../../Essentials/Functions/Functions(
          X = M,
          Y = M
        )),
        ⊙: %Element($../../../../Essentials/Operations/Operations(
          X = $../../Carrier(𝐑 = 𝐑),
          Y = M,
          Z = M
        )),
        _1: %Constraint($"left module"(
          𝐑 = 𝐑,
          M = M,
          ⊕ = ⊕,
          "0" = "0",
          ⊖ = ⊖,
          ⊙ = ⊙
        ))
      ),
      rightParameters = #(
        N: %Set,
        ⋆: %Element($../../../../Essentials/Operations/"Inner operations"(X = N)),
        𝟢: %Element(N),
        ∼: %Element($../../../../Essentials/Functions/Functions(
          X = N,
          Y = N
        )),
        ∗: %Element($../../../../Essentials/Operations/Operations(
          X = $../../Carrier(𝐑 = 𝐑),
          Y = N,
          Z = N
        )),
        _2: %Constraint($"left module"(
          𝐑 = 𝐑,
          M = N,
          ⊕ = ⋆,
          "0" = 𝟢,
          ⊖ = ∼,
          ⊙ = ∗
        ))
      ),
      definition = [%exists(
        #(φ: %Element($../../../../Essentials/Functions/Bijections(
          X = M,
          Y = N
        ))),
        formula = %and(
          $../../../Generic/Isomorphisms/"inner operation condition"(
            X = M,
            Y = N,
            φ = φ,
            ∗ = ⊕,
            ⋆ = ⋆
          ),
          $../../../Generic/Isomorphisms/"element condition"(
            X = M,
            Y = N,
            φ = φ,
            x = "0",
            y = 𝟢
          ),
          $../../../Generic/Isomorphisms/"function condition"(
            X = M,
            Y = N,
            φ = φ,
            f = ⊖,
            g = ∼
          ),
          $../../../Generic/Isomorphisms/"left operation condition"(
            S = $../../Carrier(𝐑 = 𝐑),
            X = M,
            Y = N,
            φ = φ,
            ∗ = ⊙,
            ⋆ = ∗
          )
        )
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = '𝓛𝓜𝓸𝓭',
    arguments = [𝐑]
  ),
  definitionNotation = {
    parameter = #(𝐌: %Expr),
    singularName = [[
      'left ',
      $DependentWord(
        word = 'module',
        argument = 𝐑
      )
    ]],
    pluralName = [[
      'left ',
      $DependentWord(
        word = 'modules',
        argument = 𝐑
      )
    ]]
  }
}
