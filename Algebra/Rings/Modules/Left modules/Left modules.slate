%../../../../../../logics/hlm%

[
  $~Carrier = $../../Carrier,
  $~Functions = $../../../../Essentials/Functions/Functions,
  $~"Inner operations" = $../../../../Essentials/Operations/"Inner operations",
  $~Isomorphisms = $../../../Generic/Isomorphisms,
  $~Operations = $../../../../Essentials/Operations/Operations
]

/**
 * @references * https://en.wikipedia.org/wiki/Module_(mathematics)
 *             * https://mathworld.wolfram.com/Module.html
 *             * https://proofwiki.org/wiki/Definition:Unitary_Module
 *             * https://ncatlab.org/nlab/show/module#ModulesOverARingInTermsOfStabilizedSlices
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/module/basic.html#module
 */
$"Left modules"(𝐑: %Element($../../Rings)): %Construction {
  $module(
    M: %Set,
    ⊕: %Element($~"Inner operations"(X = M)),
    "0": %Element(M),
    ⊖: %Element($~Functions(X = M, Y = M)),
    ⊙: %Element($~Operations(
      X = $~Carrier(𝐑 = 𝐑),
      Y = M, Z = M
    )),
    _1: %Constraint($"left module"(𝐑 = 𝐑, M = M, ⊕ = ⊕, "0" = "0", ⊖ = ⊖, ⊙ = ⊙))
  ): %Constructor {
    notation = $SubSup(
      body = $Tuple(
        items = [M, ⊕, "0", ⊖, ⊙],
        style = '[]'
      ),
      sub = 𝐑
    ),
    equalityDefinition = {
      leftParameters = #(
        M: %Set,
        ⊕: %Element($~"Inner operations"(X = M)),
        "0": %Element(M),
        ⊖: %Element($~Functions(X = M, Y = M)),
        ⊙: %Element($~Operations(
          X = $~Carrier(𝐑 = 𝐑),
          Y = M, Z = M
        )),
        _1: %Constraint($"left module"(𝐑 = 𝐑, M = M, ⊕ = ⊕, "0" = "0", ⊖ = ⊖, ⊙ = ⊙))
      ),
      rightParameters = #(
        N: %Set,
        ⋆: %Element($~"Inner operations"(X = N)),
        𝟢: %Element(N),
        ∼: %Element($~Functions(X = N, Y = N)),
        ∗: %Element($~Operations(
          X = $~Carrier(𝐑 = 𝐑),
          Y = N, Z = N
        )),
        _2: %Constraint($"left module"(𝐑 = 𝐑, M = N, ⊕ = ⋆, "0" = 𝟢, ⊖ = ∼, ⊙ = ∗))
      ),
      definition = [%exists(
        #(φ: %Element($../../../../Essentials/Functions/Bijections(X = M, Y = N))),
        formula = %and(
          $~Isomorphisms/"inner operation condition"(X = M, Y = N, φ = φ, ∗ = ⊕, ⋆ = ⋆),
          $~Isomorphisms/"element condition"(X = M, Y = N, φ = φ, x = "0", y = 𝟢),
          $~Isomorphisms/"function condition"(X = M, Y = N, φ = φ, f = ⊖, g = ∼),
          $~Isomorphisms/"left operation condition"(
            S = $~Carrier(𝐑 = 𝐑),
            X = M, Y = N, φ = φ, ∗ = ⊙, ⋆ = ∗
          )
        )
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = '𝓛𝓜𝓸𝓭',
    arguments = [𝐑]
  ),
  definitionNotation = {
    parameter = #(𝐌: %Expr),
    singularName = [[
      'left ',
      $DependentWord(word = 'module', argument = 𝐑)
    ]],
    pluralName = [[
      'left ',
      $DependentWord(word = 'modules', argument = 𝐑)
    ]]
  },
  rewrite = {
    parameter = #(𝐌: %Element($"Left modules"(𝐑 = 𝐑))),
    value = $"Left modules"(𝐑 = 𝐑).module(
        M = $Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
        ⊕ = $~Operations(
            X = $Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
            Y = $Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
            Z = $Carrier(𝐑 = 𝐑, 𝐌 = 𝐌)
          ).operation(_1 = {
            #(x,y: %Element($Carrier(𝐑 = 𝐑, 𝐌 = 𝐌))),
            {z = $sum(𝐑 = 𝐑, 𝐌 = 𝐌, x = x, y = y)}
        }),
        "0" = $zero(𝐑 = 𝐑, 𝐌 = 𝐌),
        ⊖ = $~Functions(
            X = $Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
            Y = $Carrier(𝐑 = 𝐑, 𝐌 = 𝐌)
          ).function(_1 = {
            #(x: %Element($Carrier(𝐑 = 𝐑, 𝐌 = 𝐌))),
            {y = $"additive inverse"(𝐑 = 𝐑, 𝐌 = 𝐌, x = x)}
        }),
        ⊙ = $~Operations(
            X = $~Carrier(𝐑 = 𝐑),
            Y = $Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
            Z = $Carrier(𝐑 = 𝐑, 𝐌 = 𝐌)
          ).operation(_1 = {
            #(
              a: %Element($~Carrier(𝐑 = 𝐑)),
              x: %Element($Carrier(𝐑 = 𝐑, 𝐌 = 𝐌))
            ),
            {z = $product(𝐑 = 𝐑, 𝐌 = 𝐌, a = a, x = x)}
        })
    )
  }
}
