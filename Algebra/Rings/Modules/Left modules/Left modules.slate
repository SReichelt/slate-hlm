%../../../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Module_(mathematics)
 *             * https://mathworld.wolfram.com/Module.html
 *             * https://proofwiki.org/wiki/Definition:Unitary_Module
 *             * https://ncatlab.org/nlab/show/module#ModulesOverARingInTermsOfStabilizedSlices
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/module.html#module
 */
$"Left modules"(𝐑: %Element($../../Rings)): %Construction {
  $module(
    M: %Set,
    ⊕: %Element($../../../../Essentials/Functions/Operations/"Inner operations"(X = {M})),
    _1: %Constraint($../../../../Essentials/Functions/Operations/associative(
      X = {M},
      ∗ = {⊕}
    )),
    _2: %Constraint($../../../../Essentials/Functions/Operations/commutative(
      X = {M},
      Z = {M},
      ∗ = {⊕}
    )),
    "0": %Element(M),
    _3: %Constraint(%forall(
      #(x: %Element(M)),
      %equals(
        $../../../../Essentials/Functions/Operations/value(
          X = {M},
          Y = {M},
          Z = {M},
          ∗ = {⊕},
          x = {x},
          y = {"0"}
        ),
        $../../../../Essentials/Functions/Operations/value(
          X = {M},
          Y = {M},
          Z = {M},
          ∗ = {⊕},
          x = {"0"},
          y = {x}
        ),
        x
      )
    )),
    ⊖: %Element($../../../../Essentials/Functions/Functions(
      X = {M},
      Y = {M}
    )),
    _4: %Constraint(%forall(
      #(x: %Element(M)),
      %equals(
        $../../../../Essentials/Functions/Operations/value(
          X = {M},
          Y = {M},
          Z = {M},
          ∗ = {⊕},
          x = {x},
          y = {$../../../../Essentials/Functions/value(
            X = {M},
            Y = {M},
            f = {⊖},
            x = {x}
          )}
        ),
        $../../../../Essentials/Functions/Operations/value(
          X = {M},
          Y = {M},
          Z = {M},
          ∗ = {⊕},
          x = {$../../../../Essentials/Functions/value(
            X = {M},
            Y = {M},
            f = {⊖},
            x = {x}
          )},
          y = {x}
        ),
        "0"
      )
    )),
    ⊙: %Element($../../../../Essentials/Functions/Operations/Operations(
      X = {$../../Carrier(𝐑 = {𝐑})},
      Y = {M},
      Z = {M}
    )),
    _5: %Constraint($../../../../Essentials/Functions/Operations/"left-distributive"(
      X = {$../../Carrier(𝐑 = {𝐑})},
      Y = {M},
      ∗ = {⊙},
      ⋆ = {⊕}
    )),
    _6: %Constraint(%forall(
      #(
        a: %Element($../../Carrier(𝐑 = {𝐑})),
        b: %Element(%previous),
        x: %Element(M)
      ),
      %equals(
        $../../../../Essentials/Functions/Operations/value(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M},
          ∗ = {⊙},
          x = {$../../sum(
            𝐑 = {𝐑},
            a = {a},
            b = {b}
          )},
          y = {x}
        ),
        $../../../../Essentials/Functions/Operations/value(
          X = {M},
          Y = {M},
          Z = {M},
          ∗ = {⊕},
          x = {$../../../../Essentials/Functions/Operations/value(
            X = {$../../Carrier(𝐑 = {𝐑})},
            Y = {M},
            Z = {M},
            ∗ = {⊙},
            x = {a},
            y = {x}
          )},
          y = {$../../../../Essentials/Functions/Operations/value(
            X = {$../../Carrier(𝐑 = {𝐑})},
            Y = {M},
            Z = {M},
            ∗ = {⊙},
            x = {b},
            y = {x}
          )}
        )
      )
    )),
    _7: %Constraint(%forall(
      #(x: %Element(M)),
      %equals(
        $../../../../Essentials/Functions/Operations/value(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M},
          ∗ = {⊙},
          x = {$../../zero(𝐑 = {𝐑})},
          y = {x}
        ),
        "0"
      )
    )),
    _8: %Constraint(%forall(
      #(a: %Element($../../Carrier(𝐑 = {𝐑}))),
      %equals(
        $../../../../Essentials/Functions/Operations/value(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M},
          ∗ = {⊙},
          x = {a},
          y = {"0"}
        ),
        "0"
      )
    )),
    _9: %Constraint(%forall(
      #(
        a: %Element($../../Carrier(𝐑 = {𝐑})),
        x: %Element(M)
      ),
      %equals(
        $../../../../Essentials/Functions/Operations/value(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M},
          ∗ = {⊙},
          x = {$../../"additive inverse"(
            𝐑 = {𝐑},
            a = {a}
          )},
          y = {x}
        ),
        $../../../../Essentials/Functions/Operations/value(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M},
          ∗ = {⊙},
          x = {a},
          y = {$../../../../Essentials/Functions/value(
            X = {M},
            Y = {M},
            f = {⊖},
            x = {x}
          )}
        ),
        $../../../../Essentials/Functions/value(
          X = {M},
          Y = {M},
          f = {⊖},
          x = {$../../../../Essentials/Functions/Operations/value(
            X = {$../../Carrier(𝐑 = {𝐑})},
            Y = {M},
            Z = {M},
            ∗ = {⊙},
            x = {a},
            y = {x}
          )}
        )
      )
    )),
    _10: %Constraint(%forall(
      #(
        a: %Element($../../Carrier(𝐑 = {𝐑})),
        b: %Element(%previous),
        x: %Element(M)
      ),
      %equals(
        $../../../../Essentials/Functions/Operations/value(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M},
          ∗ = {⊙},
          x = {$../../product(
            𝐑 = {𝐑},
            a = {a},
            b = {b}
          )},
          y = {x}
        ),
        $../../../../Essentials/Functions/Operations/value(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M},
          ∗ = {⊙},
          x = {a},
          y = {$../../../../Essentials/Functions/Operations/value(
            X = {$../../Carrier(𝐑 = {𝐑})},
            Y = {M},
            Z = {M},
            ∗ = {⊙},
            x = {b},
            y = {x}
          )}
        )
      )
    )),
    _11: %Constraint(%forall(
      #(x: %Element(M)),
      %equals(
        $../../../../Essentials/Functions/Operations/value(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M},
          ∗ = {⊙},
          x = {$../../one(𝐑 = {𝐑})},
          y = {x}
        ),
        x
      )
    ))
  ): %Constructor {
    display = [$SubSup(
      body = $Tuple(
        items = [M, ⊕, "0", ⊖, ⊙],
        style = '[]'
      ),
      sub = 𝐑
    )],
    equalityDefinition = {
      leftParameters = #(
        M: %Set,
        ⊕: %Element($../../../../Essentials/Functions/Operations/"Inner operations"(X = {M})),
        _1: %Constraint($../../../../Essentials/Functions/Operations/associative(
          X = {M},
          ∗ = {⊕}
        )),
        _2: %Constraint($../../../../Essentials/Functions/Operations/commutative(
          X = {M},
          Z = {M},
          ∗ = {⊕}
        )),
        "0": %Element(M),
        _3: %Constraint(%forall(
          #(x: %Element(M)),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {M},
              Y = {M},
              Z = {M},
              ∗ = {⊕},
              x = {x},
              y = {"0"}
            ),
            $../../../../Essentials/Functions/Operations/value(
              X = {M},
              Y = {M},
              Z = {M},
              ∗ = {⊕},
              x = {"0"},
              y = {x}
            ),
            x
          )
        )),
        ⊖: %Element($../../../../Essentials/Functions/Functions(
          X = {M},
          Y = {M}
        )),
        _4: %Constraint(%forall(
          #(x: %Element(M)),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {M},
              Y = {M},
              Z = {M},
              ∗ = {⊕},
              x = {x},
              y = {$../../../../Essentials/Functions/value(
                X = {M},
                Y = {M},
                f = {⊖},
                x = {x}
              )}
            ),
            $../../../../Essentials/Functions/Operations/value(
              X = {M},
              Y = {M},
              Z = {M},
              ∗ = {⊕},
              x = {$../../../../Essentials/Functions/value(
                X = {M},
                Y = {M},
                f = {⊖},
                x = {x}
              )},
              y = {x}
            ),
            "0"
          )
        )),
        ⊙: %Element($../../../../Essentials/Functions/Operations/Operations(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M}
        )),
        _5: %Constraint($../../../../Essentials/Functions/Operations/"left-distributive"(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          ∗ = {⊙},
          ⋆ = {⊕}
        )),
        _6: %Constraint(%forall(
          #(
            a: %Element($../../Carrier(𝐑 = {𝐑})),
            b: %Element(%previous),
            x: %Element(M)
          ),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {M},
              Z = {M},
              ∗ = {⊙},
              x = {$../../sum(
                𝐑 = {𝐑},
                a = {a},
                b = {b}
              )},
              y = {x}
            ),
            $../../../../Essentials/Functions/Operations/value(
              X = {M},
              Y = {M},
              Z = {M},
              ∗ = {⊕},
              x = {$../../../../Essentials/Functions/Operations/value(
                X = {$../../Carrier(𝐑 = {𝐑})},
                Y = {M},
                Z = {M},
                ∗ = {⊙},
                x = {a},
                y = {x}
              )},
              y = {$../../../../Essentials/Functions/Operations/value(
                X = {$../../Carrier(𝐑 = {𝐑})},
                Y = {M},
                Z = {M},
                ∗ = {⊙},
                x = {b},
                y = {x}
              )}
            )
          )
        )),
        _7: %Constraint(%forall(
          #(x: %Element(M)),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {M},
              Z = {M},
              ∗ = {⊙},
              x = {$../../zero(𝐑 = {𝐑})},
              y = {x}
            ),
            "0"
          )
        )),
        _8: %Constraint(%forall(
          #(a: %Element($../../Carrier(𝐑 = {𝐑}))),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {M},
              Z = {M},
              ∗ = {⊙},
              x = {a},
              y = {"0"}
            ),
            "0"
          )
        )),
        _9: %Constraint(%forall(
          #(
            a: %Element($../../Carrier(𝐑 = {𝐑})),
            x: %Element(M)
          ),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {M},
              Z = {M},
              ∗ = {⊙},
              x = {$../../"additive inverse"(
                𝐑 = {𝐑},
                a = {a}
              )},
              y = {x}
            ),
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {M},
              Z = {M},
              ∗ = {⊙},
              x = {a},
              y = {$../../../../Essentials/Functions/value(
                X = {M},
                Y = {M},
                f = {⊖},
                x = {x}
              )}
            ),
            $../../../../Essentials/Functions/value(
              X = {M},
              Y = {M},
              f = {⊖},
              x = {$../../../../Essentials/Functions/Operations/value(
                X = {$../../Carrier(𝐑 = {𝐑})},
                Y = {M},
                Z = {M},
                ∗ = {⊙},
                x = {a},
                y = {x}
              )}
            )
          )
        )),
        _10: %Constraint(%forall(
          #(
            a: %Element($../../Carrier(𝐑 = {𝐑})),
            b: %Element(%previous),
            x: %Element(M)
          ),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {M},
              Z = {M},
              ∗ = {⊙},
              x = {$../../product(
                𝐑 = {𝐑},
                a = {a},
                b = {b}
              )},
              y = {x}
            ),
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {M},
              Z = {M},
              ∗ = {⊙},
              x = {a},
              y = {$../../../../Essentials/Functions/Operations/value(
                X = {$../../Carrier(𝐑 = {𝐑})},
                Y = {M},
                Z = {M},
                ∗ = {⊙},
                x = {b},
                y = {x}
              )}
            )
          )
        )),
        _11: %Constraint(%forall(
          #(x: %Element(M)),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {M},
              Z = {M},
              ∗ = {⊙},
              x = {$../../one(𝐑 = {𝐑})},
              y = {x}
            ),
            x
          )
        ))
      ),
      rightParameters = #(
        N: %Set,
        ⋆: %Element($../../../../Essentials/Functions/Operations/"Inner operations"(X = {N})),
        _12: %Constraint($../../../../Essentials/Functions/Operations/associative(
          X = {N},
          ∗ = {⋆}
        )),
        _13: %Constraint($../../../../Essentials/Functions/Operations/commutative(
          X = {N},
          Z = {N},
          ∗ = {⋆}
        )),
        𝟢: %Element(N),
        _14: %Constraint(%forall(
          #(x: %Element(N)),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {N},
              Y = {N},
              Z = {N},
              ∗ = {⋆},
              x = {x},
              y = {𝟢}
            ),
            $../../../../Essentials/Functions/Operations/value(
              X = {N},
              Y = {N},
              Z = {N},
              ∗ = {⋆},
              x = {𝟢},
              y = {x}
            ),
            x
          )
        )),
        ∼: %Element($../../../../Essentials/Functions/Functions(
          X = {N},
          Y = {N}
        )),
        _15: %Constraint(%forall(
          #(x: %Element(N)),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {N},
              Y = {N},
              Z = {N},
              ∗ = {⋆},
              x = {x},
              y = {$../../../../Essentials/Functions/value(
                X = {N},
                Y = {N},
                f = {∼},
                x = {x}
              )}
            ),
            $../../../../Essentials/Functions/Operations/value(
              X = {N},
              Y = {N},
              Z = {N},
              ∗ = {⋆},
              x = {$../../../../Essentials/Functions/value(
                X = {N},
                Y = {N},
                f = {∼},
                x = {x}
              )},
              y = {x}
            ),
            𝟢
          )
        )),
        ∗: %Element($../../../../Essentials/Functions/Operations/Operations(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {N},
          Z = {N}
        )),
        _16: %Constraint($../../../../Essentials/Functions/Operations/"left-distributive"(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {N},
          ∗ = {∗},
          ⋆ = {⋆}
        )),
        _17: %Constraint(%forall(
          #(
            a: %Element($../../Carrier(𝐑 = {𝐑})),
            b: %Element(%previous),
            x: %Element(N)
          ),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {N},
              Z = {N},
              ∗ = {∗},
              x = {$../../sum(
                𝐑 = {𝐑},
                a = {a},
                b = {b}
              )},
              y = {x}
            ),
            $../../../../Essentials/Functions/Operations/value(
              X = {N},
              Y = {N},
              Z = {N},
              ∗ = {⋆},
              x = {$../../../../Essentials/Functions/Operations/value(
                X = {$../../Carrier(𝐑 = {𝐑})},
                Y = {N},
                Z = {N},
                ∗ = {∗},
                x = {a},
                y = {x}
              )},
              y = {$../../../../Essentials/Functions/Operations/value(
                X = {$../../Carrier(𝐑 = {𝐑})},
                Y = {N},
                Z = {N},
                ∗ = {∗},
                x = {b},
                y = {x}
              )}
            )
          )
        )),
        _18: %Constraint(%forall(
          #(x: %Element(N)),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {N},
              Z = {N},
              ∗ = {∗},
              x = {$../../zero(𝐑 = {𝐑})},
              y = {x}
            ),
            𝟢
          )
        )),
        _19: %Constraint(%forall(
          #(a: %Element($../../Carrier(𝐑 = {𝐑}))),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {N},
              Z = {N},
              ∗ = {∗},
              x = {a},
              y = {𝟢}
            ),
            𝟢
          )
        )),
        _20: %Constraint(%forall(
          #(
            a: %Element($../../Carrier(𝐑 = {𝐑})),
            x: %Element(N)
          ),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {N},
              Z = {N},
              ∗ = {∗},
              x = {$../../"additive inverse"(
                𝐑 = {𝐑},
                a = {a}
              )},
              y = {x}
            ),
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {N},
              Z = {N},
              ∗ = {∗},
              x = {a},
              y = {$../../../../Essentials/Functions/value(
                X = {N},
                Y = {N},
                f = {∼},
                x = {x}
              )}
            ),
            $../../../../Essentials/Functions/value(
              X = {N},
              Y = {N},
              f = {∼},
              x = {$../../../../Essentials/Functions/Operations/value(
                X = {$../../Carrier(𝐑 = {𝐑})},
                Y = {N},
                Z = {N},
                ∗ = {∗},
                x = {a},
                y = {x}
              )}
            )
          )
        )),
        _21: %Constraint(%forall(
          #(
            a: %Element($../../Carrier(𝐑 = {𝐑})),
            b: %Element(%previous),
            x: %Element(N)
          ),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {N},
              Z = {N},
              ∗ = {∗},
              x = {$../../product(
                𝐑 = {𝐑},
                a = {a},
                b = {b}
              )},
              y = {x}
            ),
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {N},
              Z = {N},
              ∗ = {∗},
              x = {a},
              y = {$../../../../Essentials/Functions/Operations/value(
                X = {$../../Carrier(𝐑 = {𝐑})},
                Y = {N},
                Z = {N},
                ∗ = {∗},
                x = {b},
                y = {x}
              )}
            )
          )
        )),
        _22: %Constraint(%forall(
          #(x: %Element(N)),
          %equals(
            $../../../../Essentials/Functions/Operations/value(
              X = {$../../Carrier(𝐑 = {𝐑})},
              Y = {N},
              Z = {N},
              ∗ = {∗},
              x = {$../../one(𝐑 = {𝐑})},
              y = {x}
            ),
            x
          )
        ))
      ),
      definition = [%exists(
        #(φ: %Element($../../../../Essentials/Functions/Bijections(
          X = {M},
          Y = {N}
        ))),
        formula = %and(
          %equals(
            $../../../Generic/Isomorphisms/"inner operation transport"(
              X = {M},
              Y = {N},
              φ = {φ},
              ∗ = {⊕}
            ),
            ⋆
          ),
          %equals(
            $../../../Generic/Isomorphisms/"element transport"(
              X = {M},
              Y = {N},
              φ = {φ},
              x = {"0"}
            ),
            𝟢
          ),
          %equals(
            $../../../Generic/Isomorphisms/"function transport"(
              X = {M},
              Y = {N},
              φ = {φ},
              f = {⊖}
            ),
            ∼
          ),
          %equals(
            $../../../Generic/Isomorphisms/"left operation transport"(
              S = {$../../Carrier(𝐑 = {𝐑})},
              X = {M},
              Y = {N},
              φ = {φ},
              ∗ = {⊙}
            ),
            ∗
          )
        )
      )],
      isomorphic = %true
    }
  }

  display = [$Function(
    function = '𝓛𝓜𝓸𝓭',
    arguments = [𝐑]
  )],
  definitionDisplay = {
    parameter = #(𝐌: %Expr),
    singularName = [[
      'left ',
      $DependentWord(
        word = 'module',
        argument = 𝐑
      )
    ]],
    pluralName = [[
      'left ',
      $DependentWord(
        word = 'modules',
        argument = 𝐑
      )
    ]]
  }
}
