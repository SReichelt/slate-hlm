%../../../../../../../logics/hlm%

[
  $~Functions = $../../../../../Essentials/Functions/Functions,
  $~"Left modules" = $../"Left modules",
  $~"additive inverse" = $../"additive inverse",
  $~product = $../product,
  $~sum = $../sum,
  $~value = $../../../../../Essentials/Functions/value,
  $~zero = $../zero
]

/**
 * @references * https://en.wikipedia.org/wiki/Module_homomorphism
 *             * https://proofwiki.org/wiki/Definition:Linear_Transformation
 *             * https://ncatlab.org/nlab/show/homomorphism
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/module/basic.html#linear_map
 */
$Homomorphisms(
  𝐑: %Element(
    $../../../Rings,
    auto = %true
  ),
  𝐌,𝐍: %Element($~"Left modules"(𝐑 = 𝐑))
): %SetOperator {
  notation = $Function(
    function = 'Hom',
    arguments = [𝐌, 𝐍]
  ),
  definitionNotation = {
    parameter = #(φ: %Expr),
    notation = $FunctionDeclaration(
      function = φ,
      operands = [𝐌, 𝐍]
    ),
    singularName = 'homomorphism',
    pluralName = 'homomorphisms'
  },
  definition = [
    %subset(
      #(f: %Element($~Functions(
        X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
        Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍)
      ))),
      %and(
        %forall(
          #(x,y: %Element($../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌))),
          %equals(
            $~value(
              X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
              Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
              f = f,
              x = $~sum(𝐑 = 𝐑, 𝐌 = 𝐌, x = x, y = y)
            ),
            $~sum(
              𝐑 = 𝐑, 𝐌 = 𝐍,
              x = $~value(
                X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
                Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
                f = f, x = x
              ),
              y = $~value(
                X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
                Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
                f = f, x = y
              )
            )
          )
        ),
        %equals(
          $~value(
            X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
            Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
            f = f,
            x = $~zero(𝐑 = 𝐑, 𝐌 = 𝐌)
          ),
          $~zero(𝐑 = 𝐑, 𝐌 = 𝐍)
        ),
        %forall(
          #(z: %Element($../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌))),
          %equals(
            $~value(
              X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
              Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
              f = f,
              x = $~"additive inverse"(𝐑 = 𝐑, 𝐌 = 𝐌, x = z)
            ),
            $~"additive inverse"(
              𝐑 = 𝐑, 𝐌 = 𝐍,
              x = $~value(
                X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
                Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
                f = f, x = z
              )
            )
          )
        ),
        %forall(
          #(
            a: %Element($../../../Carrier(𝐑 = 𝐑)),
            w: %Element($../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌))
          ),
          %equals(
            $~value(
              X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
              Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
              f = f,
              x = $~product(𝐑 = 𝐑, 𝐌 = 𝐌, a = a, x = w)
            ),
            $~product(
              𝐑 = 𝐑, 𝐌 = 𝐍, a = a,
              x = $~value(
                X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
                Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
                f = f, x = w
              )
            )
          )
        )
      )
    ),
    %subset(
      #(f: %Element($~Functions(
        X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
        Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍)
      ))),
      %forall(
        #(
          a,b: %Element($../../../Carrier(𝐑 = 𝐑)),
          x,y: %Element($../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌))
        ),
        %equals(
          $~value(
            X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
            Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
            f = f,
            x = $~sum(
              𝐑 = 𝐑, 𝐌 = 𝐌,
              x = $~product(𝐑 = 𝐑, 𝐌 = 𝐌, a = a, x = x),
              y = $~product(𝐑 = 𝐑, 𝐌 = 𝐌, a = b, x = y)
            )
          ),
          $~sum(
            𝐑 = 𝐑, 𝐌 = 𝐍,
            x = $~product(
              𝐑 = 𝐑, 𝐌 = 𝐍, a = a,
              x = $~value(
                X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
                Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
                f = f, x = x
              )
            ),
            y = $~product(
              𝐑 = 𝐑, 𝐌 = 𝐍, a = b,
              x = $~value(
                X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
                Y = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐍),
                f = f, x = y
              )
            )
          )
        )
      )
    )
  ]
}
