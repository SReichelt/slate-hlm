%../../../../../../logics/hlm%

$"additive inverse"(
  𝐑: %Element(
    $../../Rings,
    auto = %true
  ),
  𝐌: %Element(
    $"Left modules"(𝐑 = {𝐑}),
    auto = %true
  ),
  x: %Element($Carrier(
    𝐑 = {𝐑},
    𝐌 = {𝐌}
  ))
): %ExplicitOperator {
  notation = $NegationOperator(operand = x),
  definition = [%structuralCases(
    𝐌,
    $"Left modules"(𝐑 = {𝐑}),
    [{
      constructor = $"Left modules".module,
      parameters = #(
        M: %Set,
        ⊕: %Element($../../../../Essentials/Functions/Operations/"Inner operations"(X = {M})),
        "0": %Element(M),
        ⊖: %Element($../../../../Essentials/Functions/Functions(
          X = {M},
          Y = {M}
        )),
        ⊙: %Element($../../../../Essentials/Functions/Operations/Operations(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M}
        )),
        _1: %Constraint($"left module"(
          𝐑 = {𝐑},
          M = {M},
          ⊕ = {⊕},
          "0" = {"0"},
          ⊖ = {⊖},
          ⊙ = {⊙}
        ))
      ),
      value = $../../../../Essentials/Functions/value(
        X = {M},
        Y = {M},
        f = {⊖},
        x = {x}
      )
    }]
  )]
}
