%../../../../../../logics/hlm%

/**
 * @remarks This definition retrieves a representative carrier set from a module (which is actually an equivalence class of modules), and enables typical abuse of notation.
 */
$Carrier(
  𝐑: %Element(
    $../../Rings,
    auto = %true
  ),
  𝐌: %Element($"Left modules"(𝐑 = {𝐑}))
): %SetOperator {
  display = [$Parens(
    body = 𝐌,
    style = '()'
  )],
  definitionDisplay = {
    parameter = #(x: %Expr),
    display = [$ElementParameter(
      element = x,
      set = 𝐌
    )]
  },
  definition = [%setStructuralCases(
    𝐌,
    $"Left modules"(𝐑 = {𝐑}),
    [{
      constructor = $"Left modules".module,
      parameters = #(
        M: %Set,
        ⊕: %Element($../../../../Essentials/Functions/Operations/"Inner operations"(X = {M})),
        "0": %Element(M),
        ⊖: %Element($../../../../Essentials/Functions/Functions(
          X = {M},
          Y = {M}
        )),
        ⊙: %Element($../../../../Essentials/Functions/Operations/Operations(
          X = {$../../Carrier(𝐑 = {𝐑})},
          Y = {M},
          Z = {M}
        )),
        _1: %Constraint($"left module"(
          𝐑 = {𝐑},
          M = {M},
          ⊕ = {⊕},
          "0" = {"0"},
          ⊖ = {⊖},
          ⊙ = {⊙}
        ))
      ),
      value = M
    }]
  )]
}
