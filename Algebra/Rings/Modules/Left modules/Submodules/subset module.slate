%../../../../../../../logics/hlm%

[
  $~Carrier = $../../../Carrier,
  $~Essentials = $../../../../../Essentials,
  $~"Left modules" = $../"Left modules",
  $~Operations = $../../../../../Essentials/Operations
]

/**
 * @references * https://leanprover-community.github.io/mathlib_docs/algebra/module/basic.html#submodule.module
 */
$"subset module"(
  𝐑: %Element(
    $../../../Rings,
    auto = %true
  ),
  𝐌: %Element($~"Left modules"(𝐑 = 𝐑)),
  S: %Subset($../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌)),
  _1: %Constraint($"submodule set"(𝐑 = 𝐑, 𝐌 = 𝐌, S = S))
): %ExplicitOperator {
  notation = $SubSup(
    body = $Parens(body = S, style = '[]'),
    sub = 𝐌
  ),
  definition = [%structuralCases(
    𝐌,
    $~"Left modules"(𝐑 = 𝐑),
    [{
      constructor = $~"Left modules".module,
      parameters = #(
        M: %Set,
        ⊕: %Element($~Operations/"Inner operations"(X = M)),
        "0": %Element(M),
        ⊖: %Element($~Essentials/Functions/Functions(X = M, Y = M)),
        ⊙: %Element($~Operations/Operations(
          X = $~Carrier(𝐑 = 𝐑),
          Y = M, Z = M
        )),
        _1: %Constraint($../"left module"(𝐑 = 𝐑, M = M, ⊕ = ⊕, "0" = "0", ⊖ = ⊖, ⊙ = ⊙))
      ),
      value = $~"Left modules"(𝐑 = 𝐑).module(
          M = S,
          ⊕ = $~Operations/"inner operation restriction"(X = M, A = S, ∗ = ⊕),
          "0" = "0",
          ⊖ = $~Essentials/Functions/"codomain restriction"(X = M, A = S, Y = M, B = S, f = ⊖),
          ⊙ = $~Operations/"left operation restriction"(
            X = $~Carrier(𝐑 = 𝐑),
            Y = M, A = S, ∗ = ⊙
          )
      )
    }]
  )]
}
