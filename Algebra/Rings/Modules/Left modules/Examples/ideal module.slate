%../../../../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Module_(mathematics)#Examples
 *             * https://proofwiki.org/wiki/Left_Ideal_is_Left_Module_over_Ring
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/module.html#ideal (defined as submodule)
 */
$"ideal module"(
  ùêë: %Element($../../../Rings),
  I: %Subset($../../../Carrier(ùêë = {ùêë})),
  _1: %Constraint($../../../Ideals/"left ideal"(
    ùêë = {ùêë},
    I = {I}
  ))
): %ExplicitOperator {
  display = [$SubSup(
    body = $Parens(
      body = I,
      style = '[]'
    ),
    sub = ùêë
  )],
  definition = [%structuralCases(
    ùêë,
    $../../../Rings,
    [{
      constructor = $../../../Rings.ring,
      parameters = #(
        R: %Set,
        ‚äï: %Element($../../../../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        _2: %Constraint($../../../../../Essentials/Functions/Operations/associative(
          X = {R},
          ‚àó = {‚äï}
        )),
        _3: %Constraint($../../../../../Essentials/Functions/Operations/commutative(
          X = {R},
          Z = {R},
          ‚àó = {‚äï}
        )),
        "0": %Element(R),
        _4: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {a},
              y = {"0"}
            ),
            $../../../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {"0"},
              y = {a}
            ),
            a
          )
        )),
        ‚äñ: %Element($../../../../../Essentials/Functions/Functions(
          X = {R},
          Y = {R}
        )),
        _5: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {a},
              y = {$../../../../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {a}
              )}
            ),
            $../../../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {$../../../../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {a}
              )},
              y = {a}
            ),
            "0"
          )
        )),
        ‚äô: %Element($../../../../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        _6: %Constraint($../../../../../Essentials/Functions/Operations/associative(
          X = {R},
          ‚àó = {‚äô}
        )),
        _7: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {a},
              y = {"0"}
            ),
            $../../../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {"0"},
              y = {a}
            ),
            "0"
          )
        )),
        _8: %Constraint(%forall(
          #(
            a: %Element(R),
            b: %Element(%previous)
          ),
          %equals(
            $../../../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {a},
              y = {$../../../../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {b}
              )}
            ),
            $../../../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {$../../../../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {a}
              )},
              y = {b}
            ),
            $../../../../../Essentials/Functions/value(
              X = {R},
              Y = {R},
              f = {‚äñ},
              x = {$../../../../../Essentials/Functions/Operations/value(
                X = {R},
                Y = {R},
                Z = {R},
                ‚àó = {‚äô},
                x = {a},
                y = {b}
              )}
            )
          )
        )),
        "1": %Element(R),
        _9: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {a},
              y = {"1"}
            ),
            $../../../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {"1"},
              y = {a}
            ),
            a
          )
        )),
        _10: %Constraint($../../../../../Essentials/Functions/Operations/distributive(
          X = {R},
          ‚àó = {‚äô},
          ‚ãÜ = {‚äï}
        ))
      ),
      value = $../"Left modules"(ùêë = {ùêë}).module(
          M = {I},
          ‚äï = {$../../../../../Essentials/Functions/Operations/"inner operation restriction"(
            X = {R},
            A = {I},
            ‚àó = {‚äï}
          )},
          "0" = {"0"},
          ‚äñ = {$../../../../../Essentials/Functions/"codomain restriction"(
            X = {R},
            A = {I},
            Y = {R},
            B = {I},
            f = {‚äñ}
          )},
          ‚äô = {$../../../../../Essentials/Functions/Operations/"left operation restriction"(
            X = {R},
            Y = {R},
            A = {I},
            ‚àó = {‚äô}
          )}
      )
    }]
  )]
}
