%../../../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Module_(mathematics)
 *             * https://mathworld.wolfram.com/Module.html
 *             * https://proofwiki.org/wiki/Definition:Unitary_Module
 *             * https://ncatlab.org/nlab/show/module#ModulesOverARingInTermsOfStabilizedSlices
 */
$"Right modules"(𝐑: %Element($../../Rings)): %Construction {
  $module(
    M: %Set,
    ⊕: %Element($../../../../Essentials/Functions/Operations/"Inner operations"(X = {M})),
    "0": %Element(M),
    ⊖: %Element($../../../../Essentials/Functions/Functions(
      X = {M},
      Y = {M}
    )),
    ⊙: %Element($../../../../Essentials/Functions/Operations/Operations(
      X = {M},
      Y = {$../../Carrier(𝐑 = {𝐑})},
      Z = {M}
    )),
    _1: %Constraint($"right module"(
      𝐑 = {𝐑},
      M = {M},
      ⊕ = {⊕},
      "0" = {"0"},
      ⊖ = {⊖},
      ⊙ = {⊙}
    ))
  ): %Constructor {
    notation = $SubSup(
      body = $Tuple(
        items = [M, ⊕, "0", ⊖, ⊙],
        style = '[]'
      ),
      sub = 𝐑
    ),
    equalityDefinition = {
      leftParameters = #(
        M: %Set,
        ⊕: %Element($../../../../Essentials/Functions/Operations/"Inner operations"(X = {M})),
        "0": %Element(M),
        ⊖: %Element($../../../../Essentials/Functions/Functions(
          X = {M},
          Y = {M}
        )),
        ⊙: %Element($../../../../Essentials/Functions/Operations/Operations(
          X = {M},
          Y = {$../../Carrier(𝐑 = {𝐑})},
          Z = {M}
        )),
        _1: %Constraint($"right module"(
          𝐑 = {𝐑},
          M = {M},
          ⊕ = {⊕},
          "0" = {"0"},
          ⊖ = {⊖},
          ⊙ = {⊙}
        ))
      ),
      rightParameters = #(
        N: %Set,
        ⋆: %Element($../../../../Essentials/Functions/Operations/"Inner operations"(X = {N})),
        𝟢: %Element(N),
        ∼: %Element($../../../../Essentials/Functions/Functions(
          X = {N},
          Y = {N}
        )),
        ∗: %Element($../../../../Essentials/Functions/Operations/Operations(
          X = {N},
          Y = {$../../Carrier(𝐑 = {𝐑})},
          Z = {N}
        )),
        _2: %Constraint($"right module"(
          𝐑 = {𝐑},
          M = {N},
          ⊕ = {⋆},
          "0" = {𝟢},
          ⊖ = {∼},
          ⊙ = {∗}
        ))
      ),
      definition = [%exists(
        #(φ: %Element($../../../../Essentials/Functions/Bijections(
          X = {M},
          Y = {N}
        ))),
        formula = %and(
          %equals(
            $../../../Generic/Isomorphisms/"inner operation transport"(
              X = {M},
              Y = {N},
              φ = {φ},
              ∗ = {⊕}
            ),
            ⋆
          ),
          %equals(
            $../../../Generic/Isomorphisms/"element transport"(
              X = {M},
              Y = {N},
              φ = {φ},
              x = {"0"}
            ),
            𝟢
          ),
          %equals(
            $../../../Generic/Isomorphisms/"function transport"(
              X = {M},
              Y = {N},
              φ = {φ},
              f = {⊖}
            ),
            ∼
          ),
          %equals(
            $../../../Generic/Isomorphisms/"right operation transport"(
              S = {$../../Carrier(𝐑 = {𝐑})},
              X = {M},
              Y = {N},
              φ = {φ},
              ∗ = {⊙}
            ),
            ∗
          )
        )
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = '𝓡𝓜𝓸𝓭',
    arguments = [𝐑]
  ),
  definitionNotation = {
    parameter = #(𝐌: %Expr),
    singularName = [[
      'right ',
      $DependentWord(
        word = 'module',
        argument = 𝐑
      )
    ]],
    pluralName = [[
      'right ',
      $DependentWord(
        word = 'modules',
        argument = 𝐑
      )
    ]]
  }
}
