%../../../../../../logics/hlm%

$"additive inverse"(
  𝐑: %Element(
    $../../Rings,
    auto = %true
  ),
  𝐌: %Element(
    $"Right modules"(𝐑 = 𝐑),
    auto = %true
  ),
  x: %Element($Carrier(
    𝐑 = 𝐑,
    𝐌 = 𝐌
  ))
): %ExplicitOperator {
  notation = $NegationOperator(operand = x),
  definition = [%structuralCases(
    𝐌,
    $"Right modules"(𝐑 = 𝐑),
    [{
      constructor = $"Right modules".module,
      parameters = #(
        M: %Set,
        ⊕: %Element($../../../../Essentials/Operations/"Inner operations"(X = M)),
        "0": %Element(M),
        ⊖: %Element($../../../../Essentials/Functions/Functions(
          X = M,
          Y = M
        )),
        ⊙: %Element($../../../../Essentials/Operations/Operations(
          X = M,
          Y = $../../Carrier(𝐑 = 𝐑),
          Z = M
        )),
        _1: %Constraint($"right module"(
          𝐑 = 𝐑,
          M = M,
          ⊕ = ⊕,
          "0" = "0",
          ⊖ = ⊖,
          ⊙ = ⊙
        ))
      ),
      value = $../../../../Essentials/Functions/value(
        X = M,
        Y = M,
        f = ⊖,
        x = x
      )
    }]
  )]
}
