%../../../../../../logics/hlm%

[
  $~Carrier = $../../Carrier,
  $~Essentials = $../../../../Essentials,
  $~Operations = $../../../../Essentials/Operations,
  $~"abelian group" = $../../../Groups/"abelian group",
  $~one = $../../one,
  $~product = $../../product,
  $~"right identity element" = $../../../../Essentials/Operations/"right identity element",
  $~"right-distributive" = $../../../../Essentials/Operations/"right-distributive",
  $~sum = $../../sum
]

/**
 * @references * https://en.wikipedia.org/wiki/Module_(mathematics)
 *             * https://mathworld.wolfram.com/Module.html
 *             * https://proofwiki.org/wiki/Definition:Unitary_Module
 *             * https://ncatlab.org/nlab/show/module#ModulesOverARingInTermsOfStabilizedSlices
 */
$"right module"(
  𝐑: %Element($../../Rings),
  M: %Set,
  ⊕: %Element($~Operations/"Inner operations"(X = M)),
  "0": %Element(M),
  ⊖: %Element($~Essentials/Functions/Functions(X = M, Y = M)),
  ⊙: %Element($~Operations/Operations(
    X = M,
    Y = $~Carrier(𝐑 = 𝐑),
    Z = M
  ))
): %Predicate {
  notation = $Structure(
    items = [M, ⊕, "0", ⊖, ⊙],
    singular = [
      'right ',
      $DependentWord(word = 'module', argument = 𝐑)
    ],
    plural = [
      'right ',
      $DependentWord(word = 'modules', argument = 𝐑)
    ]
  ),
  definition = [
    %and(
      $~"abelian group"(G = M, ∗ = ⊕, e = "0", i = ⊖),
      $~"right-distributive"(
        X = $~Carrier(𝐑 = 𝐑),
        Y = M, ∗ = ⊙, ⋆ = ⊕
      ),
      %forall(
        #(
          x: %Element(M),
          a,b: %Element($~Carrier(𝐑 = 𝐑))
        ),
        %equals(
          $~Operations/value(
            X = M,
            Y = $~Carrier(𝐑 = 𝐑),
            Z = M, ∗ = ⊙, x = x,
            y = $~sum(𝐑 = 𝐑, a = a, b = b)
          ),
          $~Operations/value(
            X = M, Y = M, Z = M, ∗ = ⊕,
            x = $~Operations/value(
              X = M,
              Y = $~Carrier(𝐑 = 𝐑),
              Z = M, ∗ = ⊙, x = x, y = a
            ),
            y = $~Operations/value(
              X = M,
              Y = $~Carrier(𝐑 = 𝐑),
              Z = M, ∗ = ⊙, x = x, y = b
            )
          )
        )
      ),
      %forall(
        #(x: %Element(M)),
        %equals(
          $~Operations/value(
            X = M,
            Y = $~Carrier(𝐑 = 𝐑),
            Z = M, ∗ = ⊙, x = x,
            y = $../../zero(𝐑 = 𝐑)
          ),
          "0"
        )
      ),
      $~Operations/"left absorbing element"(
        X = M,
        Y = $~Carrier(𝐑 = 𝐑),
        ∗ = ⊙, z = "0"
      ),
      %forall(
        #(
          a: %Element($~Carrier(𝐑 = 𝐑)),
          x: %Element(M)
        ),
        %equals(
          $~Operations/value(
            X = M,
            Y = $~Carrier(𝐑 = 𝐑),
            Z = M, ∗ = ⊙, x = x,
            y = $../../"additive inverse"(𝐑 = 𝐑, a = a)
          ),
          $~Operations/value(
            X = M,
            Y = $~Carrier(𝐑 = 𝐑),
            Z = M, ∗ = ⊙,
            x = $~Essentials/Functions/value(X = M, Y = M, f = ⊖, x = x),
            y = a
          ),
          $~Essentials/Functions/value(
            X = M, Y = M, f = ⊖,
            x = $~Operations/value(
              X = M,
              Y = $~Carrier(𝐑 = 𝐑),
              Z = M, ∗ = ⊙, x = x, y = a
            )
          )
        )
      ),
      %forall(
        #(
          x: %Element(M),
          a,b: %Element($~Carrier(𝐑 = 𝐑))
        ),
        %equals(
          $~Operations/value(
            X = M,
            Y = $~Carrier(𝐑 = 𝐑),
            Z = M, ∗ = ⊙, x = x,
            y = $~product(𝐑 = 𝐑, a = a, b = b)
          ),
          $~Operations/value(
            X = M,
            Y = $~Carrier(𝐑 = 𝐑),
            Z = M, ∗ = ⊙,
            x = $~Operations/value(
              X = M,
              Y = $~Carrier(𝐑 = 𝐑),
              Z = M, ∗ = ⊙, x = x, y = a
            ),
            y = b
          )
        )
      ),
      $~"right identity element"(
        X = M,
        Y = $~Carrier(𝐑 = 𝐑),
        ∗ = ⊙,
        e = $~one(𝐑 = 𝐑)
      )
    ),
    %and(
      $~"abelian group"(G = M, ∗ = ⊕, e = "0", i = ⊖),
      $~"right-distributive"(
        X = $~Carrier(𝐑 = 𝐑),
        Y = M, ∗ = ⊙, ⋆ = ⊕
      ),
      %forall(
        #(
          x: %Element(M),
          a,b: %Element($~Carrier(𝐑 = 𝐑))
        ),
        %equals(
          $~Operations/value(
            X = M,
            Y = $~Carrier(𝐑 = 𝐑),
            Z = M, ∗ = ⊙, x = x,
            y = $~sum(𝐑 = 𝐑, a = a, b = b)
          ),
          $~Operations/value(
            X = M, Y = M, Z = M, ∗ = ⊕,
            x = $~Operations/value(
              X = M,
              Y = $~Carrier(𝐑 = 𝐑),
              Z = M, ∗ = ⊙, x = x, y = a
            ),
            y = $~Operations/value(
              X = M,
              Y = $~Carrier(𝐑 = 𝐑),
              Z = M, ∗ = ⊙, x = x, y = b
            )
          )
        )
      ),
      %forall(
        #(
          x: %Element(M),
          a,b: %Element($~Carrier(𝐑 = 𝐑))
        ),
        %equals(
          $~Operations/value(
            X = M,
            Y = $~Carrier(𝐑 = 𝐑),
            Z = M, ∗ = ⊙, x = x,
            y = $~product(𝐑 = 𝐑, a = a, b = b)
          ),
          $~Operations/value(
            X = M,
            Y = $~Carrier(𝐑 = 𝐑),
            Z = M, ∗ = ⊙,
            x = $~Operations/value(
              X = M,
              Y = $~Carrier(𝐑 = 𝐑),
              Z = M, ∗ = ⊙, x = x, y = a
            ),
            y = b
          )
        )
      ),
      $~"right identity element"(
        X = M,
        Y = $~Carrier(𝐑 = 𝐑),
        ∗ = ⊙,
        e = $~one(𝐑 = 𝐑)
      )
    )
  ]
}
