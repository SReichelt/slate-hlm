%../../../../../../../logics/hlm%

[
  $~Carrier = $../Carrier,
  $~"Ordinal-indexed sequences" = $../../../../../Essentials/Sequences/"Ordinal-indexed sequences",
  $~"Segment (less)" = $../../../../../Essentials/Numbers/Ordinal/Subsets/"Segment (less)",
  $~Tuples = $../../../../../Essentials/Sequences/Tuples
]

$Span(
  𝐑: %Element(
    $../../../Rings,
    auto = %true
  ),
  𝐌: %Element(
    $../"Right modules"(𝐑 = 𝐑),
    auto = %true
  ),
  𝒙: %Element($"Element sequences"(𝐑 = 𝐑, 𝐌 = 𝐌))
): %SetOperator {
  notation = $Parens(body = 𝒙, style = '<>'),
  definition = [
    %setStructuralCases(
      𝒙,
      $~"Ordinal-indexed sequences"(S = $~Carrier(𝐑 = 𝐑, 𝐌 = 𝐌)),
      [{
        constructor = $~"Ordinal-indexed sequences".sequence,
        parameters = #(
          α: %Element($../../../../../Essentials/Numbers/Ordinal/"Ordinal numbers"),
          m: %Element($~Tuples(
            S = $~Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
            α = α
          ))
        ),
        value = %setStructuralCases(
          m,
          $~Tuples(
            S = $~Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
            α = α
          ),
          [{
            constructor = $~Tuples.sequence,
            parameters = #(_1: %Binder(
              #(k: %Element($~"Segment (less)"(α = α))),
              #(x: %Element($~Carrier(𝐑 = 𝐑, 𝐌 = 𝐌)))
            )),
            value = $../Submodules/Span(
              𝐑 = 𝐑, 𝐌 = 𝐌,
              X = %extendedSubset(
                #(k: %Element($~"Segment (less)"(α = α))),
                x[k = k]
              )
            )
          }]
        )
      }]
    ),
    %extendedSubset(
      #(𝐚: %Element($Coordinates(𝐑 = 𝐑, 𝐌 = 𝐌, 𝒙 = 𝒙))),
      $"linear combination"(𝐑 = 𝐑, 𝐌 = 𝐌, 𝒙 = 𝒙, 𝐚 = 𝐚)
    )
  ]
}
