%../../../../../../../logics/hlm%

$Span(
  𝐑: %Element(
    $../../../Rings,
    auto = %true
  ),
  𝐌: %Element(
    $../"Right modules"(𝐑 = 𝐑),
    auto = %true
  ),
  𝒙: %Element($"Element sequences"(
    𝐑 = 𝐑,
    𝐌 = 𝐌
  ))
): %SetOperator {
  notation = $Parens(
    body = 𝒙,
    style = '<>'
  ),
  definition = [
    %setStructuralCases(
      𝒙,
      $../../../../../Essentials/Sequences/"Ordinal-indexed sequences"(S = $../Carrier(
        𝐑 = 𝐑,
        𝐌 = 𝐌
      )),
      [{
        constructor = $../../../../../Essentials/Sequences/"Ordinal-indexed sequences".sequence,
        parameters = #(
          α: %Element($../../../../../Essentials/Numbers/Ordinal/"Ordinal numbers"),
          m: %Element($../../../../../Essentials/Sequences/Tuples(
            S = $../Carrier(
              𝐑 = 𝐑,
              𝐌 = 𝐌
            ),
            α = α
          ))
        ),
        value = %setStructuralCases(
          m,
          $../../../../../Essentials/Sequences/Tuples(
            S = $../Carrier(
              𝐑 = 𝐑,
              𝐌 = 𝐌
            ),
            α = α
          ),
          [{
            constructor = $../../../../../Essentials/Sequences/Tuples.sequence,
            parameters = #(_1: %Binder(
              #(k: %Element($../../../../../Essentials/Numbers/Ordinal/Subsets/"Segment (less)"(α = α))),
              #(x: %Element($../Carrier(
                𝐑 = 𝐑,
                𝐌 = 𝐌
              )))
            )),
            value = $../Submodules/Span(
              𝐑 = 𝐑,
              𝐌 = 𝐌,
              X = %extendedSubset(
                #(k: %Element($../../../../../Essentials/Numbers/Ordinal/Subsets/"Segment (less)"(α = α))),
                x[k = k]
              )
            )
          }]
        )
      }]
    ),
    %extendedSubset(
      #(𝐚: %Element($Coordinates(
        𝐑 = 𝐑,
        𝐌 = 𝐌,
        𝒙 = 𝒙
      ))),
      $"linear combination"(
        𝐑 = 𝐑,
        𝐌 = 𝐌,
        𝒙 = 𝒙,
        𝐚 = 𝐚
      )
    )
  ]
}
