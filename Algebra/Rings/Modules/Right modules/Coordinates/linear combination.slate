%../../../../../../../logics/hlm%

[
  $~Essentials = $../../../../../Essentials,
  $~"Ordinal-indexed sequences" = $../../../../../Essentials/Sequences/"Ordinal-indexed sequences",
  $~"Segment (less)" = $../../../../../Essentials/Numbers/Ordinal/Subsets/"Segment (less)",
  $~Tuples = $../../../../../Essentials/Sequences/Tuples,
  $~"ordinal-indexed sequence length" = $../../../../../Essentials/Sequences/"ordinal-indexed sequence length"
]

/**
 * @references * https://en.wikipedia.org/wiki/Linear_combination
 *             * https://mathworld.wolfram.com/LinearCombination.html
 *             * https://proofwiki.org/wiki/Definition:Linear_Combination
 *             * https://ncatlab.org/nlab/show/linear+combination
 */
$"linear combination"(
  𝐑: %Element(
    $../../../Rings,
    auto = %true
  ),
  𝐌: %Element(
    $../"Right modules"(𝐑 = 𝐑),
    auto = %true
  ),
  𝒙: %Element($"Element sequences"(𝐑 = 𝐑, 𝐌 = 𝐌)),
  𝐚: %Element($Coordinates(𝐑 = 𝐑, 𝐌 = 𝐌, 𝒙 = 𝒙))
): %ExplicitOperator {
  notation = $MultiplicationOperator(operands = [𝒙, 𝐚]),
  definition = [%structuralCases(
    𝐚,
    $~Tuples(
      S = $../../../Carrier(𝐑 = 𝐑),
      α = $~"ordinal-indexed sequence length"(
        S = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
        𝒂 = 𝒙
      )
    ),
    [{
      constructor = $~Tuples.sequence,
      parameters = #(_1: %Binder(
        #(k: %Element($~"Segment (less)"(α = $~"ordinal-indexed sequence length"(
          S = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
          𝒂 = 𝒙
        )))),
        #(a: %Element($../../../Carrier(𝐑 = 𝐑)))
      )),
      value = %structuralCases(
        𝒙,
        $~"Ordinal-indexed sequences"(S = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌)),
        [{
          constructor = $~"Ordinal-indexed sequences".sequence,
          parameters = #(
            α: %Element($~Essentials/Numbers/Ordinal/"Ordinal numbers"),
            m: %Element($~Tuples(
              S = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
              α = α
            ))
          ),
          value = %structuralCases(
            m,
            $~Tuples(
              S = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
              α = α
            ),
            [{
              constructor = $~Tuples.sequence,
              parameters = #(_2: %Binder(
                #(k: %Element($~"Segment (less)"(α = α))),
                #(x: %Element($../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌)))
              )),
              value = $~Essentials/Operations/"Iterated operations"/"indexed by set with finite support"(
                X = $../Carrier(𝐑 = 𝐑, 𝐌 = 𝐌),
                ⨂ = $../"iterated sum"(𝐑 = 𝐑, 𝐌 = 𝐌),
                I = $~"Segment (less)"(α = α),
                _1 = {
                  #(k: %Element($~"Segment (less)"(α = α))),
                  {a = $../product(
                    𝐑 = 𝐑, 𝐌 = 𝐌,
                    x = x[k = k],
                    a = a[k = k]
                  )}
                }
              )
            }]
          )
        }]
      )
    }]
  )]
}
