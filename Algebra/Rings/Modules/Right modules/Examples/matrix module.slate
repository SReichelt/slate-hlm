%../../../../../../../logics/hlm%

$"matrix module"(
  𝐑: %Element($../../../Rings),
  m: %Element($../../../../../Essentials/Numbers/Natural/"Natural numbers"),
  n: %Element(%previous)
): %ExplicitOperator {
  notation = [$SubSup(
    body = 𝐑,
    sup = $Operator(
      symbol = '×',
      space = ' ',
      operands = [m, n]
    )
  )],
  definition = [$../"Right modules"(𝐑 = {𝐑}).module(
      M = {$../../../Matrices/Matrices(
        𝐑 = {𝐑},
        m = {m},
        n = {n}
      )},
      ⊕ = {$../../../../../Essentials/Functions/Operations/operator(
        X = {$../../../Matrices/Matrices(
          𝐑 = {𝐑},
          m = {m},
          n = {n}
        )},
        Y = {$../../../Matrices/Matrices(
          𝐑 = {𝐑},
          m = {m},
          n = {n}
        )},
        Z = {$../../../Matrices/Matrices(
          𝐑 = {𝐑},
          m = {m},
          n = {n}
        )},
        parameters = #(
          A: %Element($../../../Matrices/Matrices(
            𝐑 = {𝐑},
            m = {m},
            n = {n}
          )),
          B: %Element(%previous)
        ),
        operator = $../../../Matrices/sum(
          𝐑 = {𝐑},
          m = {m},
          n = {n},
          A = {A},
          B = {B}
        )
      )},
      "0" = {$../../../Matrices/zero(
        𝐑 = {𝐑},
        m = {m},
        n = {n}
      )},
      ⊖ = {$../../../../../Essentials/Functions/operator(
        X = {$../../../Matrices/Matrices(
          𝐑 = {𝐑},
          m = {m},
          n = {n}
        )},
        Y = {$../../../Matrices/Matrices(
          𝐑 = {𝐑},
          m = {m},
          n = {n}
        )},
        parameter = #(A: %Element($../../../Matrices/Matrices(
          𝐑 = {𝐑},
          m = {m},
          n = {n}
        ))),
        operator = $../../../Matrices/"additive inverse"(
          𝐑 = {𝐑},
          m = {m},
          n = {n},
          A = {A}
        )
      )},
      ⊙ = {$../../../../../Essentials/Functions/Operations/operator(
        X = {$../../../Matrices/Matrices(
          𝐑 = {𝐑},
          m = {m},
          n = {n}
        )},
        Y = {$../../../Carrier(𝐑 = {𝐑})},
        Z = {$../../../Matrices/Matrices(
          𝐑 = {𝐑},
          m = {m},
          n = {n}
        )},
        parameters = #(
          A: %Element($../../../Matrices/Matrices(
            𝐑 = {𝐑},
            m = {m},
            n = {n}
          )),
          r: %Element($../../../Carrier(𝐑 = {𝐑}))
        ),
        operator = $../../../Matrices/"product with right scalar"(
          𝐑 = {𝐑},
          m = {m},
          n = {n},
          A = {A},
          r = {r}
        )
      )}
  )]
}
