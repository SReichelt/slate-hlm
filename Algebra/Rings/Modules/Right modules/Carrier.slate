%../../../../../../logics/hlm%

/**
 * @remarks This definition retrieves a representative carrier set from a module (which is actually an equivalence class of modules), and enables typical abuse of notation.
 */
$Carrier(
  𝐑: %Element(
    $../../Rings,
    auto = %true
  ),
  𝐌: %Element($"Right modules"(𝐑 = 𝐑))
): %SetOperator {
  notation = $Parens(body = 𝐌, style = '()'),
  definitionNotation = {
    parameter = #(x: %Expr),
    notation = $ElementParameter(variable = x, set = 𝐌)
  },
  definition = [%setStructuralCases(
    𝐌,
    $"Right modules"(𝐑 = 𝐑),
    [{
      constructor = $"Right modules".module,
      parameters = #(
        M: %Set,
        ⊕: %Element($../../../../Essentials/Operations/"Inner operations"(X = M)),
        "0": %Element(M),
        ⊖: %Element($../../../../Essentials/Functions/Functions(X = M, Y = M)),
        ⊙: %Element($../../../../Essentials/Operations/Operations(
          X = M,
          Y = $../../Carrier(𝐑 = 𝐑),
          Z = M
        )),
        _1: %Constraint($"right module"(𝐑 = 𝐑, M = M, ⊕ = ⊕, "0" = "0", ⊖ = ⊖, ⊙ = ⊙))
      ),
      value = M
    }]
  )]
}
