%../../../../logics/hlm%

$units(
  𝐑: %Element($Rings),
  U: %SetDef(%subset(
    #(r: %Element($Carrier(𝐑 = {𝐑}))),
    $unit(
      𝐑 = {𝐑},
      r = {r}
    )
  ))
): %ExplicitOperator {
  display = [$SubSup(
    body = 𝐑,
    sup = '×'
  )],
  definition = [%structuralCases(
    𝐑,
    $Rings,
    [{
      constructor = $Rings.ring,
      parameters = #(
        R: %Set,
        ⊕: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        _1: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {R},
          ∗ = {⊕}
        )),
        _2: %Constraint($../../Essentials/Functions/Operations/commutative(
          X = {R},
          Z = {R},
          ∗ = {⊕}
        )),
        "0": %Element(R),
        _3: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊕},
              x = {a},
              y = {"0"}
            ),
            a
          )
        )),
        ⊖: %Element($../../Essentials/Functions/Functions(
          X = {R},
          Y = {R}
        )),
        _4: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ∗ = {⊕},
              x = {a},
              y = {$../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {⊖},
                x = {a}
              )}
            ),
            "0"
          )
        )),
        ⊙: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        _5: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {R},
          ∗ = {⊙}
        )),
        "1": %Element(R),
        _6: %Constraint(%forall(
          #(a: %Element(R)),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {R},
                Y = {R},
                Z = {R},
                ∗ = {⊙},
                x = {a},
                y = {"1"}
              ),
              a
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {R},
                Y = {R},
                Z = {R},
                ∗ = {⊙},
                x = {"1"},
                y = {a}
              ),
              a
            )
          )
        )),
        _7: %Constraint($../../Essentials/Functions/Operations/distributive(
          X = {R},
          ∗ = {⊙},
          ⋆ = {⊕}
        ))
      ),
      value = $../Groups/"monoid with inverses"(𝐌 = {$../Monoids/Monoids.monoid(
          M = {U},
          ∗ = {$../../Essentials/Functions/Operations/"inner operation restriction"(
            X = {R},
            A = {U},
            ∗ = {⊙}
          )},
          e = {"1"}
      )})
    }]
  )]
}
