%../../../../../logics/hlm%

/**
 * @references * https://leanprover-community.github.io/mathlib_docs/ring_theory/subring.html#subtype.ring
 */
$"subset ring"(
  ùêë: %Element($../Rings),
  S: %Subset($../Carrier(ùêë = {ùêë})),
  _1: %Constraint($"subring set"(
    ùêë = {ùêë},
    S = {S}
  ))
): %ExplicitOperator {
  display = [$SubSup(
    body = $Parens(
      body = S,
      style = '[]'
    ),
    sub = ùêë
  )],
  definition = [%structuralCases(
    ùêë,
    $../Rings,
    [{
      constructor = $../Rings.ring,
      parameters = #(
        R: %Set,
        ‚äï: %Element($../../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        _1: %Constraint($../../../Essentials/Functions/Operations/associative(
          X = {R},
          ‚àó = {‚äï}
        )),
        _2: %Constraint($../../../Essentials/Functions/Operations/commutative(
          X = {R},
          Z = {R},
          ‚àó = {‚äï}
        )),
        "0": %Element(R),
        _3: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {a},
              y = {"0"}
            ),
            $../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {"0"},
              y = {a}
            ),
            a
          )
        )),
        ‚äñ: %Element($../../../Essentials/Functions/Functions(
          X = {R},
          Y = {R}
        )),
        _4: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {a},
              y = {$../../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {a}
              )}
            ),
            $../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äï},
              x = {$../../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {a}
              )},
              y = {a}
            ),
            "0"
          )
        )),
        ‚äô: %Element($../../../Essentials/Functions/Operations/"Inner operations"(X = {R})),
        _5: %Constraint($../../../Essentials/Functions/Operations/associative(
          X = {R},
          ‚àó = {‚äô}
        )),
        _6: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {a},
              y = {"0"}
            ),
            $../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {"0"},
              y = {a}
            ),
            "0"
          )
        )),
        _7: %Constraint(%forall(
          #(
            a: %Element(R),
            b: %Element(%previous)
          ),
          %equals(
            $../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {a},
              y = {$../../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {b}
              )}
            ),
            $../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {$../../../Essentials/Functions/value(
                X = {R},
                Y = {R},
                f = {‚äñ},
                x = {a}
              )},
              y = {b}
            ),
            $../../../Essentials/Functions/value(
              X = {R},
              Y = {R},
              f = {‚äñ},
              x = {$../../../Essentials/Functions/Operations/value(
                X = {R},
                Y = {R},
                Z = {R},
                ‚àó = {‚äô},
                x = {a},
                y = {b}
              )}
            )
          )
        )),
        "1": %Element(R),
        _8: %Constraint(%forall(
          #(a: %Element(R)),
          %equals(
            $../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {a},
              y = {"1"}
            ),
            $../../../Essentials/Functions/Operations/value(
              X = {R},
              Y = {R},
              Z = {R},
              ‚àó = {‚äô},
              x = {"1"},
              y = {a}
            ),
            a
          )
        )),
        _9: %Constraint($../../../Essentials/Functions/Operations/distributive(
          X = {R},
          ‚àó = {‚äô},
          ‚ãÜ = {‚äï}
        ))
      ),
      value = $../Rings.ring(
        R = {S},
        ‚äï = {$../../../Essentials/Functions/Operations/"inner operation restriction"(
          X = {R},
          A = {S},
          ‚àó = {‚äï}
        )},
        "0" = {"0"},
        ‚äñ = {$../../../Essentials/Functions/"codomain restriction"(
          X = {R},
          A = {S},
          Y = {R},
          B = {S},
          f = {‚äñ}
        )},
        ‚äô = {$../../../Essentials/Functions/Operations/"inner operation restriction"(
          X = {R},
          A = {S},
          ‚àó = {‚äô}
        )},
        "1" = {"1"}
      )
    }]
  )]
}
