%../../../../logics/hlm%

[
  $~Essentials = $../../Essentials,
  $~"Inner operations" = $../../Essentials/Operations/"Inner operations"
]

$"additive inverse"(
  𝐑: %Element($Rings, auto = %true),
  a: %Element($Carrier(𝐑 = 𝐑))
): %ExplicitOperator {
  notation = $NegationOperator(operand = a),
  definition = [%structuralCases(
    𝐑, $Rings,
    [{
      constructor = $Rings.ring,
      parameters = #(
        R: %Set,
        ⊕: %Element($~"Inner operations"(X = R)),
        "0": %Element(R),
        ⊖: %Element($~Essentials/Functions/Functions(X = R, Y = R)),
        ⊙: %Element($~"Inner operations"(X = R)),
        "1": %Element(R),
        _1: %Constraint($ring(R = R, ⊕ = ⊕, "0" = "0", ⊖ = ⊖, ⊙ = ⊙, "1" = "1"))
      ),
      value = $~Essentials/Functions/value(X = R, Y = R, f = ⊖, x = a)
    }]
  )]
}
