%../../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Quotient_ring
 *             * https://mathworld.wolfram.com/QuotientRing.html
 *             * https://proofwiki.org/wiki/Definition:Quotient_Ring
 *             * https://ncatlab.org/nlab/show/quotient+ring
 *             * https://leanprover-community.github.io/mathlib_docs/ring_theory/ideals.html#ideal.quotient.comm_ring
 */
$"quotient ring"(
  𝐑: %Element($../Rings),
  I: %Subset($../Carrier(𝐑 = {𝐑})),
  _1: %Constraint($../Ideals/ideal(
    𝐑 = {𝐑},
    I = {I}
  )),
  ∼: %Def($../../../Essentials/Relations/Endorelations(S = {$../Carrier(𝐑 = {𝐑})}).relation(_s = {
      #(g,h: %Element($../Carrier(𝐑 = {𝐑}))),
      {p = {%exists(
        #(s: %Element(I)),
        formula = %equals(
          $../sum(
            𝐑 = {𝐑},
            a = {g},
            b = {s}
          ),
          h
        )
      )}}
  })),
  Q: %SetDef($../../../Essentials/Relations/"Equivalence classes"(
    S = {$../Carrier(𝐑 = {𝐑})},
    ∼ = {∼}
  ))
): %ExplicitOperator {
  notation = $DivisionOperator(operands = [𝐑, I]),
  definition = [$../Rings.ring(
    R = {Q},
    ⊕ = {$../../../Essentials/Functions/Functions(
        X = {$../../../Essentials/Sets/"Cartesian product"(
          S = {Q},
          T = {Q}
        )},
        Y = {Q}
      ).function(_x = {
        #(x: %Element($../../../Essentials/Sets/"Cartesian product"(
          S = {Q},
          T = {Q}
        ))),
        {y = {%structuralCases(
          x,
          $../../../Essentials/Sets/"Cartesian product"(
            S = {Q},
            T = {Q}
          ),
          [{
            constructor = $../../../Essentials/Sets/"Cartesian product".pair,
            parameters = #(
              _t: %Element(Q),
              _u: %Element(Q)
            ),
            value = %structuralCases(
              _t,
              $../../../Essentials/Relations/"Equivalence classes"(
                S = {$../Carrier(𝐑 = {𝐑})},
                ∼ = {∼}
              ),
              [{
                constructor = $../../../Essentials/Relations/"Equivalence classes".class,
                parameters = #(g: %Element($../Carrier(𝐑 = {𝐑}))),
                value = %structuralCases(
                  _u,
                  $../../../Essentials/Relations/"Equivalence classes"(
                    S = {$../Carrier(𝐑 = {𝐑})},
                    ∼ = {∼}
                  ),
                  [{
                    constructor = $../../../Essentials/Relations/"Equivalence classes".class,
                    parameters = #(h: %Element($../Carrier(𝐑 = {𝐑}))),
                    value = $../../../Essentials/Relations/"Equivalence classes"(
                        S = {$../Carrier(𝐑 = {𝐑})},
                        ∼ = {∼}
                      ).class(s = {$../sum(
                        𝐑 = {𝐑},
                        a = {g},
                        b = {h}
                    )})
                  }]
                )
              }]
            )
          }]
        )}}
    })},
    "0" = {$../../../Essentials/Relations/"Equivalence classes"(
        S = {$../Carrier(𝐑 = {𝐑})},
        ∼ = {∼}
      ).class(s = {$../zero(𝐑 = {𝐑})})},
    ⊖ = {$../../../Essentials/Functions/Functions(
        X = {Q},
        Y = {Q}
      ).function(_x = {
        #(t: %Element(Q)),
        {y = {%structuralCases(
          t,
          $../../../Essentials/Relations/"Equivalence classes"(
            S = {$../Carrier(𝐑 = {𝐑})},
            ∼ = {∼}
          ),
          [{
            constructor = $../../../Essentials/Relations/"Equivalence classes".class,
            parameters = #(g: %Element($../Carrier(𝐑 = {𝐑}))),
            value = $../../../Essentials/Relations/"Equivalence classes"(
                S = {$../Carrier(𝐑 = {𝐑})},
                ∼ = {∼}
              ).class(s = {$../"additive inverse"(
                𝐑 = {𝐑},
                a = {g}
            )})
          }]
        )}}
    })},
    ⊙ = {$../../../Essentials/Functions/Functions(
        X = {$../../../Essentials/Sets/"Cartesian product"(
          S = {Q},
          T = {Q}
        )},
        Y = {Q}
      ).function(_x = {
        #(x: %Element($../../../Essentials/Sets/"Cartesian product"(
          S = {Q},
          T = {Q}
        ))),
        {y = {%structuralCases(
          x,
          $../../../Essentials/Sets/"Cartesian product"(
            S = {Q},
            T = {Q}
          ),
          [{
            constructor = $../../../Essentials/Sets/"Cartesian product".pair,
            parameters = #(
              t: %Element(Q),
              u: %Element(Q)
            ),
            value = %structuralCases(
              t,
              $../../../Essentials/Relations/"Equivalence classes"(
                S = {$../Carrier(𝐑 = {𝐑})},
                ∼ = {∼}
              ),
              [{
                constructor = $../../../Essentials/Relations/"Equivalence classes".class,
                parameters = #(g: %Element($../Carrier(𝐑 = {𝐑}))),
                value = %structuralCases(
                  u,
                  $../../../Essentials/Relations/"Equivalence classes"(
                    S = {$../Carrier(𝐑 = {𝐑})},
                    ∼ = {∼}
                  ),
                  [{
                    constructor = $../../../Essentials/Relations/"Equivalence classes".class,
                    parameters = #(h: %Element($../Carrier(𝐑 = {𝐑}))),
                    value = $../../../Essentials/Relations/"Equivalence classes"(
                        S = {$../Carrier(𝐑 = {𝐑})},
                        ∼ = {∼}
                      ).class(s = {$../product(
                        𝐑 = {𝐑},
                        a = {g},
                        b = {h}
                    )})
                  }]
                )
              }]
            )
          }]
        )}}
    })},
    "1" = {$../../../Essentials/Relations/"Equivalence classes"(
        S = {$../Carrier(𝐑 = {𝐑})},
        ∼ = {∼}
      ).class(s = {$../one(𝐑 = {𝐑})})}
  )]
}
