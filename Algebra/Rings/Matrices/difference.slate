%../../../../../logics/hlm%

$difference(
  𝐑: %Element(
    $../Rings,
    auto = %true
  ),
  m: %Element(
    $../../../Essentials/Numbers/Natural/"Natural numbers",
    auto = %true
  ),
  n: %Element(
    %previous,
    auto = %true
  ),
  A: %Element($Matrices(
    𝐑 = {𝐑},
    m = {m},
    n = {n}
  )),
  B: %Element(%previous)
): %ExplicitOperator {
  notation = $SubtractionOperator(operands = [A, B]),
  definition = [%structuralCases(
    B,
    $Matrices(
      𝐑 = {𝐑},
      m = {m},
      n = {n}
    ),
    [{
      constructor = $Matrices.matrix,
      parameters = #(_i: %Binder(
        #(
          i: %Element($../../../Essentials/Numbers/Natural/Subsets/"Segment (less)"(n = {m})),
          j: %Element($../../../Essentials/Numbers/Natural/Subsets/"Segment (less)"(n = {n}))
        ),
        #(b: %Element($../Carrier(𝐑 = {𝐑})))
      )),
      value = %structuralCases(
        A,
        $Matrices(
          𝐑 = {𝐑},
          m = {m},
          n = {n}
        ),
        [{
          constructor = $Matrices.matrix,
          parameters = #(_i: %Binder(
            #(
              i: %Element($../../../Essentials/Numbers/Natural/Subsets/"Segment (less)"(n = {m})),
              j: %Element($../../../Essentials/Numbers/Natural/Subsets/"Segment (less)"(n = {n}))
            ),
            #(a: %Element($../Carrier(𝐑 = {𝐑})))
          )),
          value = $Matrices(
              𝐑 = {𝐑},
              m = {m},
              n = {n}
            ).matrix(_i = {
              #(
                i: %Element($../../../Essentials/Numbers/Natural/Subsets/"Segment (less)"(n = {m})),
                j: %Element($../../../Essentials/Numbers/Natural/Subsets/"Segment (less)"(n = {n}))
              ),
              {a = {$../difference(
                𝐑 = {𝐑},
                a = {a[i = {i}, j = {j}]},
                b = {b[i = {i}, j = {j}]}
              )}}
          })
        }]
      )
    }]
  )]
}
