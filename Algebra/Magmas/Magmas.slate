%../../../../logics/hlm%

[
  $~Essentials = $../../Essentials,
  $~"Inner operations" = $../../Essentials/Operations/"Inner operations"
]

/**
 * @remarks Strictly speaking, the elements of this set are not magmas but isomorphism classes of magmas. Due to the rules of HLM, it is not even possible to define magmas (or other structures) in a way that would distinguish two isomorphic structures. In particular, the requirement to specify an equality definition, together with the way two arbitrary sets are treated as separate types, make sure that in the most general case, equality is in fact the same as isomorphism. (It is possible to identify more structures, but not fewer.)
 *
 * @references * https://en.wikipedia.org/wiki/Magma_(algebra)
 *             * https://mathworld.wolfram.com/Magma.html
 *             * https://proofwiki.org/wiki/Definition:Magma
 *             * https://ncatlab.org/nlab/show/magma
 */
$Magmas: %Construction {
  $magma(
    M: %Set,
    ∗: %Element($~"Inner operations"(X = M))
  ): %Constructor {
    notation = $Tuple(
      items = [M, ∗],
      style = '[]'
    ),
    equalityDefinition = {
      leftParameters = #(
        M: %Set,
        ∗: %Element($~"Inner operations"(X = M))
      ),
      rightParameters = #(
        N: %Set,
        ⋆: %Element($~"Inner operations"(X = N))
      ),
      definition = [%exists(
        #(φ: %Element($~Essentials/Functions/Bijections(X = M, Y = N))),
        formula = $../Generic/Isomorphisms/"inner operation condition"(X = M, Y = N, φ = φ, ∗ = ∗, ⋆ = ⋆)
      )],
      isomorphic = %true
    }
  }

  notation = '𝓜𝓪𝓰',
  definitionNotation = {
    parameter = #(𝐌: %Expr),
    singularName = 'magma',
    pluralName = 'magmas'
  },
  rewrite = {
    parameter = #(𝐌: %Element($Magmas)),
    value = $Magmas.magma(
      M = $Carrier(𝐌 = 𝐌),
      ∗ = $~Essentials/Operations/Operations(
          X = $Carrier(𝐌 = 𝐌),
          Y = $Carrier(𝐌 = 𝐌),
          Z = $Carrier(𝐌 = 𝐌)
        ).operation(_1 = {
          #(a,b: %Element($Carrier(𝐌 = 𝐌))),
          {z = $operation(𝐌 = 𝐌, a = a, b = b)}
      })
    )
  }
}
