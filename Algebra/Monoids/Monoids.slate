%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Monoid
 *             * https://mathworld.wolfram.com/Monoid.html
 *             * https://proofwiki.org/wiki/Definition:Monoid
 *             * https://ncatlab.org/nlab/show/monoid
 *             * https://leanprover-community.github.io/mathlib_docs/core/init/algebra/group.html#monoid
 */
$Monoids: %Construction {
  $monoid(
    M: %Set,
    ‚àó: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {M})),
    _1: %Constraint($../../Essentials/Functions/Operations/associative(
      X = {M},
      ‚àó = {‚àó}
    )),
    e: %Element(M),
    _2: %Constraint(%forall(
      #(a: %Element(M)),
      %equals(
        $../../Essentials/Functions/Operations/value(
          X = {M},
          Y = {M},
          Z = {M},
          ‚àó = {‚àó},
          x = {a},
          y = {e}
        ),
        $../../Essentials/Functions/Operations/value(
          X = {M},
          Y = {M},
          Z = {M},
          ‚àó = {‚àó},
          x = {e},
          y = {a}
        ),
        a
      )
    ))
  ): %Constructor {
    display = [$Tuple(
      items = [M, ‚àó, e],
      style = '[]'
    )],
    equalityDefinition = {
      leftParameters = #(
        M: %Set,
        ‚àó: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {M})),
        _1: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {M},
          ‚àó = {‚àó}
        )),
        e: %Element(M),
        _2: %Constraint(%forall(
          #(a: %Element(M)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {M},
              Y = {M},
              Z = {M},
              ‚àó = {‚àó},
              x = {a},
              y = {e}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {M},
              Y = {M},
              Z = {M},
              ‚àó = {‚àó},
              x = {e},
              y = {a}
            ),
            a
          )
        ))
      ),
      rightParameters = #(
        N: %Set,
        ‚ãÜ: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {N})),
        _3: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {N},
          ‚àó = {‚ãÜ}
        )),
        f: %Element(N),
        _4: %Constraint(%forall(
          #(b: %Element(N)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {N},
              Y = {N},
              Z = {N},
              ‚àó = {‚ãÜ},
              x = {b},
              y = {f}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {N},
              Y = {N},
              Z = {N},
              ‚àó = {‚ãÜ},
              x = {f},
              y = {b}
            ),
            b
          )
        ))
      ),
      definition = [%exists(
        #(œÜ: %Element($../../Essentials/Functions/Bijections(
          X = {M},
          Y = {N}
        ))),
        formula = %and(
          %equals(
            $../Generic/Isomorphisms/"inner operation transport"(
              X = {M},
              Y = {N},
              œÜ = {œÜ},
              ‚àó = {‚àó}
            ),
            ‚ãÜ
          ),
          %equals(
            $../Generic/Isomorphisms/"element transport"(
              X = {M},
              Y = {N},
              œÜ = {œÜ},
              x = {e}
            ),
            f
          )
        )
      )],
      isomorphic = %true
    }
  }

  display = ['ùìúùì∏ùì∑'],
  definitionDisplay = {
    parameter = #(ùêå: %Expr),
    singularName = 'monoid',
    pluralName = 'monoids'
  }
}
