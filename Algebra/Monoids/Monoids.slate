%../../../../logics/hlm%

[
  $~"Inner operations" = $../../Essentials/Operations/"Inner operations",
  $~Isomorphisms = $../Generic/Isomorphisms
]

/**
 * @references * https://en.wikipedia.org/wiki/Monoid
 *             * https://mathworld.wolfram.com/Monoid.html
 *             * https://proofwiki.org/wiki/Definition:Monoid
 *             * https://ncatlab.org/nlab/show/monoid
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/group/basic.html#monoid
 */
$Monoids: %Construction {
  $monoid(
    M: %Set,
    ∗: %Element($~"Inner operations"(X = M)),
    e: %Element(M),
    _1: %Constraint($monoid(M = M, ∗ = ∗, e = e))
  ): %Constructor {
    notation = $Tuple(
      items = [M, ∗, e],
      style = '[]'
    ),
    equalityDefinition = {
      leftParameters = #(
        M: %Set,
        ∗: %Element($~"Inner operations"(X = M)),
        e: %Element(M),
        _1: %Constraint($monoid(M = M, ∗ = ∗, e = e))
      ),
      rightParameters = #(
        N: %Set,
        ⋆: %Element($~"Inner operations"(X = N)),
        f: %Element(N),
        _2: %Constraint($monoid(M = N, ∗ = ⋆, e = f))
      ),
      definition = [%exists(
        #(φ: %Element($../../Essentials/Functions/Bijections(X = M, Y = N))),
        formula = %and(
          $~Isomorphisms/"inner operation condition"(X = M, Y = N, φ = φ, ∗ = ∗, ⋆ = ⋆),
          $~Isomorphisms/"element condition"(X = M, Y = N, φ = φ, x = e, y = f)
        )
      )],
      isomorphic = %true
    }
  }

  notation = '𝓜𝓸𝓷',
  definitionNotation = {
    parameter = #(𝐌: %Expr),
    singularName = 'monoid',
    pluralName = 'monoids'
  }
}
