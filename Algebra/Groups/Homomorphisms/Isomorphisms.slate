%../../../../../logics/hlm%

$Isomorphisms(𝐆,𝐇: %Element($../Groups)): %SetOperator {
  notation = $Function(
    function = 'Iso',
    arguments = [𝐆, 𝐇]
  ),
  definitionNotation = {
    parameter = #(φ: %Expr),
    notation = $FunctionDeclaration(
      function = φ,
      symbol = '↔',
      operands = [𝐆, 𝐇]
    ),
    singularName = 'isomorphism',
    pluralName = 'isomorphisms'
  },
  definition = [
    %subset(
      #(φ: %Element($Homomorphisms(𝐆 = 𝐆, 𝐇 = 𝐇))),
      $../../../Essentials/Functions/bijective(
        X = $../Carrier(𝐆 = 𝐆),
        Y = $../Carrier(𝐆 = 𝐇),
        f = φ
      )
    ),
    %subset(
      #(f: %Element($../../../Essentials/Functions/Bijections(
        X = $../Carrier(𝐆 = 𝐆),
        Y = $../Carrier(𝐆 = 𝐇)
      ))),
      %forall(
        #(a,b: %Element($../Carrier(𝐆 = 𝐆))),
        %equals(
          $../../../Essentials/Functions/value(
            X = $../Carrier(𝐆 = 𝐆),
            Y = $../Carrier(𝐆 = 𝐇),
            f = f,
            x = $../operation(𝐆 = 𝐆, a = a, b = b)
          ),
          $../operation(
            𝐆 = 𝐇,
            a = $../../../Essentials/Functions/value(
              X = $../Carrier(𝐆 = 𝐆),
              Y = $../Carrier(𝐆 = 𝐇),
              f = f, x = a
            ),
            b = $../../../Essentials/Functions/value(
              X = $../Carrier(𝐆 = 𝐆),
              Y = $../Carrier(𝐆 = 𝐇),
              f = f, x = b
            )
          )
        )
      )
    )
  ]
}
