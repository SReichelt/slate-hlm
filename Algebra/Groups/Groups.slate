%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Group_(mathematics)
 */
$Groups: %Construction {
  $group(
    G: %Set,
    ‚àó: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {G})),
    _1: %Constraint($../../Essentials/Functions/Operations/associative(
      X = {G},
      ‚àó = {‚àó}
    )),
    e: %Element(G),
    _2: %Constraint(%forall(
      #(a: %Element(G)),
      %equals(
        $../../Essentials/Functions/Operations/value(
          X = {G},
          Y = {G},
          Z = {G},
          ‚àó = {‚àó},
          x = {a},
          y = {e}
        ),
        $../../Essentials/Functions/Operations/value(
          X = {G},
          Y = {G},
          Z = {G},
          ‚àó = {‚àó},
          x = {e},
          y = {a}
        ),
        a
      )
    )),
    i: %Element($../../Essentials/Functions/Functions(
      X = {G},
      Y = {G}
    )),
    _3: %Constraint(%forall(
      #(a: %Element(G)),
      %equals(
        $../../Essentials/Functions/Operations/value(
          X = {G},
          Y = {G},
          Z = {G},
          ‚àó = {‚àó},
          x = {a},
          y = {$../../Essentials/Functions/value(
            X = {G},
            Y = {G},
            f = {i},
            x = {a}
          )}
        ),
        $../../Essentials/Functions/Operations/value(
          X = {G},
          Y = {G},
          Z = {G},
          ‚àó = {‚àó},
          x = {$../../Essentials/Functions/value(
            X = {G},
            Y = {G},
            f = {i},
            x = {a}
          )},
          y = {a}
        ),
        e
      )
    ))
  ): %Constructor {
    display = [$Tuple(
      items = [G, ‚àó, e, i],
      style = '[]'
    )],
    equalityDefinition = {
      leftParameters = #(
        G: %Set,
        ‚àó: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {G})),
        _1: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {G},
          ‚àó = {‚àó}
        )),
        e: %Element(G),
        _2: %Constraint(%forall(
          #(a: %Element(G)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {G},
              Y = {G},
              Z = {G},
              ‚àó = {‚àó},
              x = {a},
              y = {e}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {G},
              Y = {G},
              Z = {G},
              ‚àó = {‚àó},
              x = {e},
              y = {a}
            ),
            a
          )
        )),
        i: %Element($../../Essentials/Functions/Functions(
          X = {G},
          Y = {G}
        )),
        _3: %Constraint(%forall(
          #(a: %Element(G)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {G},
              Y = {G},
              Z = {G},
              ‚àó = {‚àó},
              x = {a},
              y = {$../../Essentials/Functions/value(
                X = {G},
                Y = {G},
                f = {i},
                x = {a}
              )}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {G},
              Y = {G},
              Z = {G},
              ‚àó = {‚àó},
              x = {$../../Essentials/Functions/value(
                X = {G},
                Y = {G},
                f = {i},
                x = {a}
              )},
              y = {a}
            ),
            e
          )
        ))
      ),
      rightParameters = #(
        H: %Set,
        ‚ãÜ: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {H})),
        _4: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {H},
          ‚àó = {‚ãÜ}
        )),
        f: %Element(H),
        _5: %Constraint(%forall(
          #(b: %Element(H)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {H},
              Y = {H},
              Z = {H},
              ‚àó = {‚ãÜ},
              x = {b},
              y = {f}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {H},
              Y = {H},
              Z = {H},
              ‚àó = {‚ãÜ},
              x = {f},
              y = {b}
            ),
            b
          )
        )),
        j: %Element($../../Essentials/Functions/Functions(
          X = {H},
          Y = {H}
        )),
        _3: %Constraint(%forall(
          #(c: %Element(H)),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {H},
              Y = {H},
              Z = {H},
              ‚àó = {‚ãÜ},
              x = {c},
              y = {$../../Essentials/Functions/value(
                X = {H},
                Y = {H},
                f = {j},
                x = {c}
              )}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {H},
              Y = {H},
              Z = {H},
              ‚àó = {‚ãÜ},
              x = {$../../Essentials/Functions/value(
                X = {H},
                Y = {H},
                f = {j},
                x = {c}
              )},
              y = {c}
            ),
            f
          )
        ))
      ),
      definition = [%exists(
        #(œÜ: %Element($../../Essentials/Functions/Bijections(
          X = {G},
          Y = {H}
        ))),
        formula = %and(
          %equals(
            $../Isomorphisms/"inner operation transform"(
              X = {G},
              Y = {H},
              œÜ = {œÜ},
              ‚àó = {‚àó}
            ),
            ‚ãÜ
          ),
          %equals(
            $../Isomorphisms/"element transform"(
              X = {G},
              Y = {H},
              œÜ = {œÜ},
              x = {e}
            ),
            f
          ),
          %equals(
            $../Isomorphisms/"function transform"(
              X = {G},
              Y = {H},
              œÜ = {œÜ},
              f = {i}
            ),
            j
          )
        )
      )],
      isomorphic = %true
    }
  }

  display = ['ùìñùìªùìπ'],
  definitionDisplay = {
    parameter = #(ùêÜ: %Expr),
    singularName = 'group',
    pluralName = 'groups'
  }
}
