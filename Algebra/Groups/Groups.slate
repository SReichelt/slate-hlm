%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Group_(mathematics)
 */
$Groups: %Construction {
  $group(
    S: %Set,
    ‚àó: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {S})),
    _1: %Constraint($../../Essentials/Functions/Operations/associative(
      X = {S},
      ‚àó = {‚àó}
    )),
    e: %Element(S),
    _2: %Constraint(%forall(
      #(a: %Element(S)),
      %and(
        %equals(
          $../../Essentials/Functions/Operations/value(
            X = {S},
            Y = {S},
            Z = {S},
            ‚àó = {‚àó},
            x = {a},
            y = {e}
          ),
          a
        ),
        %equals(
          $../../Essentials/Functions/Operations/value(
            X = {S},
            Y = {S},
            Z = {S},
            ‚àó = {‚àó},
            x = {e},
            y = {a}
          ),
          a
        )
      )
    )),
    i: %Element($../../Essentials/Functions/Functions(
      X = {S},
      Y = {S}
    )),
    _3: %Constraint(%forall(
      #(a: %Element(S)),
      %and(
        %equals(
          $../../Essentials/Functions/Operations/value(
            X = {S},
            Y = {S},
            Z = {S},
            ‚àó = {‚àó},
            x = {a},
            y = {$../../Essentials/Functions/value(
              X = {S},
              Y = {S},
              f = {i},
              x = {a}
            )}
          ),
          e
        ),
        %equals(
          $../../Essentials/Functions/Operations/value(
            X = {S},
            Y = {S},
            Z = {S},
            ‚àó = {‚àó},
            x = {$../../Essentials/Functions/value(
              X = {S},
              Y = {S},
              f = {i},
              x = {a}
            )},
            y = {a}
          ),
          e
        )
      )
    ))
  ): %Constructor {
    display = [$Tuple(
      items = [S, ‚àó, e, i],
      style = '[]'
    )],
    equalityDefinition = {
      leftParameters = #(
        S: %Set,
        ‚àó: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {S})),
        _1: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {S},
          ‚àó = {‚àó}
        )),
        e: %Element(S),
        _2: %Constraint(%forall(
          #(a: %Element(S)),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {S},
                Y = {S},
                Z = {S},
                ‚àó = {‚àó},
                x = {a},
                y = {e}
              ),
              a
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {S},
                Y = {S},
                Z = {S},
                ‚àó = {‚àó},
                x = {e},
                y = {a}
              ),
              a
            )
          )
        )),
        i: %Element($../../Essentials/Functions/Functions(
          X = {S},
          Y = {S}
        )),
        _3: %Constraint(%forall(
          #(a: %Element(S)),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {S},
                Y = {S},
                Z = {S},
                ‚àó = {‚àó},
                x = {a},
                y = {$../../Essentials/Functions/value(
                  X = {S},
                  Y = {S},
                  f = {i},
                  x = {a}
                )}
              ),
              e
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {S},
                Y = {S},
                Z = {S},
                ‚àó = {‚àó},
                x = {$../../Essentials/Functions/value(
                  X = {S},
                  Y = {S},
                  f = {i},
                  x = {a}
                )},
                y = {a}
              ),
              e
            )
          )
        ))
      ),
      rightParameters = #(
        T: %Set,
        ‚ãÜ: %Element($../../Essentials/Functions/Operations/"Inner operations"(X = {T})),
        _4: %Constraint($../../Essentials/Functions/Operations/associative(
          X = {T},
          ‚àó = {‚ãÜ}
        )),
        f: %Element(T),
        _5: %Constraint(%forall(
          #(b: %Element(T)),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {T},
                Y = {T},
                Z = {T},
                ‚àó = {‚ãÜ},
                x = {b},
                y = {f}
              ),
              b
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {T},
                Y = {T},
                Z = {T},
                ‚àó = {‚ãÜ},
                x = {f},
                y = {b}
              ),
              b
            )
          )
        )),
        j: %Element($../../Essentials/Functions/Functions(
          X = {T},
          Y = {T}
        )),
        _3: %Constraint(%forall(
          #(c: %Element(T)),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {T},
                Y = {T},
                Z = {T},
                ‚àó = {‚ãÜ},
                x = {c},
                y = {$../../Essentials/Functions/value(
                  X = {T},
                  Y = {T},
                  f = {j},
                  x = {c}
                )}
              ),
              f
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {T},
                Y = {T},
                Z = {T},
                ‚àó = {‚ãÜ},
                x = {$../../Essentials/Functions/value(
                  X = {T},
                  Y = {T},
                  f = {j},
                  x = {c}
                )},
                y = {c}
              ),
              f
            )
          )
        ))
      ),
      definition = [%exists(
        #(œÜ: %Element($../../Essentials/Functions/Bijections(
          X = {S},
          Y = {T}
        ))),
        formula = %and(
          %equals(
            $../Isomorphisms/"inner operation transform"(
              X = {S},
              Y = {T},
              œÜ = {œÜ},
              ‚àó = {‚àó}
            ),
            ‚ãÜ
          ),
          %equals(
            $../Isomorphisms/"element transform"(
              X = {S},
              Y = {T},
              œÜ = {œÜ},
              x = {e}
            ),
            f
          ),
          %equals(
            $../Isomorphisms/"function transform"(
              X = {S},
              Y = {T},
              œÜ = {œÜ},
              f = {i}
            ),
            j
          )
        )
      )],
      isomorphic = %true
    }
  }

  display = ['ùìñùìªùìπ'],
  definitionDisplay = {
    parameter = #(ùêÜ: %Expr),
    singularName = 'group',
    pluralName = 'groups'
  }
}
