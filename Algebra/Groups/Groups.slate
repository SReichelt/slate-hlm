%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Group_(mathematics)
 *             * https://mathworld.wolfram.com/Group.html
 *             * https://proofwiki.org/wiki/Definition:Group
 *             * https://ncatlab.org/nlab/show/group
 *             * https://leanprover-community.github.io/mathlib_docs/algebra/group/basic.html#group
 */
$Groups: %Construction {
  $group(
    G: %Set,
    ∗: %Element($../../Essentials/Operations/"Inner operations"(X = G)),
    e: %Element(G),
    i: %Element($../../Essentials/Functions/Functions(X = G, Y = G)),
    _1: %Constraint($group(G = G, ∗ = ∗, e = e, i = i))
  ): %Constructor {
    notation = $Tuple(
      items = [G, ∗, e, i],
      style = '[]'
    ),
    equalityDefinition = {
      leftParameters = #(
        G: %Set,
        ∗: %Element($../../Essentials/Operations/"Inner operations"(X = G)),
        e: %Element(G),
        i: %Element($../../Essentials/Functions/Functions(X = G, Y = G)),
        _1: %Constraint($group(G = G, ∗ = ∗, e = e, i = i))
      ),
      rightParameters = #(
        H: %Set,
        ⋆: %Element($../../Essentials/Operations/"Inner operations"(X = H)),
        f: %Element(H),
        j: %Element($../../Essentials/Functions/Functions(X = H, Y = H)),
        _2: %Constraint($group(G = H, ∗ = ⋆, e = f, i = j))
      ),
      definition = [%exists(
        #(φ: %Element($../../Essentials/Functions/Bijections(X = G, Y = H))),
        formula = %and(
          $../Generic/Isomorphisms/"inner operation condition"(X = G, Y = H, φ = φ, ∗ = ∗, ⋆ = ⋆),
          $../Generic/Isomorphisms/"element condition"(X = G, Y = H, φ = φ, x = e, y = f),
          $../Generic/Isomorphisms/"function condition"(X = G, Y = H, φ = φ, f = i, g = j)
        )
      )],
      isomorphic = %true
    }
  }

  notation = '𝓖𝓻𝓹',
  definitionNotation = {
    parameter = #(𝐆: %Expr),
    singularName = 'group',
    pluralName = 'groups'
  }
}
