%../../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Quotient_group
 *             * https://mathworld.wolfram.com/QuotientGroup.html
 *             * https://proofwiki.org/wiki/Definition:Quotient_Group
 *             * https://ncatlab.org/nlab/show/quotient+group
 *             * https://leanprover-community.github.io/mathlib_docs/group_theory/quotient_group.html#quotient_group.group
 */
$"quotient group"(
  𝐆: %Element($../Groups),
  S: %Subset($../Carrier(𝐆 = {𝐆})),
  _1: %Constraint($../Subgroups/"normal subgroup set"(
    𝐆 = {𝐆},
    S = {S}
  )),
  ∼: %Def($../../../Essentials/Relations/Endorelations(S = {$../Carrier(𝐆 = {𝐆})}).relation(s = {
      #(g: %Element($../Carrier(𝐆 = {𝐆}))),
      {t = {
        #(h: %Element($../Carrier(𝐆 = {𝐆}))),
        {p = {%exists(
          #(s: %Element(S)),
          formula = %equals(
            $../operation(
              𝐆 = {𝐆},
              a = {g},
              b = {s}
            ),
            h
          )
        )}}
      }}
  })),
  Q: %SetDef($../../../Essentials/Relations/"Equivalence classes"(
    S = {$../Carrier(𝐆 = {𝐆})},
    ∼ = {∼}
  ))
): %ExplicitOperator {
  notation = $DivisionOperator(operands = [𝐆, S]),
  definition = [$../Groups.group(
    G = {Q},
    ∗ = {$../../../Essentials/Functions/Functions(
        X = {$../../../Essentials/Sets/"Cartesian product"(
          S = {Q},
          T = {Q}
        )},
        Y = {Q}
      ).function(x = {
        #(_x: %Element($../../../Essentials/Sets/"Cartesian product"(
          S = {Q},
          T = {Q}
        ))),
        {y = {%structuralCases(
          _x,
          $../../../Essentials/Sets/"Cartesian product"(
            S = {Q},
            T = {Q}
          ),
          [{
            constructor = $../../../Essentials/Sets/"Cartesian product".pair,
            parameters = #(
              _t: %Element(Q),
              _u: %Element(Q)
            ),
            value = %structuralCases(
              _t,
              $../../../Essentials/Relations/"Equivalence classes"(
                S = {$../Carrier(𝐆 = {𝐆})},
                ∼ = {∼}
              ),
              [{
                constructor = $../../../Essentials/Relations/"Equivalence classes".class,
                parameters = #(g: %Element($../Carrier(𝐆 = {𝐆}))),
                value = %structuralCases(
                  _u,
                  $../../../Essentials/Relations/"Equivalence classes"(
                    S = {$../Carrier(𝐆 = {𝐆})},
                    ∼ = {∼}
                  ),
                  [{
                    constructor = $../../../Essentials/Relations/"Equivalence classes".class,
                    parameters = #(h: %Element($../Carrier(𝐆 = {𝐆}))),
                    value = $../../../Essentials/Relations/"Equivalence classes"(
                        S = {$../Carrier(𝐆 = {𝐆})},
                        ∼ = {∼}
                      ).class(s = {$../operation(
                        𝐆 = {𝐆},
                        a = {g},
                        b = {h}
                    )})
                  }]
                )
              }]
            )
          }]
        )}}
    })},
    e = {$../../../Essentials/Relations/"Equivalence classes"(
        S = {$../Carrier(𝐆 = {𝐆})},
        ∼ = {∼}
      ).class(s = {$../identity(𝐆 = {𝐆})})},
    i = {$../../../Essentials/Functions/Functions(
        X = {Q},
        Y = {Q}
      ).function(x = {
        #(_t: %Element(Q)),
        {y = {%structuralCases(
          _t,
          $../../../Essentials/Relations/"Equivalence classes"(
            S = {$../Carrier(𝐆 = {𝐆})},
            ∼ = {∼}
          ),
          [{
            constructor = $../../../Essentials/Relations/"Equivalence classes".class,
            parameters = #(g: %Element($../Carrier(𝐆 = {𝐆}))),
            value = $../../../Essentials/Relations/"Equivalence classes"(
                S = {$../Carrier(𝐆 = {𝐆})},
                ∼ = {∼}
              ).class(s = {$../inverse(
                𝐆 = {𝐆},
                a = {g}
            )})
          }]
        )}}
    })}
  )]
}
