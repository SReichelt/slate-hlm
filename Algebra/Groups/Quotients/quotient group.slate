%../../../../../logics/hlm%

[
  $~Carrier = $../Carrier,
  $~"Cartesian product" = $../../../Essentials/Sets/"Cartesian product",
  $~"Equivalence classes" = $../../../Essentials/Relations/"Equivalence classes",
  $~Functions = $../../../Essentials/Functions/Functions,
  $~Groups = $../Groups,
  $~operation = $../operation
]

/**
 * @references * https://en.wikipedia.org/wiki/Quotient_group
 *             * https://mathworld.wolfram.com/QuotientGroup.html
 *             * https://proofwiki.org/wiki/Definition:Quotient_Group
 *             * https://ncatlab.org/nlab/show/quotient+group
 *             * https://leanprover-community.github.io/mathlib_docs/group_theory/quotient_group.html#quotient_group.group
 */
$"quotient group"(
  𝐆: %Element($~Groups),
  S: %Subset($~Carrier(𝐆 = 𝐆)),
  _1: %Constraint($../Subgroups/"normal subgroup set"(𝐆 = 𝐆, S = S)),
  ∼: %Def($../../../Essentials/Relations/Endorelations(S = $~Carrier(𝐆 = 𝐆)).relation(_1 = {
      #(g,h: %Element($~Carrier(𝐆 = 𝐆))),
      {p = %exists(
        #(s: %Element(S)),
        formula = %equals(
          $~operation(𝐆 = 𝐆, a = g, b = s),
          h
        )
      )}
  })),
  Q: %SetDef($~"Equivalence classes"(
    S = $~Carrier(𝐆 = 𝐆),
    ∼ = ∼
  ))
): %ExplicitOperator {
  notation = $DivisionOperator(operands = [𝐆, S]),
  definition = [$~Groups.group(
    G = Q,
    ∗ = $~Functions(
        X = $~"Cartesian product"(S = Q, T = Q),
        Y = Q
      ).function(_1 = {
        #(x: %Element($~"Cartesian product"(S = Q, T = Q))),
        {y = %structuralCases(
          x,
          $~"Cartesian product"(S = Q, T = Q),
          [{
            constructor = $~"Cartesian product".pair,
            parameters = #(
              t: %Element(Q),
              u: %Element(Q)
            ),
            value = %structuralCases(
              t,
              $~"Equivalence classes"(
                S = $~Carrier(𝐆 = 𝐆),
                ∼ = ∼
              ),
              [{
                constructor = $~"Equivalence classes".class,
                parameters = #(g: %Element($~Carrier(𝐆 = 𝐆))),
                value = %structuralCases(
                  u,
                  $~"Equivalence classes"(
                    S = $~Carrier(𝐆 = 𝐆),
                    ∼ = ∼
                  ),
                  [{
                    constructor = $~"Equivalence classes".class,
                    parameters = #(h: %Element($~Carrier(𝐆 = 𝐆))),
                    value = $~"Equivalence classes"(
                        S = $~Carrier(𝐆 = 𝐆),
                        ∼ = ∼
                      ).class(s = $~operation(𝐆 = 𝐆, a = g, b = h))
                  }]
                )
              }]
            )
          }]
        )}
    }),
    e = $~"Equivalence classes"(
        S = $~Carrier(𝐆 = 𝐆),
        ∼ = ∼
      ).class(s = $../identity(𝐆 = 𝐆)),
    i = $~Functions(X = Q, Y = Q).function(_1 = {
        #(t: %Element(Q)),
        {y = %structuralCases(
          t,
          $~"Equivalence classes"(
            S = $~Carrier(𝐆 = 𝐆),
            ∼ = ∼
          ),
          [{
            constructor = $~"Equivalence classes".class,
            parameters = #(g: %Element($~Carrier(𝐆 = 𝐆))),
            value = $~"Equivalence classes"(
                S = $~Carrier(𝐆 = 𝐆),
                ∼ = ∼
              ).class(s = $../inverse(𝐆 = 𝐆, a = g))
          }]
        )}
    })
  )]
}
