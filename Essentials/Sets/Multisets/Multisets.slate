%../../../../../logics/hlm%

/**
 * @remarks Note that we only formalize multi-subsets of a given set `S`. Arbitrary multisets cannot be defined because there is no suitable notion of equality.
 *
 *          A multi-subset of `S` is essentially the same as a function from `S` to `$../../Numbers/Natural/"Natural numbers"`.
 *
 * @references * https://en.wikipedia.org/wiki/Multiset
 *             * https://mathworld.wolfram.com/Multiset.html
 *             * https://proofwiki.org/wiki/Definition:Multiset
 *             * https://ncatlab.org/nlab/show/multiset
 *             * https://coq.inria.fr/library/Coq.Sets.Multiset.html
 *             * https://leanprover-community.github.io/mathlib_docs/data/multiset/basic.html#multiset
 */
$Multisets(S: %Set): %Construction {
  $multiset(_1: %Binder(
    #(s: %Element(S)),
    #(m: %Element($../../Numbers/Natural/"Natural numbers"))
  )): %Constructor {
    notation = $Set(body = $SubSup(
      body = s,
      sup = m
    )),
    equalityDefinition = {
      leftParameters = #(_1: %Binder(
        #(s: %Element(S)),
        #(m: %Element($../../Numbers/Natural/"Natural numbers"))
      )),
      rightParameters = #(_2: %Binder(
        #(s: %Element(S)),
        #("m'": %Element($../../Numbers/Natural/"Natural numbers"))
      )),
      definition = [%forall(
        #(s: %Element(S)),
        %equals(m[s = {s}], "m'"[s = {s}])
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = '𝓜𝓾𝓵𝓽𝓲𝓢𝓮𝓽',
    arguments = [S]
  ),
  definitionNotation = {
    parameter = #(𝑻: %Expr),
    singularName = $DependentWord(
      word = 'multiset',
      argument = S
    ),
    pluralName = $DependentWord(
      word = 'multisets',
      argument = S
    )
  }
}
