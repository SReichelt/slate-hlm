%../../../../logics/hlm%

[
  $~Functions = $../Functions/Functions,
  $~"Natural numbers" = $../Numbers/Natural/"Natural numbers",
  $~"Segment (less)" = $../Numbers/Natural/Subsets/"Segment (less)",
  $~injective = $../Functions/injective,
  $~restriction = $../Functions/restriction
]

/**
 * @remarks This is just an example proof. It could be rewritten in a very concise way as a proof about cardinals.
 *
 * @references * https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.finite_subset
 */
$"Subsets of finite sets are finite"(
  S: %Set,
  _1: %Constraint($finite(S = S)),
  T: %Subset(S)
): %StandardTheorem {
  claim = $finite(S = T),
  proofs = [{steps = #(_: %ProveDef(proof = {
    goal = %exists(
      #(
        m: %Element($~"Natural numbers"),
        f: %Element($~Functions(
          X = T,
          Y = $~"Segment (less)"(n = m)
        ))
      ),
      formula = $~injective(
        X = T,
        Y = $~"Segment (less)"(n = m),
        f = f
      )
    ),
    steps = #(
      _: %Consider(_1),
      _: %UseDef(result = %exists(
        #(
          n: %Element($~"Natural numbers"),
          g: %Element($~Functions(
            X = S,
            Y = $~"Segment (less)"(n = n)
          ))
        ),
        formula = $~injective(
          X = S,
          Y = $~"Segment (less)"(n = n),
          f = g
        )
      )),
      _: %UseExists(#(
        n: %Element($~"Natural numbers"),
        g: %Element($~Functions(
          X = S,
          Y = $~"Segment (less)"(n = n)
        ))
      )),
      _: %ProveExists(
        {
          m = n,
          f = $~restriction(
            X = S,
            Y = $~"Segment (less)"(n = n),
            f = g, A = T
          )
        },
        proof = {
          goal = $~injective(
            X = T,
            Y = $~"Segment (less)"(n = n),
            f = $~restriction(
              X = S,
              Y = $~"Segment (less)"(n = n),
              f = g, A = T
            )
          ),
          steps = #(_: %UseTheorem(
            $../Functions/"Restriction preserves injectivity"(
              X = S,
              Y = $~"Segment (less)"(n = n),
              f = g, A = T
            ),
            result = $~injective(
              X = T,
              Y = $~"Segment (less)"(n = n),
              f = $~restriction(
                X = S,
                Y = $~"Segment (less)"(n = n),
                f = g, A = T
              )
            )
          ))
        }
      )
    )
  }))}]
}
