%../../../../logics/hlm%

/**
 * @remarks In contrast to the definition of set union, the disjoint union of sets is a "construction," which is an HLM-specific concept very similar to an inductive definition in type theory. The disjoint union has two "constructors."
 *
 *          Note that the set and its constructors are introduced at the same time, hence the non-standard notation ":=:". The notation on both sides can be specified freely.
 *
 *          A construction always includes definitions of equality for each constructor. In this case, those definitions are what one might expect. (Different constructors are never considered equal.)
 *
 * @references * https://en.wikipedia.org/wiki/Disjoint_union
 *             * https://mathworld.wolfram.com/DisjointUnion.html
 *             * https://proofwiki.org/wiki/Definition:Disjoint_Union_(Set_Theory)
 *             * https://ncatlab.org/nlab/show/disjoint+union#special_cases
 *             * https://leanprover-community.github.io/mathlib_docs/init/core.html#sum
 */
$"Disjoint union"(S,T: %Set(auto = %false, embedSubsets = %true)): %Construction {
  $left(s: %Element(S)): %Constructor {
    notation = $Constructor(
      name = 'l',
      arguments = [s]
    ),
    equalityDefinition = {
      leftParameters = #(s: %Element(S)),
      rightParameters = #("s'": %Element(S)),
      definition = [%equals(s, "s'")],
      isomorphic = %true
    }
  }

  $right(t: %Element(T)): %Constructor {
    notation = $Constructor(
      name = 'r',
      arguments = [t]
    ),
    equalityDefinition = {
      leftParameters = #(t: %Element(T)),
      rightParameters = #("t'": %Element(T)),
      definition = [%equals(t, "t'")],
      isomorphic = %true
    }
  }

  notation = $Operator(
    symbol = '⊎',
    operands = [S, T],
    space = ' '
  )
}
