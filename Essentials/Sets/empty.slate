%../../../../logics/hlm%

/**
 * @remarks In HLM, multiple alternative definitions can be given for an operator or predicate, if they can be shown to be equal/equivalent. In proofs, the most convenient alternative can be selected at will, which reduces the number of necessary steps. Sometimes, it also makes sense to prove a property according to one alternative and then use it according to another.
 *
 * @references * https://leanprover-community.github.io/mathlib_docs/data/set/basic.html#set.nonempty
 */
$empty(S: %Set): %Predicate {
  notation = $Property(
    operand = S,
    property = %neg('empty', 'nonempty')
  ),
  definition = [
    %setEquals(S, $"Empty set"),
    %sub(S, $"Empty set"),
    %not(%exists(#(x: %Element(S)))),
    %equals(
      $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
      $../Numbers/Natural/number(value = 0)
    ),
    $../Numbers/Cardinal/"less or equal"(
      κ = $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
      μ = $../Numbers/Natural/number(value = 0)
    )
  ],
  equivalenceProofs = [
    {
      from = 1,
      to = 3,
      parameters = #(_1: %Constraint(%setEquals(S, $"Empty set"))),
      goal = %not(%exists(#(x: %Element(S)))),
      steps = #(_: %ProveByContradiction({
        parameters = #(x: %Element(S)),
        steps = #(
          _: %Substitute(
            #(_: %Consider(_1)),
            1,
            %in(x, $"Empty set")
          ),
          _: %UseDef(result = %or)
        )
      }))
    },
    {
      from = 3,
      to = 2,
      parameters = #(_1: %Constraint(%not(%exists(#(x: %Element(S)))))),
      goal = %sub(S, $"Empty set"),
      steps = #(_: %ProveDef(proof = {
        goal = %forall(
          #(a: %Element(S)),
          %in(a, $"Empty set")
        ),
        steps = #(_: %ProveForAll({
          parameters = #(a: %Element(S)),
          goal = %or,
          steps = #(_: %State(
            %exists(#(x: %Element(S))),
            proof = {steps = #(_: %ProveExists({x = a}))}
          ))
        }))
      }))
    },
    {
      from = 2,
      to = 1,
      parameters = #(_1: %Constraint(%sub(S, $"Empty set"))),
      goal = %setEquals(S, $"Empty set"),
      steps = #(_: %ProveEquivalence([
        {
          from = 1,
          to = 2,
          steps = #()
        },
        {
          from = 2,
          to = 1,
          steps = #(_: %UseTheorem(
            $"Empty set is subset of any set"(S = S),
            result = %sub($"Empty set", S)
          ))
        }
      ]))
    },
    {
      from = 1,
      to = 4,
      parameters = #(_1: %Constraint(%setEquals(S, $"Empty set"))),
      goal = %equals(
        $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
        $../Numbers/Natural/number(value = 0)
      ),
      steps = #(
        _: %State(
          %equals(
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = $"Empty set")
          ),
          proof = {steps = #(_: %ProveBySubstitution(
            #(_: %Consider(_1)),
            2,
            %equals(
              $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
              $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S)
            )
          ))}
        ),
        _: %Substitute(
          #(_: %State(%setEquals(
            $../Numbers/Natural/Subsets/"Segment (less)"(n = $../Numbers/Natural/number(value = 0)),
            $"Empty set"
          ))),
          2,
          %equals(
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = $../Numbers/Natural/Subsets/"Segment (less)"(n = $../Numbers/Natural/number(value = 0)))
          )
        ),
        _: %Substitute(
          #(_: %State(
            %equals(
              $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = $../Numbers/Natural/Subsets/"Segment (less)"(n = $../Numbers/Natural/number(value = 0))),
              $../Numbers/Natural/number(value = 0)
            ),
            proof = {steps = #(_: %ProveDef)}
          )),
          1,
          %equals(
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
            $../Numbers/Natural/number(value = 0)
          )
        )
      )
    },
    {
      from = 4,
      to = 5,
      parameters = #(_1: %Constraint(%equals(
        $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
        $../Numbers/Natural/number(value = 0)
      ))),
      goal = $../Numbers/Cardinal/"less or equal"(
        κ = $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
        μ = $../Numbers/Natural/number(value = 0)
      ),
      steps = #(_: %ProveBySubstitution(
        #(_: %Consider(_1)),
        1,
        $../Numbers/Cardinal/"less or equal"(
          κ = $../Numbers/Natural/number(value = 0),
          μ = $../Numbers/Natural/number(value = 0)
        ),
        proof = {steps = #(
          _: %UseTheorem(
            $../Numbers/Cardinal/"Less or equal is a partial order",
            result = $../Relations/"partial order"(
              S = $../Numbers/Cardinal/"Cardinal numbers",
              ⪯ = $../Relations/Relations(
                  S = $../Numbers/Cardinal/"Cardinal numbers",
                  T = $../Numbers/Cardinal/"Cardinal numbers"
                ).relation(_1 = {
                  #(κ,μ: %Element($../Numbers/Cardinal/"Cardinal numbers")),
                  {p = $../Numbers/Cardinal/"less or equal"(κ = κ, μ = μ)}
              })
            )
          ),
          _: %UseDef(result = $../Relations/reflexive(
            S = $../Numbers/Cardinal/"Cardinal numbers",
            ⪯ = $../Relations/Relations(
                S = $../Numbers/Cardinal/"Cardinal numbers",
                T = $../Numbers/Cardinal/"Cardinal numbers"
              ).relation(_1 = {
                #(κ,μ: %Element($../Numbers/Cardinal/"Cardinal numbers")),
                {p = $../Numbers/Cardinal/"less or equal"(κ = κ, μ = μ)}
            })
          )),
          _: %UseDef(result = %forall(
            #(κ: %Element($../Numbers/Cardinal/"Cardinal numbers")),
            $../Numbers/Cardinal/"less or equal"(κ = κ, μ = κ)
          )),
          _: %UseForAll({κ = $../Numbers/Natural/number(value = 0)})
        )}
      ))
    },
    {
      from = 5,
      to = 3,
      parameters = #(_1: %Constraint($../Numbers/Cardinal/"less or equal"(
        κ = $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
        μ = $../Numbers/Natural/number(value = 0)
      ))),
      goal = %not(%exists(#(x: %Element(S)))),
      steps = #(
        _: %Consider(_1),
        _: %UseDef(result = %exists(
          #(φ: %Element($../Numbers/Cardinal/Homomorphisms/Homomorphisms(
            κ = $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
            μ = $../Numbers/Natural/number(value = 0)
          ))),
          formula = $../Functions/injective(
            X = S,
            Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = $../Numbers/Natural/number(value = 0)),
            f = φ
          )
        )),
        _: %UseExists(#(φ: %Element($../Numbers/Cardinal/Homomorphisms/Homomorphisms(
          κ = $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
          μ = $../Numbers/Natural/number(value = 0)
        )))),
        _: %ProveByContradiction({
          parameters = #(x: %Element(S)),
          steps = #(
            _: %State(%in(
              $../Functions/value(
                X = S,
                Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = $../Numbers/Natural/number(value = 0)),
                f = φ, x = x
              ),
              $../Numbers/Natural/Subsets/"Segment (less)"(n = $../Numbers/Natural/number(value = 0))
            )),
            _: %UseDef(result = $../Numbers/Natural/less(
              m = $../Functions/value(
                X = S,
                Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = $../Numbers/Natural/number(value = 0)),
                f = φ, x = x
              ),
              n = $../Numbers/Natural/number(value = 0)
            )),
            _: %UseDef(result = %or)
          )
        })
      )
    }
  ]
}
