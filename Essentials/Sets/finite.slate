%../../../../logics/hlm%

/**
 * @remarks This definition uses functions as well as the natural and cardinal numbers, all of which are defined in later sections (see `$../Functions/Functions`, `$../Numbers/Natural/"Natural numbers"`, `$../Numbers/Cardinal/"Cardinal numbers"`). That is not a problem as long as no circularities exist. In other words, definitions and theorems are ordered by topic instead of by dependency.
 *
 *          These are just some example proofs, which will be completed later.
 *
 * @references * https://en.wikipedia.org/wiki/Finite_set
 *             * https://mathworld.wolfram.com/FiniteSet.html
 *             * https://proofwiki.org/wiki/Definition:Finite_Set
 *             * https://ncatlab.org/nlab/show/finite+set
 *             * https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.finite
 */
$finite(S: %Set): %Predicate {
  notation = $Property(
    operand = S,
    property = %neg('finite', 'infinite')
  ),
  definition = [
    $../Numbers/Cardinal/finite(κ = $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S)),
    %exists(#(
      k: %Element($../Numbers/Natural/"Natural numbers"),
      f: %Element($../Functions/Bijections(
        X = S,
        Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = k)
      ))
    )),
    %exists(#(
      l: %Element($../Numbers/Natural/"Natural numbers"),
      g: %Element($../Functions/Bijections(
        X = $../Numbers/Natural/Subsets/"Segment (less)"(n = l),
        Y = S
      ))
    )),
    %exists(
      #(
        m: %Element($../Numbers/Natural/"Natural numbers"),
        h: %Element($../Functions/Functions(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = m)
        ))
      ),
      formula = $../Functions/injective(
        X = S,
        Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = m),
        f = h
      )
    ),
    %exists(
      #(
        n: %Element($../Numbers/Natural/"Natural numbers"),
        i: %Element($../Functions/Functions(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less or equal)"(n = n)
        ))
      ),
      formula = $../Functions/injective(
        X = S,
        Y = $../Numbers/Natural/Subsets/"Segment (less or equal)"(n = n),
        f = i
      )
    )
  ],
  equivalenceProofs = [
    {
      from = 1,
      to = 2,
      parameters = #(_1: %Constraint($../Numbers/Cardinal/finite(κ = $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S)))),
      goal = %exists(#(
        k: %Element($../Numbers/Natural/"Natural numbers"),
        f: %Element($../Functions/Bijections(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = k)
        ))
      )),
      steps = #(
        _: %Consider(_1),
        _: %UseDef(result = %in(
          $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
          $../Numbers/Natural/"Natural numbers"
        )),
        n: %Def(%asElementOf(
          $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
          $../Numbers/Natural/"Natural numbers"
        )),
        _: %State(
          %equals(
            n,
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = $../Numbers/Natural/Subsets/"Segment (less)"(n = n))
          ),
          proof = {steps = #(_: %ProveDef)}
        ),
        _: %UseDef(result = %exists(#(r: %Element($../Functions/Bijections(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = n)
        ))))),
        _: %UseExists(#(r: %Element($../Functions/Bijections(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = n)
        )))),
        _: %ProveExists({k = n, f = r})
      )
    },
    {
      from = 2,
      to = 3,
      parameters = #(
        k: %Element($../Numbers/Natural/"Natural numbers"),
        f: %Element($../Functions/Bijections(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = k)
        ))
      ),
      goal = %exists(#(
        l: %Element($../Numbers/Natural/"Natural numbers"),
        g: %Element($../Functions/Bijections(
          X = $../Numbers/Natural/Subsets/"Segment (less)"(n = l),
          Y = S
        ))
      )),
      steps = #(_: %ProveExists({
        l = k,
        g = $../Functions/inverse(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = k),
          f = f
        )
      }))
    },
    {
      from = 3,
      to = 1,
      parameters = #(
        l: %Element($../Numbers/Natural/"Natural numbers"),
        g: %Element($../Functions/Bijections(
          X = $../Numbers/Natural/Subsets/"Segment (less)"(n = l),
          Y = S
        ))
      ),
      goal = $../Numbers/Cardinal/finite(κ = $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S)),
      steps = #(_: %ProveDef(proof = {
        goal = %in(
          $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
          $../Numbers/Natural/"Natural numbers"
        ),
        steps = #(
          _: %State(
            %equals(
              $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = $../Numbers/Natural/Subsets/"Segment (less)"(n = l)),
              $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S)
            ),
            proof = {steps = #(_: %ProveDef(proof = {
              goal = %exists(#(s: %Element($../Functions/Bijections(
                X = $../Numbers/Natural/Subsets/"Segment (less)"(n = l),
                Y = S
              )))),
              steps = #(_: %ProveExists({s = g}))
            }))}
          ),
          _1: %Substitute(
            #(_: %State(
              %equals(
                l,
                $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = $../Numbers/Natural/Subsets/"Segment (less)"(n = l))
              ),
              proof = {steps = #(_: %ProveDef)}
            )),
            2,
            %equals(
              l,
              $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S)
            )
          ),
          _: %Consider(l),
          _: %Substitute(
            #(_: %Consider(_1)),
            1,
            %in(
              $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = S),
              $../Numbers/Natural/"Natural numbers"
            )
          )
        )
      }))
    },
    {
      from = 2,
      to = 4,
      parameters = #(
        k: %Element($../Numbers/Natural/"Natural numbers"),
        f: %Element($../Functions/Bijections(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = k)
        ))
      ),
      goal = %exists(
        #(
          m: %Element($../Numbers/Natural/"Natural numbers"),
          h: %Element($../Functions/Functions(
            X = S,
            Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = m)
          ))
        ),
        formula = $../Functions/injective(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = m),
          f = h
        )
      ),
      steps = #(
        _: %Consider(f),
        _: %UseDef(result = $../Functions/bijective(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = k),
          f = f
        )),
        _: %UseDef(result = $../Functions/injective(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = k),
          f = f
        )),
        _: %ProveExists({m = k, h = f})
      )
    },
    {
      from = 4,
      to = 5,
      parameters = #(
        m: %Element($../Numbers/Natural/"Natural numbers"),
        h: %Element($../Functions/Functions(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = m)
        )),
        _1: %Constraint($../Functions/injective(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = m),
          f = h
        ))
      ),
      goal = %exists(
        #(
          n: %Element($../Numbers/Natural/"Natural numbers"),
          i: %Element($../Functions/Functions(
            X = S,
            Y = $../Numbers/Natural/Subsets/"Segment (less or equal)"(n = n)
          ))
        ),
        formula = $../Functions/injective(
          X = S,
          Y = $../Numbers/Natural/Subsets/"Segment (less or equal)"(n = n),
          f = i
        )
      ),
      steps = #(
        _: %UseTheorem(
          $../Numbers/Natural/Subsets/"Exclusive initial segment is subset of inclusive segment"(n = m),
          result = %sub(
            $../Numbers/Natural/Subsets/"Segment (less)"(n = m),
            $../Numbers/Natural/Subsets/"Segment (less or equal)"(n = m)
          )
        ),
        _: %ProveExists({
          n = m,
          i = $../Functions/"generalized restriction"(
            X = S, A = S,
            B = $../Numbers/Natural/Subsets/"Segment (less or equal)"(n = m),
            Y = $../Numbers/Natural/Subsets/"Segment (less)"(n = m),
            f = h
          )
        })
      )
    }
  ]
}
