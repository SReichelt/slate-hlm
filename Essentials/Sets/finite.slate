%../../../../logics/hlm%

/**
 * @remarks This definition uses functions as well as the natural and cardinal numbers, all of which are defined in later sections (see `$../Functions/Functions`, `$../Numbers/Natural/"Natural numbers"`, `$../Numbers/Cardinal/"Cardinal numbers"`). That is not a problem as long as no circularities exist. In other words, definitions and theorems are ordered by topic instead of by dependency.
 *
 *          These are just some example proofs, which will be completed later.
 *
 * @references * https://en.wikipedia.org/wiki/Finite_set
 *             * https://mathworld.wolfram.com/FiniteSet.html
 *             * https://proofwiki.org/wiki/Definition:Finite_Set
 *             * https://ncatlab.org/nlab/show/finite+set
 *             * https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.finite
 */
$finite(S: %Set): %Predicate {
  notation = $Property(
    operand = S,
    property = %neg('finite', 'infinite')
  ),
  definition = [
    $../Numbers/Cardinal/finite(Îº = {$../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S})}),
    %exists(#(
      k: %Element($../Numbers/Natural/"Natural numbers"),
      f: %Element($../Functions/Bijections(
        X = {S},
        Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {k})}
      ))
    )),
    %exists(#(
      l: %Element($../Numbers/Natural/"Natural numbers"),
      g: %Element($../Functions/Bijections(
        X = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {l})},
        Y = {S}
      ))
    )),
    %exists(
      #(
        m: %Element($../Numbers/Natural/"Natural numbers"),
        h: %Element($../Functions/Functions(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {m})}
        ))
      ),
      formula = $../Functions/injective(
        X = {S},
        Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {m})},
        f = {h}
      )
    ),
    %exists(
      #(
        n: %Element($../Numbers/Natural/"Natural numbers"),
        i: %Element($../Functions/Functions(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less or equal)"(n = {n})}
        ))
      ),
      formula = $../Functions/injective(
        X = {S},
        Y = {$../Numbers/Natural/Subsets/"Segment (less or equal)"(n = {n})},
        f = {i}
      )
    )
  ],
  equivalenceProofs = [
    {
      from = 1,
      to = 2,
      parameters = #(@: %Constraint(%in(
        $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S}),
        $../Numbers/Natural/"Natural numbers"
      ))),
      goal = %exists(#(
        k: %Element($../Numbers/Natural/"Natural numbers"),
        f: %Element($../Functions/Bijections(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {k})}
        ))
      )),
      steps = #(
        _: %Embed(
          $../Numbers/Cardinal/"Cardinal numbers",
          $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S}),
          $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {$../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S})})})
        ),
        _: %UseDef(result = %exists(#(r: %Element($../Functions/Bijections(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {$../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S})})}
        ))))),
        _: %UseExists(#(r: %Element($../Functions/Bijections(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {$../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S})})}
        )))),
        _: %ProveExists({
          k = {$../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S})},
          f = {r}
        })
      )
    },
    {
      from = 2,
      to = 3,
      parameters = #(@: %Constraint(%exists(#(
        k: %Element($../Numbers/Natural/"Natural numbers"),
        f: %Element($../Functions/Bijections(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {k})}
        ))
      )))),
      goal = %exists(#(
        l: %Element($../Numbers/Natural/"Natural numbers"),
        g: %Element($../Functions/Bijections(
          X = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {l})},
          Y = {S}
        ))
      )),
      steps = #(
        _: %UseExists(#(
          k: %Element($../Numbers/Natural/"Natural numbers"),
          f: %Element($../Functions/Bijections(
            X = {S},
            Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {k})}
          ))
        )),
        _: %ProveExists({
          l = {k},
          g = {$../Functions/inverse(
            X = {S},
            Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {k})},
            f = {f}
          )}
        })
      )
    },
    {
      from = 3,
      to = 1,
      parameters = #(@: %Constraint(%exists(#(
        l: %Element($../Numbers/Natural/"Natural numbers"),
        g: %Element($../Functions/Bijections(
          X = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {l})},
          Y = {S}
        ))
      )))),
      goal = %in(
        $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S}),
        $../Numbers/Natural/"Natural numbers"
      ),
      steps = #(
        _: %UseExists(#(
          l: %Element($../Numbers/Natural/"Natural numbers"),
          g: %Element($../Functions/Bijections(
            X = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {l})},
            Y = {S}
          ))
        )),
        _: %State(
          %equals(
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {l})}),
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S})
          ),
          proof = {steps = #(_: %ProveDef(proof = {
            goal = %exists(#(s: %Element($../Functions/Bijections(
              X = {S},
              Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {l})}
            )))),
            steps = #(_: %ProveExists({s = {g}}))
          }))}
        ),
        _1: %Substitute(
          #(_: %Embed(
            $../Numbers/Cardinal/"Cardinal numbers",
            l,
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {l})})
          )),
          1,
          %equals(
            l,
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S})
          )
        ),
        _: %Consider(l),
        _: %Substitute(
          #(_: %Consider(_1)),
          0,
          %in(
            $../Numbers/Cardinal/"Cardinal numbers".cardinality(S = {S}),
            $../Numbers/Natural/"Natural numbers"
          )
        )
      )
    },
    {
      from = 2,
      to = 4,
      parameters = #(@: %Constraint(%exists(#(
        k: %Element($../Numbers/Natural/"Natural numbers"),
        f: %Element($../Functions/Bijections(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {k})}
        ))
      )))),
      goal = %exists(
        #(
          m: %Element($../Numbers/Natural/"Natural numbers"),
          h: %Element($../Functions/Functions(
            X = {S},
            Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {m})}
          ))
        ),
        formula = $../Functions/injective(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {m})},
          f = {h}
        )
      ),
      steps = #(
        _: %UseExists(#(
          k: %Element($../Numbers/Natural/"Natural numbers"),
          f: %Element($../Functions/Bijections(
            X = {S},
            Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {k})}
          ))
        )),
        _: %UseDef(result = $../Functions/injective(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {k})},
          f = {f}
        )),
        _: %ProveExists({
          m = {k},
          h = {f}
        })
      )
    },
    {
      from = 4,
      to = 5,
      parameters = #(@: %Constraint(%exists(
        #(
          m: %Element($../Numbers/Natural/"Natural numbers"),
          h: %Element($../Functions/Functions(
            X = {S},
            Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {m})}
          ))
        ),
        formula = $../Functions/injective(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {m})},
          f = {h}
        )
      ))),
      goal = %exists(
        #(
          n: %Element($../Numbers/Natural/"Natural numbers"),
          i: %Element($../Functions/Functions(
            X = {S},
            Y = {$../Numbers/Natural/Subsets/"Segment (less or equal)"(n = {n})}
          ))
        ),
        formula = $../Functions/injective(
          X = {S},
          Y = {$../Numbers/Natural/Subsets/"Segment (less or equal)"(n = {n})},
          f = {i}
        )
      ),
      steps = #(
        _: %UseExists(#(
          m: %Element($../Numbers/Natural/"Natural numbers"),
          h: %Element($../Functions/Functions(
            X = {S},
            Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {m})}
          ))
        )),
        _: %UseTheorem(
          $../Numbers/Natural/Subsets/"Exclusive initial segment is subset of inclusive segment"(n = {m}),
          %sub(
            $../Numbers/Natural/Subsets/"Segment (less)"(n = {m}),
            $../Numbers/Natural/Subsets/"Segment (less or equal)"(n = {m})
          )
        ),
        _: %ProveExists({
          n = {m},
          i = {$../Functions/"generalized restriction"(
            X = {S},
            A = {S},
            B = {$../Numbers/Natural/Subsets/"Segment (less or equal)"(n = {m})},
            Y = {$../Numbers/Natural/Subsets/"Segment (less)"(n = {m})},
            f = {h}
          )}
        })
      )
    }
  ]
}
