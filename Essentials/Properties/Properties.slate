%../../../../logics/hlm%

/**
 * @remarks This definition encodes a property (aka unary relation) on `S` as a proposition depending on an element of `S` (up to equivalence). Since it is equally possible to encode a unary relation on `S` as a subset of `S`, this definition is interchangeable with `$../Sets/"Power set"`. The given definition is just more convenient.
 *
 * @references * https://en.wikipedia.org/wiki/Property_(mathematics)
 *             * https://proofwiki.org/wiki/Definition:Propositional_Function
 */
$Properties(S: %Set(auto = %true)): %Construction {
  $property(_1: %Binder(
    #(s: %Element(S)),
    #(p: %Prop)
  )): %Constructor {
    notation = $SubSup(
      body = $Parens(
        body = p,
        style = '[]'
      ),
      sub = $ElementRelation(operands = [s, S])
    ),
    abbreviations = [{
      parameters = #(property: %Expr),
      originalParameter = p,
      originalParameterValue = $Property(
        operand = s,
        property = property
      ),
      abbreviation = property
    }],
    equalityDefinition = {
      leftParameters = #(_1: %Binder(
        #(s: %Element(S)),
        #(p: %Prop)
      )),
      rightParameters = #(_2: %Binder(
        #(s: %Element(S)),
        #(q: %Prop)
      )),
      definition = [%forall(
        #(s: %Element(S)),
        %equiv(p[s = s], q[s = s])
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = 'ùìüùìªùìπ',
    arguments = [S]
  ),
  definitionNotation = {
    parameter = #(p: %Expr),
    singularName = ['property', ' on ', S],
    pluralName = ['properties', ' on ', S],
    nameOptional = %true
  }
}
