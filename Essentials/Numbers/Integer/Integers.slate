%../../../../../logics/hlm%

[
  $~"Natural numbers" = $../Natural/"Natural numbers",
  $~number = $../Natural/number,
  $~sum = $../Natural/sum
]

/**
 * @remarks This is essentially the standard definition of integers as equivalence classes of pairs of natural numbers. We just use a notation that highlights the role of the two numbers in each pair. This notation is later justified by `$"Actual difference equals formal difference"`).
 *
 *          Since an equality definition for each constructor is always part of a construction, we do not need to build the equivalence classes explicitly, they are implicit in the choice of the equality definition.
 *
 *          When defining a construction, another set can be embedded in the newly defined set, so in this case, we embed the natural numbers. Note that they are also embedded in the cardinal numbers.
 *
 * @references * https://en.wikipedia.org/wiki/Integer
 *             * https://mathworld.wolfram.com/Integer.html
 *             * https://proofwiki.org/wiki/Definition:Integer
 *             * https://ncatlab.org/nlab/show/integer
 *             * https://coq.inria.fr/library/Coq.ZArith.BinInt.html (but uses a different encoding as an inductive data type with three constructors)
 *             * https://leanprover-community.github.io/mathlib_docs/core/init/data/int/basic.html#int (but uses a different encoding as an inductive data type with two constructors)
 */
$Integers: %Construction {
  $difference(n,m: %Element($~"Natural numbers")): %Constructor {
    notation = $Parens(
      body = $Operator(
        symbol = $ConstructorName(name = '-'),
        operands = [n, m],
        space = ''
      ),
      style = '()'
    ),
    equalityDefinition = {
      leftParameters = #(n,m: %Element($~"Natural numbers")),
      rightParameters = #("n'","m'": %Element($~"Natural numbers")),
      definition = [%equals(
        $~sum(m = n, n = "m'"),
        $~sum(m = "n'", n = m)
      )]
    },
    rewrite = {
      value = $difference(a = n, b = m),
      theorem = $"Actual difference equals formal difference"
    }
  }

  notation = 'â„¤',
  embedding = {
    parameter = #(x: %Element($~"Natural numbers")),
    target = $Integers.difference(
      n = x,
      m = $~number(value = 0)
    ),
    wellDefinednessProof = {
      parameters = #(
        x,y: %Element($~"Natural numbers"),
        _1: %Constraint(%equals(
          $Integers.difference(
            n = x,
            m = $~number(value = 0)
          ),
          $Integers.difference(
            n = y,
            m = $~number(value = 0)
          )
        ))
      ),
      goal = %equals(x, y),
      steps = #(
        _: %Consider(_1),
        _: %UseDef(result = %equals(
          $~sum(
            m = x,
            n = $~number(value = 0)
          ),
          $~sum(
            m = y,
            n = $~number(value = 0)
          )
        )),
        _: %Unfold(%equals(x, y))
      )
    }
  }
}
