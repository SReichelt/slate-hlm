%../../../../../../logics/hlm%

$Isomorphisms(
  α: %Element($../"Ordinal numbers"),
  β: %Element(%previous)
): %SetOperator {
  display = [$Function(
    function = 'Iso',
    arguments = [α, β]
  )],
  definitionDisplay = {
    parameter = #(φ: %Expr),
    display = [$FunctionDefinition(
      function = φ,
      symbol = '↔',
      operands = [α, β]
    )],
    singularName = 'isomorphism',
    pluralName = 'isomorphisms',
    nameOptional = %true
  },
  definition = [
    %subset(
      #(φ: %Element($Homomorphisms(
        α = {α},
        β = {β}
      ))),
      $../../../Functions/bijective(
        X = {$../Carrier(α = {α})},
        Y = {$../Carrier(α = {β})},
        f = {φ}
      )
    ),
    %subset(
      #(f: %Element($../../../Functions/Bijections(
        X = {$../Carrier(α = {α})},
        Y = {$../Carrier(α = {β})}
      ))),
      %forall(
        #(
          a: %Element($../Carrier(α = {α})),
          b: %Element(%previous),
          _1: %Constraint($../before(
            α = {α},
            a = {a},
            b = {b}
          ))
        ),
        $../before(
          α = {β},
          a = {$../../../Functions/value(
            X = {$../Carrier(α = {α})},
            Y = {$../Carrier(α = {β})},
            f = {f},
            x = {a}
          )},
          b = {$../../../Functions/value(
            X = {$../Carrier(α = {α})},
            Y = {$../Carrier(α = {β})},
            f = {f},
            x = {b}
          )}
        )
      )
    )
  ]
}
