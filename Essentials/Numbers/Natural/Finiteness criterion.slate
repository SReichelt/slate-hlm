%../../../../../logics/hlm%

[
  $~Bijections = $../../Functions/Bijections,
  $~"Cardinal numbers" = $../Cardinal/"Cardinal numbers",
  $~"Empty set" = $../../Sets/"Empty set",
  $~Functions = $../../Functions,
  $~Relations = $../../Relations/Relations,
  $~"Segment (less or equal)" = $Subsets/"Segment (less or equal)",
  $~"Segment (less)" = $Subsets/"Segment (less)",
  $~Sets = $../../Sets,
  $~empty = $../../Sets/empty,
  $~finite = $../../Sets/finite,
  $~"greatest element" = $../../Relations/"greatest element"
]

$"Finiteness criterion"(M: %Subset($"Natural numbers")): %EquivalenceTheorem {
  conditions = [
    $~finite(S = M),
    %or(
      $~empty(S = M),
      %exists(
        #(m: %Element(M)),
        formula = $~"greatest element"(
          S = $"Natural numbers",
          ⪯ = $~Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
              #(m,n: %Element($"Natural numbers")),
              {p = $"less or equal"(m = m, n = n)}
          }),
          T = M, t = m
        )
      )
    ),
    %or(
      $~empty(S = M),
      %existsUnique(
        #(m: %Element(M)),
        formula = $~"greatest element"(
          S = $"Natural numbers",
          ⪯ = $~Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
              #(m,n: %Element($"Natural numbers")),
              {p = $"less or equal"(m = m, n = n)}
          }),
          T = M, t = m
        )
      )
    ),
    %exists(
      #(a: %Element($"Natural numbers")),
      formula = %sub(
        M,
        $~"Segment (less or equal)"(n = a)
      )
    ),
    %exists(
      #(b: %Element($"Natural numbers")),
      formula = %sub(
        M,
        $~"Segment (less)"(n = b)
      )
    )
  ],
  equivalenceProofs = [
    {
      from = 1,
      to = 2,
      parameters = #(_1: %Constraint($~finite(S = M))),
      goal = %or(
        $~empty(S = M),
        %exists(
          #(m: %Element(M)),
          formula = $~"greatest element"(
            S = $"Natural numbers",
            ⪯ = $~Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
                #(m,n: %Element($"Natural numbers")),
                {p = $"less or equal"(m = m, n = n)}
            }),
            T = M, t = m
          )
        )
      ),
      steps = #(
        _: %Consider(_1),
        _: %UseDef(result = $../Cardinal/finite(κ = $~"Cardinal numbers".cardinality(S = M))),
        _: %UseDef(result = %in(
          $~"Cardinal numbers".cardinality(S = M),
          $"Natural numbers"
        )),
        _: %ProveByInduction(
          %asElementOf(
            $~"Cardinal numbers".cardinality(S = M),
            $"Natural numbers"
          ),
          $"Natural numbers",
          [
            {
              constructor = $"Natural numbers".zero,
              value = {
                parameters = #(_: %Constraint(%equals(
                  %asElementOf(
                    $~"Cardinal numbers".cardinality(S = M),
                    $"Natural numbers"
                  ),
                  $number(value = 0)
                ))),
                goal = $~empty(S = M),
                steps = #(_: %ProveDef)
              },
              rewrite = %true
            },
            {
              constructor = $"Natural numbers".successor,
              parameters = #(k: %Element($"Natural numbers")),
              value = {
                parameters = #(_2: %Constraint(%equals(
                  %asElementOf(
                    $~"Cardinal numbers".cardinality(S = M),
                    $"Natural numbers"
                  ),
                  $sum(
                    m = k,
                    n = $number(value = 1)
                  )
                ))),
                goal = %exists(
                  #(m: %Element(M)),
                  formula = $~"greatest element"(
                    S = $"Natural numbers",
                    ⪯ = $~Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
                        #(m,n: %Element($"Natural numbers")),
                        {p = $"less or equal"(m = m, n = n)}
                    }),
                    T = M, t = m
                  )
                ),
                steps = #(
                  _: %State(%equals(
                    $~"Cardinal numbers".cardinality(S = M),
                    $sum(
                      m = k,
                      n = $number(value = 1)
                    )
                  )),
                  _: %UseDef(result = %exists(#(f: %Element($~Bijections(
                    X = M,
                    Y = $~"Segment (less)"(n = $sum(
                      m = k,
                      n = $number(value = 1)
                    ))
                  ))))),
                  _: %UseExists(#(f: %Element($~Bijections(
                    X = M,
                    Y = $~"Segment (less)"(n = $sum(
                      m = k,
                      n = $number(value = 1)
                    ))
                  )))),
                  _: %UseTheorem($"Finiteness criterion lemma"(
                    M = M, k = k,
                    f = $~Functions/"generalized restriction"(
                      X = $~"Segment (less)"(n = $sum(
                        m = k,
                        n = $number(value = 1)
                      )),
                      Y = M,
                      A = $~"Segment (less or equal)"(n = k),
                      B = M,
                      f = $~Functions/inverse(
                        X = M,
                        Y = $~"Segment (less)"(n = $sum(
                          m = k,
                          n = $number(value = 1)
                        )),
                        f = f
                      )
                    )
                  ))
                )
              },
              rewrite = %true
            }
          ]
        )
      )
    },
    {
      from = 3,
      to = 2,
      parameters = #(_1: %Constraint(%or(
        $~empty(S = M),
        %existsUnique(
          #(m: %Element(M)),
          formula = $~"greatest element"(
            S = $"Natural numbers",
            ⪯ = $~Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
                #(m,n: %Element($"Natural numbers")),
                {p = $"less or equal"(m = m, n = n)}
            }),
            T = M, t = m
          )
        )
      ))),
      goal = %or(
        $~empty(S = M),
        %exists(
          #(m: %Element(M)),
          formula = $~"greatest element"(
            S = $"Natural numbers",
            ⪯ = $~Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
                #(m,n: %Element($"Natural numbers")),
                {p = $"less or equal"(m = m, n = n)}
            }),
            T = M, t = m
          )
        )
      ),
      steps = #()
    },
    {
      from = 2,
      to = 4,
      parameters = #(_1: %Constraint(%or(
        $~empty(S = M),
        %exists(
          #(m: %Element(M)),
          formula = $~"greatest element"(
            S = $"Natural numbers",
            ⪯ = $~Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
                #(m,n: %Element($"Natural numbers")),
                {p = $"less or equal"(m = m, n = n)}
            }),
            T = M, t = m
          )
        )
      ))),
      goal = %exists(
        #(a: %Element($"Natural numbers")),
        formula = %sub(
          M,
          $~"Segment (less or equal)"(n = a)
        )
      ),
      steps = #(
        _: %Consider(_1),
        _: %UseCases(caseProofs = [
          {
            parameters = #(_: %Constraint($~empty(S = M))),
            steps = #(
              _2: %UseDef(result = %setEquals(M, $~"Empty set")),
              _: %ProveExists(
                {a = $number(value = 0)},
                proof = {
                  goal = %sub(
                    M,
                    $~"Segment (less or equal)"(n = $number(value = 0))
                  ),
                  steps = #(
                    _: %UseTheorem(
                      $~Sets/"Empty set is subset of any set"(S = $~"Segment (less or equal)"(n = $number(value = 0))),
                      result = %sub(
                        $~"Empty set",
                        $~"Segment (less or equal)"(n = $number(value = 0))
                      )
                    ),
                    _: %Substitute(_2, 2)
                  )
                }
              )
            )
          },
          {
            parameters = #(
              m: %Element(M),
              _: %Constraint($~"greatest element"(
                S = $"Natural numbers",
                ⪯ = $~Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
                    #(m,n: %Element($"Natural numbers")),
                    {p = $"less or equal"(m = m, n = n)}
                }),
                T = M, t = m
              ))
            ),
            steps = #(_: %ProveExists({a = m}))
          }
        ])
      )
    },
    {
      from = 4,
      to = 5,
      parameters = #(
        a: %Element($"Natural numbers"),
        _1: %Constraint(%sub(
          M,
          $~"Segment (less or equal)"(n = a)
        ))
      ),
      goal = %exists(
        #(b: %Element($"Natural numbers")),
        formula = %sub(
          M,
          $~"Segment (less)"(n = b)
        )
      ),
      steps = #(_: %ProveExists({b = $sum(
        m = a,
        n = $number(value = 1)
      )}))
    },
    {
      from = 5,
      to = 1,
      parameters = #(
        b: %Element($"Natural numbers"),
        _1: %Constraint(%sub(
          M,
          $~"Segment (less)"(n = b)
        ))
      ),
      goal = $~finite(S = M),
      steps = #(
        _2: %UseTheorem(
          $Subsets/"Initial segments are finite"(n = b),
          result = $~finite(S = $~"Segment (less)"(n = b))
        ),
        _: %UseTheorem($~Sets/"Subsets of finite sets are finite"(
          S = $~"Segment (less)"(n = b),
          _1 = {{steps = #(_: %Consider(_2))}},
          T = M
        ))
      )
    }
  ]
}
