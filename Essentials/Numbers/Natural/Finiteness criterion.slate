%../../../../../logics/hlm%

$"Finiteness criterion"(M: %Subset($"Natural numbers")): %EquivalenceTheorem {
  conditions = [
    $../../Sets/finite(S = M),
    %or(
      $../../Sets/empty(S = M),
      %exists(
        #(m: %Element(M)),
        formula = $../../Relations/"greatest element"(
          S = $"Natural numbers",
          ⪯ = $../../Relations/Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
              #(m,n: %Element($"Natural numbers")),
              {p = $"less or equal"(m = m, n = n)}
          }),
          T = M, t = m
        )
      )
    ),
    %or(
      $../../Sets/empty(S = M),
      %existsUnique(
        #(m: %Element(M)),
        formula = $../../Relations/"greatest element"(
          S = $"Natural numbers",
          ⪯ = $../../Relations/Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
              #(m,n: %Element($"Natural numbers")),
              {p = $"less or equal"(m = m, n = n)}
          }),
          T = M, t = m
        )
      )
    ),
    %exists(
      #(a: %Element($"Natural numbers")),
      formula = %sub(
        M,
        $Subsets/"Segment (less or equal)"(n = a)
      )
    ),
    %exists(
      #(b: %Element($"Natural numbers")),
      formula = %sub(
        M,
        $Subsets/"Segment (less)"(n = b)
      )
    )
  ],
  equivalenceProofs = [
    {
      from = 1,
      to = 2,
      parameters = #(@: %Constraint($../../Sets/finite(S = M))),
      goal = %or(
        $../../Sets/empty(S = M),
        %exists(
          #(m: %Element(M)),
          formula = $../../Relations/"greatest element"(
            S = $"Natural numbers",
            ⪯ = $../../Relations/Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
                #(m,n: %Element($"Natural numbers")),
                {p = $"less or equal"(m = m, n = n)}
            }),
            T = M, t = m
          )
        )
      ),
      steps = #(
        _: %UseDef(result = %exists(#(
          l: %Element($"Natural numbers"),
          f: %Element($../../Functions/Bijections(
            X = $Subsets/"Segment (less)"(n = l),
            Y = M
          ))
        ))),
        _: %UseExists(#(
          l: %Element($"Natural numbers"),
          f: %Element($../../Functions/Bijections(
            X = $Subsets/"Segment (less)"(n = l),
            Y = M
          ))
        )),
        _: %State(
          %structural(
            l, $"Natural numbers",
            [
              {
                constructor = $"Natural numbers".zero,
                value = $../../Sets/empty(S = M),
                rewrite = %true
              },
              {
                constructor = $"Natural numbers".successor,
                parameters = #(k: %Element($"Natural numbers")),
                value = %exists(
                  #(i: %Element(M)),
                  formula = %forall(
                    #(j: %Element(M)),
                    $"less or equal"(m = j, n = i)
                  )
                ),
                rewrite = %true
              }
            ]
          ),
          proof = {steps = #(_: %ProveCases(caseProofs = [
            {
              parameters = #(_: %Constraint(%equals(
                l,
                $number(value = 0)
              ))),
              goal = $../../Sets/empty(S = M),
              steps = #(_: %ProveDef(proof = {
                goal = %not(%exists(#(c: %Element(M)))),
                steps = #(_: %ProveNeg({
                  parameters = #(c: %Element(M)),
                  steps = #(
                    _: %Consider(f),
                    _: %UseDef(result = $../../Functions/bijective(
                      X = $Subsets/"Segment (less)"(n = l),
                      Y = M, f = f
                    )),
                    _: %UseDef(result = $../../Functions/surjective(
                      X = $Subsets/"Segment (less)"(n = l),
                      Y = M, f = f
                    )),
                    _: %UseDef(result = %forall(
                      #(t: %Element(M)),
                      %exists(
                        #(s: %Element($Subsets/"Segment (less)"(n = $number(value = 0)))),
                        formula = %equals(
                          $../../Functions/value(
                            X = $Subsets/"Segment (less)"(n = l),
                            Y = M, f = f, x = s
                          ),
                          t
                        )
                      )
                    )),
                    _: %UseForAll({t = c}),
                    _: %UseExists(#(s: %Element($Subsets/"Segment (less)"(n = $number(value = 0))))),
                    _: %Consider(s),
                    _: %UseDef(result = $less(
                      m = s,
                      n = $number(value = 0)
                    )),
                    _: %UseTheorem(
                      $"Zero is the smallest number"(n = s),
                      result = $"less or equal"(
                        n = s,
                        m = $number(value = 0)
                      )
                    )
                  )
                }))
              }))
            },
            {
              parameters = #(
                k: %Element($"Natural numbers"),
                _: %Constraint(%equals(
                  l,
                  $sum(
                    m = k,
                    n = $number(value = 1)
                  )
                ))
              ),
              goal = %exists(
                #(i: %Element(M)),
                formula = %forall(
                  #(j: %Element(M)),
                  $"less or equal"(m = j, n = i)
                )
              ),
              steps = #(_: %UseTheorem(
                $"Finiteness criterion lemma"(M = M, k = k, f = f),
                result = %exists(
                  #(y: %Element(M)),
                  formula = %forall(
                    #(z: %Element(M)),
                    $"less or equal"(m = z, n = y)
                  )
                )
              ))
            }
          ]))}
        )
      )
    },
    {
      from = 2,
      to = 4,
      parameters = #(@: %Constraint(%or(
        $../../Sets/empty(S = M),
        %exists(
          #(m: %Element(M)),
          formula = $../../Relations/"greatest element"(
            S = $"Natural numbers",
            ⪯ = $../../Relations/Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
                #(m,n: %Element($"Natural numbers")),
                {p = $"less or equal"(m = m, n = n)}
            }),
            T = M, t = m
          )
        )
      ))),
      goal = %exists(
        #(a: %Element($"Natural numbers")),
        formula = %sub(
          M,
          $Subsets/"Segment (less or equal)"(n = a)
        )
      ),
      steps = #(_: %UseCases(caseProofs = [{
        parameters = #(_: %Constraint($../../Sets/empty(S = M))),
        steps = #(
          _1: %UseDef(result = %setEquals(
            M,
            $../../Sets/"Empty set"
          )),
          _: %ProveExists(
            {a = $number(value = 0)},
            proof = {
              goal = %sub(
                M,
                $Subsets/"Segment (less or equal)"(n = $number(value = 0))
              ),
              steps = #(
                _: %UseTheorem(
                  $../../Sets/"Empty set is subset of any set"(S = $Subsets/"Segment (less or equal)"(n = $number(value = 0))),
                  result = %sub(
                    $../../Sets/"Empty set",
                    $Subsets/"Segment (less or equal)"(n = $number(value = 0))
                  )
                ),
                _: %Substitute(
                  #(_: %Consider(_1)),
                  0,
                  %sub(
                    M,
                    $Subsets/"Segment (less or equal)"(n = $number(value = 0))
                  )
                )
              )
            }
          )
        )
      }]))
    },
    {
      from = 4,
      to = 5,
      parameters = #(
        a: %Element($"Natural numbers"),
        _1: %Constraint(%sub(
          M,
          $Subsets/"Segment (less or equal)"(n = a)
        ))
      ),
      goal = %exists(
        #(b: %Element($"Natural numbers")),
        formula = %sub(
          M,
          $Subsets/"Segment (less)"(n = b)
        )
      ),
      steps = #(
        _: %Consider(_1),
        _: %UnfoldDef(%sub(
          M,
          $Subsets/"Segment (less)"(n = $sum(
            m = a,
            n = $number(value = 1)
          ))
        )),
        _: %ProveExists({b = $sum(
          m = a,
          n = $number(value = 1)
        )})
      )
    },
    {
      from = 5,
      to = 1,
      parameters = #(
        b: %Element($"Natural numbers"),
        _1: %Constraint(%sub(
          M,
          $Subsets/"Segment (less)"(n = b)
        ))
      ),
      goal = $../../Sets/finite(S = M),
      steps = #(
        _: %UseTheorem(
          $Subsets/"Initial segments are finite"(n = b),
          result = $../../Sets/finite(S = $Subsets/"Segment (less)"(n = b))
        ),
        _: %UseTheorem(
          $../../Sets/"Subsets of finite sets are finite"(
            S = $Subsets/"Segment (less)"(n = b),
            T = M
          ),
          result = $../../Sets/finite(S = M)
        )
      )
    }
  ]
}
