%../../../../../logics/hlm%

/**
 * @remarks This lemma is necessary to prove the following theorem. `k` and `f` do not appear in the result, but they enable a proof via induction on `k`.
 */
$"Finiteness criterion lemma"(
  M: %Subset($"Natural numbers"),
  k: %Element($"Natural numbers"),
  f: %Element($../../Functions/Bijections(
    X = $Subsets/"Segment (less or equal)"(n = k),
    Y = M
  ))
): %StandardTheorem {
  claim = %exists(
    #(m: %Element(M)),
    formula = $../../Relations/"greatest element"(
      S = $"Natural numbers",
      ⪯ = $../../Relations/Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
          #(m,n: %Element($"Natural numbers")),
          {p = $"less or equal"(m = m, n = n)}
      }),
      T = M, t = m
    )
  ),
  proofs = [{steps = #(_: %ProveByInduction(
    k, $"Natural numbers",
    [
      {
        constructor = $"Natural numbers".zero,
        value = {
          parameters = #(_: %Constraint(%equals(
            k,
            $number(value = 0)
          ))),
          steps = #(_: %ProveExists({m = $../../Functions/value(
            X = $Subsets/"Segment (less or equal)"(n = k),
            Y = M, f = f,
            x = $number(value = 0)
          )}))
        },
        rewrite = %true
      },
      {
        constructor = $"Natural numbers".successor,
        parameters = #(x: %Element($"Natural numbers")),
        value = {
          parameters = #(_: %Constraint(%equals(
            k,
            $sum(
              m = x,
              n = $number(value = 1)
            )
          ))),
          steps = #(
            N: %SetDef($../../Functions/Image(
              X = $Subsets/"Segment (less or equal)"(n = k),
              Y = M, f = f,
              S = $Subsets/"Segment (less or equal)"(n = x)
            )),
            _: %UseTheorem(
              $"Finiteness criterion lemma"(
                M = N, k = x,
                f = $../../Functions/"codomain restriction"(
                  X = $Subsets/"Segment (less or equal)"(n = k),
                  Y = M, f = f,
                  A = $Subsets/"Segment (less or equal)"(n = x),
                  B = $../../Functions/Image(
                    X = $Subsets/"Segment (less or equal)"(n = k),
                    Y = M, f = f,
                    S = $Subsets/"Segment (less or equal)"(n = x)
                  )
                )
              ),
              result = %exists(
                #(n: %Element(N)),
                formula = $../../Relations/"greatest element"(
                  S = $"Natural numbers",
                  ⪯ = $../../Relations/Relations(S = $"Natural numbers", T = $"Natural numbers").relation(_1 = {
                      #(m,n: %Element($"Natural numbers")),
                      {p = $"less or equal"(m = m, n = n)}
                  }),
                  T = N, t = n
                )
              )
            ),
            _: %UseExists(#(n: %Element(N))),
            _: %ProveExists({m = %cases([
              {
                formula = $less(
                  n = $../../Functions/value(
                    X = $Subsets/"Segment (less or equal)"(n = k),
                    Y = M, f = f, x = k
                  ),
                  m = n
                ),
                value = $../../Functions/value(
                  X = $Subsets/"Segment (less or equal)"(n = k),
                  Y = M, f = f, x = k
                )
              },
              {
                formula = $"less or equal"(
                  m = $../../Functions/value(
                    X = $Subsets/"Segment (less or equal)"(n = k),
                    Y = M, f = f, x = k
                  ),
                  n = n
                ),
                value = n
              }
            ])})
          )
        },
        rewrite = %true
      }
    ]
  ))}]
}
