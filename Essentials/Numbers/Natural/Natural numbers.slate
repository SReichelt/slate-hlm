%../../../../../logics/hlm%

/**
 * @remarks The set of natural numbers is defined as a construction with two constructors, which, in this case, exactly matches the corresponding definition of an [inductive data type](https://en.wikipedia.org/wiki/Recursive_data_type). We merely use a custom notation for the "successor" constructor, but we could just as well write "S(`n`)". The notation is justified by `$"Addition of one yields successor"`.
 *
 *          In this library, the natural numbers start at 0, which is known to be far more convenient than starting at 1.
 *
 * @references * https://en.wikipedia.org/wiki/Natural_number
 *             * https://mathworld.wolfram.com/NonnegativeInteger.html
 *             * https://proofwiki.org/wiki/Definition:Natural_Numbers
 *             * https://ncatlab.org/nlab/show/natural+number
 *             * https://coq.inria.fr/library/Coq.Init.Nat.html
 *             * https://coq.inria.fr/library/Coq.NArith.BinNat.html
 *             * https://leanprover-community.github.io/mathlib_docs/core/init/core.html#nat
 *             * http://oeis.org/A001477
 */
$"Natural numbers": %Construction {
  $zero: %Constructor {
    notation = $Parens(
      body = $ConstructorName(name = '0'),
      style = '()'
    ),
    rewrite = {value = $number(value = 0)}
  }

  $successor(n: %Element($"Natural numbers")): %Constructor {
    notation = $Parens(
      body = $Operator(
        symbol = $ConstructorName(name = '+'),
        operands = [
          n,
          $ConstructorName(name = '1')
        ],
        space = ''
      ),
      style = '()'
    ),
    equalityDefinition = {
      leftParameters = #(m: %Element($"Natural numbers")),
      rightParameters = #(n: %Element($"Natural numbers")),
      definition = [%equals(m, n)],
      isomorphic = %true
    },
    rewrite = {
      value = $sum(
        m = n,
        n = $number(value = 1)
      ),
      theorem = $"Addition of one yields successor"
    }
  }

  notation = 'â„•'
}
