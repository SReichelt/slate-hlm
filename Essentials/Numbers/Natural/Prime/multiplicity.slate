%../../../../../../logics/hlm%

[
  $~"Positive numbers" = $../Subsets/"Positive numbers",
  $~divisible = $../divisible,
  $~power = $../power
]

/**
 * @remarks This definition would make sense even if `p` was not required to be prime. However, the term "multiplicity" is reserved for prime numbers due to its use in the unique prime factorization.
 *
 * @references * https://en.wikipedia.org/wiki/Multiplicity_(mathematics)#Multiplicity_of_a_prime_factor
 *             * https://proofwiki.org/wiki/Definition:Prime_Decomposition/Multiplicity
 *             * https://leanprover-community.github.io/mathlib_docs/ring_theory/multiplicity.html#multiplicity
 */
$multiplicity(
  n: %Element($~"Positive numbers"),
  p: %Element($"Prime numbers")
): %ImplicitOperator {
  notation = $Function(
    function = 'mult',
    arguments = [p, n]
  ),
  parameter = #(x: %Element($../"Natural numbers")),
  definition = [
    %exists(
      #(m: %Element($~"Positive numbers")),
      formula = %and(
        %equals(
          $../product(
            m = $~power(m = p, n = x),
            n = m
          ),
          n
        ),
        %not($~divisible(m = p, n = m))
      )
    ),
    %and(
      $~divisible(
        m = $~power(m = p, n = x),
        n = n
      ),
      %not($~divisible(
        m = p,
        n = $../quotient(
          n = n,
          m = $~power(m = p, n = x)
        )
      ))
    ),
    %and(
      $~divisible(
        m = $~power(m = p, n = x),
        n = n
      ),
      %not($~divisible(
        m = $~power(
          m = p,
          n = $../sum(
            m = x,
            n = $../number(value = 1)
          )
        ),
        n = n
      ))
    ),
    %and(
      $~divisible(
        m = $~power(m = p, n = x),
        n = n
      ),
      %not(%exists(
        #(y: %Element($../Subsets/"Segment (greater)"(n = x))),
        formula = $~divisible(
          m = $~power(m = p, n = y),
          n = n
        )
      ))
    )
  ]
}
