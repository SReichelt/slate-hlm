%../../../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Euclid%27s_theorem
 *             * https://mathworld.wolfram.com/EuclidsTheorems.html
 *             * https://proofwiki.org/wiki/Euclid%27s_Theorem
 *             * https://leanprover-community.github.io/mathlib_docs/data/nat/prime.html#nat.exists_infinite_primes
 */
$"Euclids theorem": %StandardTheorem {
  claim = %not($../../../Sets/finite(S = $"Prime numbers")),
  proofs = [{steps = #(_: %ProveNeg({
    parameters = #(_: %Constraint($../../../Sets/finite(S = $"Prime numbers"))),
    steps = #(
      a: %Def($../../../Operations/"Iterated operations"/"indexed by finite set"(
        X = $../"Natural numbers",
        ⨂ = $../"Iterated operators"/"iterated product",
        I = $"Prime numbers",
        _2 = {
          #(p: %Element($"Prime numbers")),
          {a = p}
        }
      )),
      _1: %State(
        $../"less or equal"(
          n = a,
          m = $../number(value = 1)
        ),
        proof = {steps = #(
          _: %UseTheorem(
            $../"Iterated operators"/"Iterated product of positive numbers grows"(
              I = $"Prime numbers",
              _2 = {
                #(p: %Element($"Prime numbers")),
                {a = p}
              },
              J = $../../../Sets/"Empty set"
            ),
            result = $../"less or equal"(
              m = $../../../Operations/"Iterated operations"/"indexed by finite set"(
                X = $../"Natural numbers",
                ⨂ = $../"Iterated operators"/"iterated product",
                I = $../../../Sets/"Empty set",
                _2 = {
                  #(x: %Element($../../../Sets/"Empty set")),
                  {a = x}
                }
              ),
              n = $../../../Operations/"Iterated operations"/"indexed by finite set"(
                X = $../"Natural numbers",
                ⨂ = $../"Iterated operators"/"iterated product",
                I = $"Prime numbers",
                _2 = {
                  #(p: %Element($"Prime numbers")),
                  {a = p}
                }
              )
            )
          ),
          _: %Substitute(
            #(_: %UseTheorem(
              $../../../Operations/"Iterated operations"/"Operation on empty set"(
                X = $../"Natural numbers",
                ⨂ = $../"Iterated operators"/"iterated product",
                _1 = {
                  #(x: %Element($../../../Sets/"Empty set")),
                  {a = x}
                }
              ),
              result = %equals(
                $../../../Operations/"Iterated operations"/"indexed by finite set"(
                  X = $../"Natural numbers",
                  ⨂ = $../"Iterated operators"/"iterated product",
                  I = $../../../Sets/"Empty set",
                  _2 = {
                    #(x: %Element($../../../Sets/"Empty set")),
                    {a = x}
                  }
                ),
                $../number(value = 1)
              )
            )),
            0,
            $../"less or equal"(
              m = $../number(value = 1),
              n = $../../../Operations/"Iterated operations"/"indexed by finite set"(
                X = $../"Natural numbers",
                ⨂ = $../"Iterated operators"/"iterated product",
                I = $"Prime numbers",
                _2 = {
                  #(p: %Element($"Prime numbers")),
                  {a = p}
                }
              )
            )
          )
        )}
      ),
      _2: %UseTheorem(
        $../"Less or equal and less combine to less"(
          a = $../number(value = 1),
          b = a,
          c = $../sum(
            m = a,
            n = $../number(value = 1)
          ),
          _1 = {proof = {steps = #(_: %Consider(_1))}},
          _2 = {proof = {steps = #(_: %UseTheorem(
            $../"Successor is always greater"(n = a),
            result = $../less(
              n = $../sum(
                m = a,
                n = $../number(value = 1)
              ),
              m = a
            )
          ))}}
        ),
        result = $../less(
          n = $../sum(
            m = a,
            n = $../number(value = 1)
          ),
          m = $../number(value = 1)
        )
      ),
      _: %UseTheorem(
        $"Every number greater than one has a prime factor"(n = {
          $../sum(
            m = a,
            n = $../number(value = 1)
          ),
          elementProof = {steps = #(
            _: %Consider(_2),
            _: %ProveDef
          )}
        }),
        result = %exists(
          #(p: %Element($"Prime numbers")),
          formula = $../divisible(
            m = p,
            n = $../sum(
              m = a,
              n = $../number(value = 1)
            )
          )
        )
      ),
      _3: %UseExists(#(p: %Element($"Prime numbers"))),
      _4: %UseTheorem(
        $../"Divisibility criterion"(
          a = p,
          b = a,
          _1 = {proof = {steps = #(_: %UseTheorem(
            $../"Iterated operators"/"Iterated product is a multiple of each element"(
              I = $"Prime numbers",
              _2 = {
                #(p: %Element($"Prime numbers")),
                {a = p}
              },
              j = p
            ),
            result = $../divisible(
              m = p,
              n = a
            )
          ))}},
          c = $../number(value = 1)
        ),
        input = #(_: %Consider(_3)),
        result = $../divisible(
          m = p,
          n = $../number(value = 1)
        )
      ),
      _: %UseTheorem(
        $../"Divisors are less or equal"(
          m = p,
          n = $../number(value = 1),
          _1 = {proof = {steps = #(_: %Consider(_4))}}
        ),
        result = $../"less or equal"(
          m = p,
          n = $../number(value = 1)
        )
      ),
      _: %Consider(p),
      _: %UseDef(result = $../less(
        n = p,
        m = $../number(value = 1)
      ))
    )
  }))}]
}
