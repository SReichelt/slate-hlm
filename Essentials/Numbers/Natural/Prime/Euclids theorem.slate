%../../../../../../logics/hlm%

[
  $~"Empty set" = $../../../Sets/"Empty set",
  $~"Iterated operators" = $../"Iterated operators",
  $~"Natural numbers" = $../"Natural numbers",
  $~divisible = $../divisible,
  $~finite = $../../../Sets/finite,
  $~"indexed by finite set" = $../../../Operations/"Iterated operations"/"indexed by finite set",
  $~"iterated product" = $../"Iterated operators"/"iterated product",
  $~less = $../less,
  $~"less or equal" = $../"less or equal",
  $~number = $../number,
  $~sum = $../sum
]

/**
 * @references * https://en.wikipedia.org/wiki/Euclid%27s_theorem
 *             * https://mathworld.wolfram.com/EuclidsTheorems.html
 *             * https://proofwiki.org/wiki/Euclid%27s_Theorem
 *             * http://metamath.tirix.org/infpn.html
 *             * https://leanprover-community.github.io/mathlib_docs/data/nat/prime.html#nat.exists_infinite_primes
 */
$"Euclids theorem": %StandardTheorem {
  claim = %not($~finite(S = $"Prime numbers")),
  proofs = [{steps = #(_: %ProveByContradiction({
    parameters = #(_: %Constraint($~finite(S = $"Prime numbers"))),
    steps = #(
      a: %Def($~"indexed by finite set"(
        X = $~"Natural numbers", ⨂ = $~"iterated product", I = $"Prime numbers",
        _2 = {
          #(p: %Element($"Prime numbers")),
          {a = p}
        }
      )),
      _1: %State(
        $~"less or equal"(
          n = a,
          m = $~number(value = 1)
        ),
        proof = {steps = #(
          _: %UseTheorem(
            $~"Iterated operators"/"Iterated product of positive numbers grows"(
              I = $"Prime numbers",
              _2 = {
                #(p: %Element($"Prime numbers")),
                {a = p}
              },
              J = $~"Empty set"
            ),
            result = $~"less or equal"(
              m = $~"indexed by finite set"(
                X = $~"Natural numbers", ⨂ = $~"iterated product", I = $~"Empty set",
                _2 = {
                  #(x: %Element($~"Empty set")),
                  {a = x}
                }
              ),
              n = $~"indexed by finite set"(
                X = $~"Natural numbers", ⨂ = $~"iterated product", I = $"Prime numbers",
                _2 = {
                  #(p: %Element($"Prime numbers")),
                  {a = p}
                }
              )
            )
          ),
          _: %Substitute(
            %UseTheorem(
              $../../../Operations/"Iterated operations"/"Operation on empty set"(
                X = $~"Natural numbers", ⨂ = $~"iterated product",
                _1 = {
                  #(x: %Element($~"Empty set")),
                  {a = x}
                }
              ),
              result = %equals(
                $~"indexed by finite set"(
                  X = $~"Natural numbers", ⨂ = $~"iterated product", I = $~"Empty set",
                  _2 = {
                    #(x: %Element($~"Empty set")),
                    {a = x}
                  }
                ),
                $~number(value = 1)
              )
            ),
            1,
            result = $~"less or equal"(
              m = $~number(value = 1),
              n = $~"indexed by finite set"(
                X = $~"Natural numbers", ⨂ = $~"iterated product", I = $"Prime numbers",
                _2 = {
                  #(p: %Element($"Prime numbers")),
                  {a = p}
                }
              )
            )
          )
        )}
      ),
      _2: %UseTheorem(
        $../"Less or equal and less combine to less"(
          a = $~number(value = 1),
          b = a,
          c = $~sum(
            m = a,
            n = $~number(value = 1)
          ),
          _1 = {proof = {steps = #(_: %Consider(_1))}},
          _2 = {proof = {steps = #(_: %UseTheorem(
            $../"Successor is always greater"(n = a),
            result = $~less(
              n = $~sum(
                m = a,
                n = $~number(value = 1)
              ),
              m = a
            )
          ))}}
        ),
        result = $~less(
          n = $~sum(
            m = a,
            n = $~number(value = 1)
          ),
          m = $~number(value = 1)
        )
      ),
      _: %UseTheorem(
        $"Every number greater than one has a prime factor"(n = {
          $~sum(
            m = a,
            n = $~number(value = 1)
          ),
          elementProof = {steps = #(
            _: %Consider(_2),
            _: %ProveDef
          )}
        }),
        result = %exists(
          #(q: %Element($"Prime numbers")),
          formula = $~divisible(
            m = q,
            n = $~sum(
              m = a,
              n = $~number(value = 1)
            )
          )
        )
      ),
      _3: %UseExists(#(q: %Element($"Prime numbers"))),
      _4: %State(
        $~divisible(m = q, n = a),
        proof = {steps = #(_: %UseTheorem(
          $~"Iterated operators"/"Iterated product is a multiple of each element"(
            I = $"Prime numbers",
            _2 = {
              #(p: %Element($"Prime numbers")),
              {a = p}
            },
            j = q
          ),
          result = $~divisible(
            m = q,
            n = $~"indexed by finite set"(
              X = $~"Natural numbers", ⨂ = $~"iterated product", I = $"Prime numbers",
              _2 = {
                #(p: %Element($"Prime numbers")),
                {a = p}
              }
            )
          )
        ))}
      ),
      _5: %UseTheorem(
        $../"Divisibility criterion"(
          a = q, b = a,
          _1 = {proof = {steps = #(_: %Consider(_4))}},
          c = $~number(value = 1)
        ),
        input = _3,
        result = $~divisible(
          m = q,
          n = $~number(value = 1)
        )
      ),
      _: %UseTheorem(
        $../"Divisors are less or equal"(
          m = q,
          n = $~number(value = 1),
          _1 = {proof = {steps = #(_: %Consider(_5))}}
        ),
        result = $~"less or equal"(
          m = q,
          n = $~number(value = 1)
        )
      ),
      _: %Consider(q),
      _: %UseDef(result = %in(
        q,
        $../Subsets/"Segment (greater)"(n = $~number(value = 1))
      )),
      _: %UseDef(result = $~less(
        n = q,
        m = $~number(value = 1)
      ))
    )
  }))}]
}
