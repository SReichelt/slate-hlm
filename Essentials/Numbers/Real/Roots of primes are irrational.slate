%../../../../../logics/hlm%

/**
 * @references * https://proofwiki.org/wiki/Square_Root_of_Prime_is_Irrational (for `n` = 2)
 *             * https://isabelle.in.tum.de/website-Isabelle2012/dist/library/HOL/ex/Sqrt.html (for `n` = 2)
 *             * https://leanprover-community.github.io/mathlib_docs/data/real/irrational.html#irr_sqrt_of_prime (for `n` = 2)
 */
$"Roots of primes are irrational"(
  p: %Element($../Natural/Prime/"Prime numbers"),
  n: %Element($../Natural/Subsets/"Segment (greater)"(n = {$../Natural/number(value = 1)}))
): %StandardTheorem {
  claim = %not($rational(a = {$root(
    a = {p},
    n = {n}
  )})),
  proofs = [{steps = #(_: %ProveNeg({
    parameters = #(_: %Constraint($rational(a = {$root(
      a = {p},
      n = {n}
    )}))),
    steps = #(
      _: %UseDef(result = %exists(
        #(
          a: %Element($../Integer/Subsets/"Positive numbers"),
          b: %Element($../Integer/Integers),
          _1: %Constraint($../Integer/coprime(
            a = {a},
            b = {b}
          ))
        ),
        formula = %equals(
          $root(
            a = {p},
            n = {n}
          ),
          $quotient(
            a = {b},
            b = {a}
          )
        )
      )),
      _: %UseExists(#(
        a: %Element($../Integer/Subsets/"Positive numbers"),
        b: %Element($../Integer/Integers),
        _1: %Constraint($../Integer/coprime(
          a = {a},
          b = {b}
        ))
      )),
      _: %UseDef(result = %equals(
        p,
        $power(
          a = {$quotient(
            a = {b},
            b = {a}
          )},
          n = {n}
        )
      )),
      _: %Substitute(
        #(_: %UseTheorem(
          $"Power base quotient law"(
            b = {b},
            a = {a},
            n = {n}
          ),
          %equals(
            $power(
              a = {$quotient(
                a = {b},
                b = {a}
              )},
              n = {n}
            ),
            $quotient(
              a = {$power(
                a = {b},
                n = {n}
              )},
              b = {$power(
                a = {a},
                n = {n}
              )}
            )
          )
        )),
        0,
        %equals(
          p,
          $quotient(
            a = {$power(
              a = {b},
              n = {n}
            )},
            b = {$power(
              a = {a},
              n = {n}
            )}
          )
        )
      ),
      _2: %UseDef(result = %equals(
        $../Integer/product(
          a = {p},
          b = {$../Integer/power(
            a = {a},
            n = {n}
          )}
        ),
        $../Integer/power(
          a = {b},
          n = {n}
        )
      )),
      _: %State(
        $../Integer/divisible(
          a = {p},
          b = {$../Integer/power(
            a = {b},
            n = {n}
          )}
        ),
        proof = {steps = #(_: %ProveDef(proof = {
          goal = %exists(
            #(x: %Element($../Integer/Integers)),
            formula = %equals(
              $../Integer/product(
                a = {p},
                b = {x}
              ),
              $../Integer/power(
                a = {b},
                n = {n}
              )
            )
          ),
          steps = #(_: %ProveExists(
            {x = {$../Integer/power(
              a = {a},
              n = {n}
            )}},
            proof = {steps = #(_: %Consider(_2))}
          ))
        }))}
      ),
      _8: %UseTheorem(
        $../Integer/Prime/"Prime and power divisibility criterion"(
          p = {p},
          a = {b},
          n = {n}
        ),
        $../Integer/divisible(
          a = {p},
          b = {b}
        )
      ),
      _: %State(
        $../Integer/divisible(
          a = {p},
          b = {$../Integer/power(
            a = {a},
            n = {n}
          )}
        ),
        proof = {steps = #(_: %ProveDef(proof = {
          goal = %exists(
            #(y: %Element($../Integer/Integers)),
            formula = %equals(
              $../Integer/product(
                a = {p},
                b = {y}
              ),
              $../Integer/power(
                a = {a},
                n = {n}
              )
            )
          ),
          steps = #(
            _: %Consider(_8),
            _: %UseDef(result = %exists(
              #(z: %Element($../Integer/Integers)),
              formula = %equals(
                $../Integer/product(
                  a = {p},
                  b = {z}
                ),
                b
              )
            )),
            _3: %UseExists(#(z: %Element($../Integer/Integers))),
            _: %Consider(n),
            _: %UseDef(result = $../Natural/less(
              n = {n},
              m = {$../Natural/number(value = 1)}
            )),
            _: %UseDef(result = $../Natural/"less or equal"(
              n = {n},
              m = {$../Natural/number(value = 2)}
            )),
            _: %UseDef(result = %exists(
              #(m: %Element($../Natural/"Natural numbers")),
              formula = %equals(
                $../Natural/sum(
                  m = {$../Natural/number(value = 2)},
                  n = {m}
                ),
                n
              )
            )),
            _5: %UseExists(#(m: %Element($../Natural/"Natural numbers"))),
            _: %ProveExists(
              {y = {$../Integer/product(
                a = {%associative($../Integer/product(
                  a = {$../Integer/power(
                    a = {b},
                    n = {m}
                  )},
                  b = {z}
                ))},
                b = {z}
              )}},
              proof = {steps = #(
                _: %Consider(_2),
                _: %Substitute(
                  #(_: %Consider(_5)),
                  1,
                  %equals(
                    $../Integer/product(
                      a = {p},
                      b = {$../Integer/power(
                        a = {a},
                        n = {n}
                      )}
                    ),
                    $../Integer/power(
                      a = {b},
                      n = {$../Natural/sum(
                        m = {$../Natural/number(value = 2)},
                        n = {m}
                      )}
                    )
                  )
                ),
                _: %UnfoldDef(%equals(
                  $../Integer/product(
                    a = {p},
                    b = {$../Integer/power(
                      a = {a},
                      n = {n}
                    )}
                  ),
                  $../Integer/product(
                    a = {%associative($../Integer/product(
                      a = {$../Integer/power(
                        a = {b},
                        n = {m}
                      )},
                      b = {b}
                    ))},
                    b = {b}
                  )
                )),
                _6: %Substitute(
                  #(_: %Consider(_3)),
                  1,
                  %equals(
                    $../Integer/product(
                      a = {p},
                      b = {$../Integer/power(
                        a = {a},
                        n = {n}
                      )}
                    ),
                    $../Integer/product(
                      a = {%associative($../Integer/product(
                        a = {$../Integer/power(
                          a = {b},
                          n = {m}
                        )},
                        b = {%associative($../Integer/product(
                          a = {p},
                          b = {z}
                        ))}
                      ))},
                      b = {%associative($../Integer/product(
                        a = {p},
                        b = {z}
                      ))}
                    )
                  )
                ),
                _: %UseTheorem(
                  $../Integer/"Multiplication of a nonzero number is injective"(
                    a = {$../Integer/product(
                      a = {%associative($../Integer/product(
                        a = {$../Integer/power(
                          a = {b},
                          n = {m}
                        )},
                        b = {z}
                      ))},
                      b = {%associative($../Integer/product(
                        a = {p},
                        b = {z}
                      ))}
                    )},
                    b = {$../Integer/power(
                      a = {a},
                      n = {n}
                    )},
                    c = {p},
                    _1 = {proof = {steps = #(_: %Consider(_6))}}
                  ),
                  %equals(
                    $../Integer/power(
                      a = {a},
                      n = {n}
                    ),
                    $../Integer/product(
                      a = {%associative($../Integer/product(
                        a = {$../Integer/power(
                          a = {b},
                          n = {m}
                        )},
                        b = {z}
                      ))},
                      b = {%associative($../Integer/product(
                        a = {p},
                        b = {z}
                      ))}
                    )
                  )
                )
              )}
            )
          )
        }))}
      ),
      _7: %UseTheorem(
        $../Integer/Prime/"Prime and power divisibility criterion"(
          p = {p},
          a = {a},
          n = {n}
        ),
        $../Integer/divisible(
          a = {p},
          b = {a}
        )
      ),
      _: %State(
        %not($../Integer/coprime(
          a = {a},
          b = {b}
        )),
        proof = {steps = #(_: %ProveDef(proof = {
          goal = %exists(
            #(q: %Element($../Natural/Prime/"Prime numbers")),
            formula = %and(
              $../Integer/divisible(
                a = {q},
                b = {a}
              ),
              $../Integer/divisible(
                a = {q},
                b = {b}
              )
            )
          ),
          steps = #(_: %ProveExists(
            {q = {p}},
            proof = {steps = #(_: %ProveCases(caseProofs = [
              {steps = #(_: %Consider(_7))},
              {steps = #(_: %Consider(_8))}
            ]))}
          ))
        }))}
      )
    )
  }))}]
}
