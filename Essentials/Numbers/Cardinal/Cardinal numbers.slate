%../../../../../logics/hlm%

[
  $~Bijections = $../../Functions/Bijections,
  $~"Natural numbers" = $../Natural/"Natural numbers",
  $~"Segment (less)" = $../Natural/Subsets/"Segment (less)"
]

/**
 * @remarks In HLM, cardinal numbers have a very simple definition as a construction with one constructor, which can be conveniently equipped with a notation that matches mathematical practice.
 *
 *          Given that two arbitrary sets cannot be compared element-wise due to the type system, the equality definition for cardinal numbers is the most general definition possible: No other valid equality definition can possibly distinguish two equipollent sets. This implies that definitions involving the "deconstruction" of cardinal numbers into sets are automatically well-defined.
 *
 *          HLM does not distinguish between sets and proper classes; instead there are rules preventing certain circularities. Thus, the set of cardinals can be treated like any other set in most situations.
 *
 *          When defining a construction, an embedding from another set into the newly defined set can be specified, subject to a suitable well-definedness condition. Embedding the natural numbers in the cardinal numbers simplifies a lot of definitions and theorems (see `$finite`, `$"Cardinality of power set"`).
 *
 *          In a way, the definition of cardinal numbers in HLM is very similar to the definition of algebraic structures (see e.g. `$../../../Algebra/"Pointed sets"/"Pointed sets"`, `$../../../Algebra/Magmas/Magmas`, `$../../../Algebra/Groups/Groups`). This is especially visible in the use of this definition in the category of sets `$../../../"Category theory"/"Concrete categories"/cardinals`.
 *
 * @references * https://en.wikipedia.org/wiki/Cardinal_number
 *             * https://mathworld.wolfram.com/CardinalNumber.html
 *             * https://proofwiki.org/wiki/Definition:Cardinal
 *             * https://ncatlab.org/nlab/show/cardinal+number
 *             * https://leanprover-community.github.io/mathlib_docs/set_theory/cardinal.html#cardinal
 */
$"Cardinal numbers": %Construction {
  $cardinality(S: %Set): %Constructor {
    notation = $Parens(body = S, style = '||'),
    equalityDefinition = {
      leftParameters = #(S: %Set),
      rightParameters = #(T: %Set),
      definition = [%exists(#(f: %Element($~Bijections(X = S, Y = T))))],
      isomorphic = %true
    }
  }

  notation = 'ùìíùìªùì≠',
  definitionNotation = {
    parameter = #(Œ∫: %Expr),
    singularName = 'cardinal number',
    pluralName = 'cardinal numbers',
    nameOptional = %true
  },
  embedding = {
    parameter = #(n: %Element($~"Natural numbers")),
    target = $"Cardinal numbers".cardinality(S = $~"Segment (less)"(n = n)),
    wellDefinednessProof = {
      parameters = #(
        m,n: %Element($~"Natural numbers"),
        _1: %Constraint(%equals(
          $"Cardinal numbers".cardinality(S = $~"Segment (less)"(n = m)),
          $"Cardinal numbers".cardinality(S = $~"Segment (less)"(n = n))
        ))
      ),
      goal = %equals(m, n),
      steps = #(
        _: %Consider(_1),
        _: %UseDef(result = %exists(#(f: %Element($~Bijections(
          X = $~"Segment (less)"(n = m),
          Y = $~"Segment (less)"(n = n)
        ))))),
        _: %UseExists(#(f: %Element($~Bijections(
          X = $~"Segment (less)"(n = m),
          Y = $~"Segment (less)"(n = n)
        )))),
        _: %UseTheorem(
          $"Natural cardinality lemma"(m = m, n = n, f = f),
          result = %equals(m, n)
        )
      )
    }
  }
}
