%../../../../logics/hlm%

/**
 * @references * https://proofwiki.org/wiki/Definition:Operation/Binary_Operation
 */
$Operations(
  X: %Set(auto = %true),
  Y: %Set(auto = %true),
  Z: %Set(auto = %true)
): %Construction {
  $operation(x: %Binding(
    X,
    #(y: %Binding(
      Y,
      #(z: %Element(Z))
    ))
  )): %Constructor {
    notation = $Parens(
      body = $FunctionBody(
        domain = $MultiplicationLikeOperator(
          symbol = '√ó',
          operands = [X, Y]
        ),
        codomain = Z,
        parameter = $Tuple(items = [x, y]),
        value = z
      ),
      style = '()'
    ),
    abbreviations = [{
      parameters = #(operator: %Expr),
      originalParameter = z,
      originalParameterValue = $Operator(
        symbol = operator,
        operands = [x, y]
      ),
      abbreviation = operator
    }],
    definitionNotation = {
      parameter = #(‚àó: %Expr),
      notation = $FunctionDefinition(
        function = ‚àó,
        domain = $MultiplicationLikeOperator(
          symbol = '√ó',
          operands = [X, Y]
        ),
        codomain = Z,
        parameter = $Tuple(items = [x, y]),
        value = z
      )
    },
    equalityDefinition = {
      leftParameters = #(x: %Binding(
        X,
        #(y: %Binding(
          Y,
          #(z: %Element(Z))
        ))
      )),
      rightParameters = #(x: %Binding(
        X,
        #(y: %Binding(
          Y,
          #("z'": %Element(Z))
        ))
      )),
      definition = [%forall(
        #(
          x: %Element(X),
          y: %Element(Y)
        ),
        %equals(z[x,y], "z'"[x,y])
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = 'ùìûùìπ',
    arguments = [X, Y, Z]
  ),
  definitionNotation = {
    parameter = #(‚àó: %Expr),
    notation = $FunctionDeclaration(
      function = ‚àó,
      operands = [
        $MultiplicationLikeOperator(
          symbol = '√ó',
          operands = [X, Y]
        ),
        Z
      ]
    ),
    singularName = 'operation',
    pluralName = 'operations',
    nameOptional = %true
  },
  embedding = {
    parameter = #(f: %Element($../Functions/Functions(
      X = {$../Sets/"Cartesian product"(
        S = {X},
        T = {Y}
      )},
      Y = {Z}
    ))),
    target = $Operations(
        X = {X},
        Y = {Y},
        Z = {Z}
      ).operation(x = {
        #(x: %Element(X)),
        {y = {
          #(y: %Element(Y)),
          {z = {$../Functions/value(
            X = {$../Sets/"Cartesian product"(
              S = {X},
              T = {Y}
            )},
            Y = {Z},
            f = {f},
            x = {$../Sets/"Cartesian product"(
                S = {X},
                T = {Y}
              ).pair(
                s = {x},
                t = {y}
            )}
          )}}
        }}
    }),
    full = %true
  }
}
