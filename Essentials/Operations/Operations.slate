%../../../../logics/hlm%

/**
 * @references * https://proofwiki.org/wiki/Definition:Operation/Binary_Operation
 */
$Operations(X,Y,Z: %Set(auto = %true)): %Construction {
  $operation(_1: %Binder(
    #(
      x: %Element(X),
      y: %Element(Y)
    ),
    #(z: %Element(Z))
  )): %Constructor {
    notation = $Parens(
      body = $FunctionBody(
        domain = $MultiplicationLikeOperator(
          symbol = '√ó',
          operands = [X, Y]
        ),
        codomain = Z,
        parameter = $Tuple(items = [x, y]),
        value = z
      ),
      style = '()'
    ),
    abbreviations = [{
      parameters = #(operator: %Expr),
      originalParameter = z,
      originalParameterValue = $Operator(
        symbol = operator,
        operands = [x, y]
      ),
      abbreviation = operator
    }],
    definitionNotation = {
      parameter = #(‚àó: %Expr),
      notation = $FunctionDefinition(
        function = ‚àó,
        domain = $MultiplicationLikeOperator(
          symbol = '√ó',
          operands = [X, Y]
        ),
        codomain = Z,
        parameter = $Tuple(items = [x, y]),
        value = z
      )
    },
    equalityDefinition = {
      leftParameters = #(_1: %Binder(
        #(
          x: %Element(X),
          y: %Element(Y)
        ),
        #(z: %Element(Z))
      )),
      rightParameters = #(_2: %Binder(
        #(
          x: %Element(X),
          y: %Element(Y)
        ),
        #("z'": %Element(Z))
      )),
      definition = [%forall(
        #(
          x: %Element(X),
          y: %Element(Y)
        ),
        %equals(z[x = {x}, y = {y}], "z'"[x = {x}, y = {y}])
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = 'ùìûùìπ',
    arguments = [X, Y, Z]
  ),
  definitionNotation = {
    parameter = #(‚àó: %Expr),
    notation = $FunctionDeclaration(
      function = ‚àó,
      operands = [
        $MultiplicationLikeOperator(
          symbol = '√ó',
          operands = [X, Y]
        ),
        Z
      ]
    ),
    singularName = 'operation',
    pluralName = 'operations',
    nameOptional = %true
  },
  embedding = {
    parameter = #(f: %Element($../Functions/Functions(
      X = {$../Sets/"Cartesian product"(
        S = {X},
        T = {Y}
      )},
      Y = {Z}
    ))),
    target = $Operations(
        X = {X},
        Y = {Y},
        Z = {Z}
      ).operation(_1 = {
        #(
          x: %Element(X),
          y: %Element(Y)
        ),
        {z = {$../Functions/value(
          X = {$../Sets/"Cartesian product"(
            S = {X},
            T = {Y}
          )},
          Y = {Z},
          f = {f},
          x = {$../Sets/"Cartesian product"(
              S = {X},
              T = {Y}
            ).pair(
              s = {x},
              t = {y}
          )}
        )}}
    }),
    full = %true
  }
}
