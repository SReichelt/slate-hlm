%../../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Iterated_binary_operation
 *             * https://proofwiki.org/wiki/Definition:Iterated_Binary_Operation
 */
$"Iterated operations"(X: %Set(auto = %true)): %Construction {
  $operation(
    ∗: %Element($../"Inner operations"(X = X)),
    e: %Element(X),
    _1: %Constraint($../../../Algebra/Monoids/"commutative monoid"(
      M = X,
      ∗ = ∗,
      e = e
    ))
  ): %Constructor {
    notation = $Parens(
      body = $Operator(
        symbol = ∗,
        operands = [
          e,
          $MiddleEllipsis
        ]
      ),
      style = '[]'
    ),
    equalityDefinition = {
      leftParameters = #(
        ∗: %Element($../"Inner operations"(X = X)),
        e: %Element(X),
        _1: %Constraint($../../../Algebra/Monoids/"commutative monoid"(
          M = X,
          ∗ = ∗,
          e = e
        ))
      ),
      rightParameters = #(
        ⋆: %Element($../"Inner operations"(X = X)),
        f: %Element(X),
        _2: %Constraint($../../../Algebra/Monoids/"commutative monoid"(
          M = X,
          ∗ = ⋆,
          e = f
        ))
      ),
      definition = [%and(
        %equals(∗, ⋆),
        %equals(e, f)
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = '𝓑𝓲𝓰𝓞𝓹',
    arguments = [X]
  ),
  definitionNotation = {
    parameter = #(⨂: %Expr),
    singularName = ['iterated operation', ' on ', X],
    pluralName = ['iterated operations', ' on ', X]
  }
}
