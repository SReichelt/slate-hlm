%../../../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Iterated_binary_operation
 *             * https://proofwiki.org/wiki/Definition:Iterated_Binary_Operation
 */
$"Iterated operations"(X: %Set(auto = %true)): %Construction {
  $operation(
    ∗: %Element($../"Inner operations"(X = {X})),
    _1: %Constraint($../associative(
      X = {X},
      ∗ = {∗}
    )),
    _2: %Constraint($../commutative(
      X = {X},
      Z = {X},
      ∗ = {∗}
    )),
    e: %Element(X),
    _3: %Constraint(%forall(
      #(x: %Element(X)),
      %equals(
        $../value(
          X = {X},
          Y = {X},
          Z = {X},
          ∗ = {∗},
          x = {x},
          y = {e}
        ),
        $../value(
          X = {X},
          Y = {X},
          Z = {X},
          ∗ = {∗},
          x = {e},
          y = {x}
        ),
        x
      )
    ))
  ): %Constructor {
    display = [$Parens(
      body = $Operator(
        symbol = ∗,
        operands = [e, '⋅⋅⋅']
      ),
      style = '()'
    )],
    equalityDefinition = {
      leftParameters = #(
        ∗: %Element($../"Inner operations"(X = {X})),
        _1: %Constraint($../associative(
          X = {X},
          ∗ = {∗}
        )),
        _2: %Constraint($../commutative(
          X = {X},
          Z = {X},
          ∗ = {∗}
        )),
        e: %Element(X),
        _3: %Constraint(%forall(
          #(x: %Element(X)),
          %equals(
            $../value(
              X = {X},
              Y = {X},
              Z = {X},
              ∗ = {∗},
              x = {x},
              y = {e}
            ),
            $../value(
              X = {X},
              Y = {X},
              Z = {X},
              ∗ = {∗},
              x = {e},
              y = {x}
            ),
            x
          )
        ))
      ),
      rightParameters = #(
        ⋆: %Element($../"Inner operations"(X = {X})),
        _4: %Constraint($../associative(
          X = {X},
          ∗ = {⋆}
        )),
        _5: %Constraint($../commutative(
          X = {X},
          Z = {X},
          ∗ = {⋆}
        )),
        f: %Element(X),
        _6: %Constraint(%forall(
          #(x: %Element(X)),
          %equals(
            $../value(
              X = {X},
              Y = {X},
              Z = {X},
              ∗ = {⋆},
              x = {x},
              y = {f}
            ),
            $../value(
              X = {X},
              Y = {X},
              Z = {X},
              ∗ = {⋆},
              x = {f},
              y = {x}
            ),
            x
          )
        ))
      ),
      definition = [%and(
        %equals(∗, ⋆),
        %equals(e, f)
      )],
      isomorphic = %true
    }
  }

  display = [$Function(
    function = '𝓑𝓲𝓰𝓞𝓹',
    arguments = [X]
  )],
  definitionDisplay = {
    parameter = #(⨂: %Expr),
    singularName = ['iterated operation', ' on ', X],
    pluralName = ['iterated operations', ' on ', X]
  }
}
