%../../../../logics/hlm%

/**
 * @remarks This definition uses binders as a built-in feature of the HLM logic. It is equivalent to the usual set-theoretic definition, which is called "mapping" in this library to distinguish the two definitions (see `$../Relations/mapping`, `$"mapping as function"`).
 *
 *          The major advantage of the definition using binders is that given an explicitly defined function, determining the value at a specific input is simply a matter of resolving definitions.
 *
 *          Function [extensionality](https://en.wikipedia.org/wiki/Extensionality) is a consequence of the requirement to specify an equality definition for the constructor.
 *
 * @references * https://en.wikipedia.org/wiki/Function_(mathematics)
 *             * https://mathworld.wolfram.com/Function.html
 *             * https://proofwiki.org/wiki/Definition:Mapping
 *             * https://ncatlab.org/nlab/show/function
 *             * https://coq.inria.fr/library/Coq.Program.Basics.html#arrow
 */
$Functions(X,Y: %Set): %Construction {
  $function(_1: %Binder(
    #(x: %Element(X)),
    #(y: %Element(Y))
  )): %Constructor {
    notation = $Parens(
      body = $FunctionBody(domain = X, codomain = Y, parameter = x, value = y),
      style = '()'
    ),
    abbreviations = [
      {
        parameters = #(function: %Expr),
        originalParameter = y,
        originalParameterValue = $Function(
          function = function,
          arguments = [x]
        ),
        abbreviation = function
      },
      {
        parameters = #(function: %Expr),
        originalParameter = y,
        originalParameterValue = $PrefixUnaryOperator(symbol = function, operand = x),
        abbreviation = function
      }
    ],
    definitionNotation = {
      parameter = #(f: %Expr),
      notation = $FunctionDefinition(function = f, domain = X, codomain = Y, parameter = x, value = y)
    },
    equalityDefinition = {
      leftParameters = #(_1: %Binder(
        #(x: %Element(X)),
        #(y: %Element(Y))
      )),
      rightParameters = #(_2: %Binder(
        #(x: %Element(X)),
        #("y'": %Element(Y))
      )),
      definition = [%forall(
        #(x: %Element(X)),
        %equals(y[x = x], "y'"[x = x])
      )],
      isomorphic = %true
    }
  }

  notation = $FunctionOperator(operands = [X, Y]),
  definitionNotation = {
    parameter = #(f: %Expr),
    notation = $FunctionDeclaration(
      function = f,
      operands = [X, Y]
    ),
    singularName = 'function',
    pluralName = 'functions',
    nameOptional = %true
  }
}
