%../../../../logics/hlm%

/**
 * @remarks This explicit definition works due to the special way that functions are defined. Within proofs, it enables unfolding of function application if the function has an explicit definition.
 *          The corresponding definition for mappings (see `$../Relations/"mapping value"`) is an implicit definition instead.
 *
 * @references * https://en.wikipedia.org/wiki/Function_(mathematics)#Functional_notation
 *             * https://coq.inria.fr/library/Coq.Program.Basics.html#apply
 *             * https://leanprover-community.github.io/mathlib_docs/core/init/function.html#function.app
 */
$value(
  X,Y: %Set(auto = %true),
  f: %Element($Functions(
    X = {X},
    Y = {Y}
  )),
  x: %Element(X)
): %ExplicitOperator {
  notation = $Function(
    function = f,
    arguments = [x]
  ),
  definition = [%structuralCases(
    f,
    $Functions(
      X = {X},
      Y = {Y}
    ),
    [{
      constructor = $Functions.function,
      parameters = #(_z: %Binder(
        #(z: %Element(X)),
        #(y: %Element(Y))
      )),
      value = y[z = {x}]
    }]
  )]
}
