%../../../../logics/hlm%

/**
 * @remarks Finite sequences could alternatively be defined inductively (i.e. as lists). However, since we also need a definition for tuples of a given length, we base our definition on that.
 *
 * @references * https://en.wikipedia.org/wiki/Sequence
 *             * https://mathworld.wolfram.com/Sequence.html
 *             * https://proofwiki.org/wiki/Definition:Finite_Sequence
 *             * https://ncatlab.org/nlab/show/free+monoid
 *             * https://coq.inria.fr/library/Coq.Init.Datatypes.html#list
 *             * https://leanprover-community.github.io/mathlib_docs/core/init/core.html#list
 */
$"Finite sequences"(S: %Set(auto = %true)): %Construction {
  $sequence(
    n: %Element($../Numbers/Natural/"Natural numbers"),
    𝐚: %Element($Tuples(
      S = {S},
      α = {n}
    ))
  ): %Constructor {
    notation = [$SubSup(
      body = $Parens(
        body = 𝐚,
        style = '()'
      ),
      sub = $SubSup(
        body = S,
        sup = n
      )
    )],
    equalityDefinition = {
      leftParameters = #(
        m: %Element($../Numbers/Natural/"Natural numbers"),
        𝐚: %Element($Tuples(
          S = {S},
          α = {m}
        ))
      ),
      rightParameters = #(
        n: %Element($../Numbers/Natural/"Natural numbers"),
        𝐛: %Element($Tuples(
          S = {S},
          α = {n}
        ))
      ),
      definition = [%and(
        %equals(m, n),
        %equals(
          𝐚,
          %structuralCases(
            𝐛,
            $Tuples(
              S = {S},
              α = {n}
            ),
            [{
              constructor = $Tuples.sequence,
              parameters = #(k: %Binding(
                $../Numbers/Ordinal/Subsets/"Segment (less)"(α = {n}),
                #(b: %Element(S))
              )),
              value = $Tuples(
                  S = {S},
                  α = {m}
                ).sequence(k = {
                  #(j: %Element($../Numbers/Ordinal/Subsets/"Segment (less)"(α = {m}))),
                  {a = {b[j]}}
              })
            }]
          )
        )
      )],
      isomorphic = %true
    }
  }

  notation = [$SubSup(
    body = S,
    sup = '∗'
  )],
  definitionNotation = {
    parameter = #(𝒂: %Expr),
    singularName = ['finite sequence', ' on ', S],
    pluralName = ['finite sequences', ' on ', S]
  }
}
