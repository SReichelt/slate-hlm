%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Ordinal_number#Transfinite_sequence (but we use arbitrary ordinals, not only limit ordinals)
 */
$"Ordinal-indexed sequences"(S: %Set(auto = %true)): %Construction {
  $sequence(
    α: %Element($../Numbers/Ordinal/"Ordinal numbers"),
    𝐚: %Element($Tuples(
      S = {S},
      α = {α}
    ))
  ): %Constructor {
    display = [$SubSup(
      body = $Parens(
        body = 𝐚,
        style = '()'
      ),
      sub = $SubSup(
        body = S,
        sup = α
      )
    )],
    equalityDefinition = {
      leftParameters = #(
        α: %Element($../Numbers/Ordinal/"Ordinal numbers"),
        𝐚: %Element($Tuples(
          S = {S},
          α = {α}
        ))
      ),
      rightParameters = #(
        β: %Element($../Numbers/Ordinal/"Ordinal numbers"),
        𝐛: %Element($Tuples(
          S = {S},
          α = {β}
        ))
      ),
      definition = [%and(
        %equals(α, β),
        %equals(
          𝐚,
          %asElementOf(
            𝐛,
            $Tuples(
              S = {S},
              α = {α}
            )
          )
        )
      )],
      isomorphic = %true
    }
  }

  display = [$SubSup(
    body = S,
    sup = '⋆'
  )],
  definitionDisplay = {
    parameter = #(𝒂: %Expr),
    singularName = ['ordinal-indexed sequence', ' on ', S],
    pluralName = ['ordinal-indexed sequences', ' on ', S]
  },
  embedding = {
    parameter = #(_𝒂: %Element($"Finite sequences"(S = {S}))),
    target = %structuralCases(
      _𝒂,
      $"Finite sequences"(S = {S}),
      [{
        constructor = $"Finite sequences".sequence,
        parameters = #(
          n: %Element($../Numbers/Natural/"Natural numbers"),
          𝐚: %Element($Tuples(
            S = {S},
            α = {n}
          ))
        ),
        value = $"Ordinal-indexed sequences"(S = {S}).sequence(
            α = {n},
            𝐚 = {𝐚}
        )
      }]
    )
  }
}
