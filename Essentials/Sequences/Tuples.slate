%../../../../logics/hlm%

/**
 * @remarks This is a slightly generalized notion of "tuple" where the length `Œ±` can be an arbitrary ordinal number. If `Œ±` is a natural number, it matches the common definition.
 *
 *          We could define tuples simply as functions, but a custom construction has several advantages, including the ability to easily destruct a tuple into its elements, and the ability to omit `S` from the constructor.
 *
 *          In this definition, the codomain is a fixed set `S`. If each item is an element of a different set, a generalized Cartesian product `$../Sets/"Generalized operators"/"Generalized cartesian product"` can be used instead.
 *
 * @references * https://en.wikipedia.org/wiki/Tuple
 *             * https://mathworld.wolfram.com/n-Tuple.html
 *             * https://proofwiki.org/wiki/Definition:Ordered_Tuple/On_Set
 *             * https://ncatlab.org/nlab/show/tuple
 *             * https://coq.inria.fr/library/Coq.Vectors.VectorDef.html
 *             * https://leanprover-community.github.io/mathlib_docs/core/data/vector.html#vector (finite) or https://leanprover-community.github.io/mathlib_docs/data/seq/seq.html#seq (infinite)
 */
$Tuples(
  S: %Set(auto = %true),
  Œ±: %Element($../Numbers/Ordinal/"Ordinal numbers")
): %Construction {
  $sequence(k: %Binding(
    $../Numbers/Ordinal/Subsets/"Segment (less)"(Œ± = {Œ±}),
    #(a: %Element(S))
  )): %Constructor {
    notation = $SubSup(
      body = $Parens(
        body = a,
        style = '()'
      ),
      sub = $LessThanRelation(operands = [k, Œ±])
    ),
    equalityDefinition = {
      leftParameters = #(k: %Binding(
        $../Numbers/Ordinal/Subsets/"Segment (less)"(Œ± = {Œ±}),
        #(a: %Element(S))
      )),
      rightParameters = #(k: %Binding(
        $../Numbers/Ordinal/Subsets/"Segment (less)"(Œ± = {Œ±}),
        #(b: %Element(S))
      )),
      definition = [%forall(
        #(k: %Element($../Numbers/Ordinal/Subsets/"Segment (less)"(Œ± = {Œ±}))),
        %equals(a[k], b[k])
      )],
      isomorphic = %true
    }
  }

  notation = $SubSup(
    body = S,
    sup = Œ±
  ),
  definitionNotation = {
    parameter = #(ùêö: %Expr),
    singularName = [
      $DependentWord(
        word = 'tuple',
        argument = Œ±
      ),
      ' on ',
      S
    ],
    pluralName = [
      $DependentWord(
        word = 'tuples',
        argument = Œ±
      ),
      ' on ',
      S
    ],
    nameOptional = %true
  }
}
