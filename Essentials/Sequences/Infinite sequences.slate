%../../../../logics/hlm%

[
  $~"Natural numbers" = $../Numbers/Natural/"Natural numbers",
  $~omega = $../Numbers/Ordinal/Examples/omega
]

/**
 * @remarks We omit the word "infinite" because infinite sequences are used much more frequently than finite ones.
 *
 *          We could define infinite sequences simply as functions, but a custom construction has several advantages, including the ability to easily destruct a sequence into its elements, and the ability to omit `S` from the constructor.
 *
 *          Even though the more general definition `$Tuples` covers infinite sequences as a special case, we use this additional definition (with an appropriate embedding) to make the constructor look nicer.
 *
 * @references * https://en.wikipedia.org/wiki/Sequence
 *             * https://mathworld.wolfram.com/Sequence.html
 *             * https://proofwiki.org/wiki/Definition:Sequence/Infinite_Sequence
 *             * https://ncatlab.org/nlab/show/sequence
 *             * https://coq.inria.fr/library/Coq.Lists.Streams.html#Stream
 *             * https://leanprover-community.github.io/mathlib_docs/data/stream.html#stream
 */
$"Infinite sequences"(S: %Set(auto = %true)): %Construction {
  $sequence(_1: %Binder(
    #(n: %Element($~"Natural numbers")),
    #(a: %Element(S))
  )): %Constructor {
    notation = $SubSup(
      body = $Parens(body = a, style = '()'),
      sub = $ElementRelation(operands = [n, '‚Ñï'])
    ),
    equalityDefinition = {
      leftParameters = #(_1: %Binder(
        #(n: %Element($~"Natural numbers")),
        #(a: %Element(S))
      )),
      rightParameters = #(_2: %Binder(
        #(n: %Element($~"Natural numbers")),
        #(b: %Element(S))
      )),
      definition = [%forall(
        #(n: %Element($~"Natural numbers")),
        %equals(
          a[n = n],
          b[n = n]
        )
      )],
      isomorphic = %true
    }
  }

  notation = $SubSup(body = S, sup = 'œâ'),
  definitionNotation = {
    parameter = #(ùêö: %Expr),
    singularName = ['sequence', ' on ', S],
    pluralName = ['sequences', ' on ', S],
    nameOptional = %true
  },
  embedding = {
    parameter = #(ùêö: %Element($Tuples(S = S, Œ± = $~omega))),
    target = %structuralCases(
      ùêö,
      $Tuples(S = S, Œ± = $~omega),
      [{
        constructor = $Tuples.sequence,
        parameters = #(_1: %Binder(
          #(j: %Element($../Numbers/Ordinal/Subsets/"Segment (less)"(Œ± = $~omega))),
          #(a: %Element(S))
        )),
        value = $"Infinite sequences"(S = S).sequence(_1 = {
            #(k: %Element($~"Natural numbers")),
            {a = a[j = k]}
        })
      }]
    ),
    full = %true
  }
}
