%../../../../../logics/hlm%

$"dependently equal"(
  I: %Set(auto = %true),
  i: %Binding(
    I,
    #(S: %Set(auto = %true))
  ),
  ≃: %Element($"Dependent equality"(
    I = {I},
    i = {
      #(i: %Element(I)),
      {S = {S[i]}}
    }
  )),
  a: %Element(
    I,
    auto = %true
  ),
  b: %Element(
    %previous,
    auto = %true
  ),
  s: %Element(S[a]),
  t: %Element(S[b])
): %Predicate {
  notation = $Relation(
    symbol = ≃,
    operands = [s, t]
  ),
  definition = [%structural(
    ≃,
    $"Dependent equality"(
      I = {I},
      i = {
        #(i: %Element(I)),
        {S = {S[i]}}
      }
    ),
    [{
      constructor = $"Dependent equality".equality,
      parameters = #(
        j: %Binding(
          I,
          #(k: %Binding(
            %previous,
            #(≡: %Element($../Relations(
              S = {S[j]},
              T = {S[k]}
            )))
          ))
        ),
        _1: %Constraint(%forall(
          #(i: %Element(I)),
          %equals(
            ≡[i,i],
            $../equality(S = {S[i]})
          )
        ))
      ),
      value = $../related(
        S = {S[a]},
        T = {S[b]},
        ≺ = {≡[a,b]},
        s = {s},
        t = {t}
      )
    }]
  )]
}
