%../../../../../logics/hlm%

$"dependently equal"(
  I: %Set(auto = %true),
  _i: %Binder(
    #(i: %Element(I)),
    #(S: %Set(auto = %true))
  ),
  ≃: %Element($"Dependent equality"(
    I = {I},
    _i = {
      #(i: %Element(I)),
      {S = {S[i = {i}]}}
    }
  )),
  a: %Element(
    I,
    auto = %true
  ),
  b: %Element(
    %previous,
    auto = %true
  ),
  s: %Element(S[i = {a}]),
  t: %Element(S[i = {b}])
): %Predicate {
  notation = $Relation(
    symbol = ≃,
    operands = [s, t]
  ),
  definition = [%structural(
    ≃,
    $"Dependent equality"(
      I = {I},
      _i = {
        #(i: %Element(I)),
        {S = {S[i = {i}]}}
      }
    ),
    [{
      constructor = $"Dependent equality".equality,
      parameters = #(
        _j: %Binder(
          #(
            j: %Element(I),
            k: %Element(%previous),
            _1: %Constraint(%equals(j, k))
          ),
          #(≡: %Element($../Relations(
            S = {S[i = {j}]},
            T = {S[i = {k}]}
          )))
        ),
        _2: %Constraint(%forall(
          #(i: %Element(I)),
          %equals(
            ≡[j = {i}, k = {i}],
            $../equality(S = {S[i = {i}]})
          )
        ))
      ),
      value = $../related(
        S = {S[i = {a}]},
        T = {S[i = {b}]},
        ≺ = {≡[j = {a}, k = {b}]},
        s = {s},
        t = {t}
      )
    }]
  )]
}
