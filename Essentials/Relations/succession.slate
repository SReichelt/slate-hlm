%../../../../logics/hlm%

/**
 * @remarks This definition constructs a partial order on the disjoint union of two sets `S` and `T` from partial orders on `S` and `T`. Elements of `S` are always considered smaller than elements of `T`. This is used to define addition of ordinal numbers (see `$../Numbers/Ordinal/sum`).
 *
 * @references * https://en.wikipedia.org/wiki/Ordinal_arithmetic#Addition
 *             * https://leanprover-community.github.io/mathlib_docs/data/sum.html#sum.lex
 */
$succession(
  S: %Set(auto = %true),
  T: %Set(auto = %true),
  ⪯: %Element($Endorelations(S = {S})),
  _1: %Constraint($"partial order"(
    S = {S},
    ⪯ = {⪯}
  )),
  ⊑: %Element($Endorelations(S = {T})),
  _2: %Constraint($"partial order"(
    S = {T},
    ⪯ = {⊑}
  ))
): %ExplicitOperator {
  notation = $Operator(
    symbol = '≪',
    operands = [⪯, ⊑]
  ),
  definition = [$Endorelations(S = {$../Sets/"Disjoint union"(
      S = {S},
      T = {T}
    )}).relation(s = {
      #(a: %Element($../Sets/"Disjoint union"(
        S = {S},
        T = {T}
      ))),
      {t = {
        #(b: %Element($../Sets/"Disjoint union"(
          S = {S},
          T = {T}
        ))),
        {p = {%structural(
          b,
          $../Sets/"Disjoint union"(
            S = {S},
            T = {T}
          ),
          [
            {
              constructor = $../Sets/"Disjoint union".left,
              parameters = #(s_b: %Element(S)),
              value = %structural(
                a,
                $../Sets/"Disjoint union"(
                  S = {S},
                  T = {T}
                ),
                [
                  {
                    constructor = $../Sets/"Disjoint union".left,
                    parameters = #(s_a: %Element(S)),
                    value = $related(
                      S = {S},
                      T = {S},
                      ≺ = {⪯},
                      s = {s_a},
                      t = {s_b}
                    )
                  },
                  {
                    constructor = $../Sets/"Disjoint union".right,
                    parameters = #(t_a: %Element(T)),
                    value = %or
                  }
                ]
              )
            },
            {
              constructor = $../Sets/"Disjoint union".right,
              parameters = #(t_b: %Element(T)),
              value = %structural(
                a,
                $../Sets/"Disjoint union"(
                  S = {S},
                  T = {T}
                ),
                [
                  {
                    constructor = $../Sets/"Disjoint union".left,
                    parameters = #(s_a: %Element(S)),
                    value = %and
                  },
                  {
                    constructor = $../Sets/"Disjoint union".right,
                    parameters = #(t_a: %Element(T)),
                    value = $related(
                      S = {T},
                      T = {T},
                      ≺ = {⊑},
                      s = {t_a},
                      t = {t_b}
                    )
                  }
                ]
              )
            }
          ]
        )}}
      }}
  })]
}
