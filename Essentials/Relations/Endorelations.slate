%../../../../logics/hlm%

/**
 * @remarks Since endorelations are used often, we encode them as a separate construction with an appropriate embedding, mainly to improve rendering.
 *
 * @references * https://en.wikipedia.org/wiki/Binary_relation#Relations_over_a_set
 *             * https://mathworld.wolfram.com/Relation.html
 *             * https://proofwiki.org/wiki/Definition:Endorelation
 *             * https://coq.inria.fr/library/Coq.Sets.Relations_1.html#Relation
 */
$Endorelations(S: %Set(auto = %true)): %Construction {
  $relation(_s: %Binder(
    #(
      s: %Element(S),
      t: %Element(%previous)
    ),
    #(p: %Prop)
  )): %Constructor {
    notation = $SubSup(
      body = $Parens(
        body = p,
        style = '[]'
      ),
      sub = $ElementRelation(operands = [
        $Group(items = [s, t]),
        S
      ])
    ),
    equalityDefinition = {
      leftParameters = #(_s: %Binder(
        #(
          s: %Element(S),
          t: %Element(%previous)
        ),
        #(p: %Prop)
      )),
      rightParameters = #(_s: %Binder(
        #(
          s: %Element(S),
          t: %Element(%previous)
        ),
        #(q: %Prop)
      )),
      definition = [%forall(
        #(
          s: %Element(S),
          t: %Element(%previous)
        ),
        %equiv(p[s = {s}, t = {t}], q[s = {s}, t = {t}])
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = 'ùì°ùìÆùìµ',
    arguments = [S]
  ),
  definitionNotation = {
    parameter = #(‚â∫: %Expr),
    singularName = ['relation', ' on ', S],
    pluralName = ['relations', ' on ', S],
    nameOptional = %true
  },
  embedding = {
    parameter = #(‚â∫: %Element($Relations(
      S = {S},
      T = {S}
    ))),
    target = $Endorelations(S = {S}).relation(_s = {
        #(
          s: %Element(S),
          t: %Element(%previous)
        ),
        {p = {$related(
          S = {S},
          T = {S},
          ‚â∫ = {‚â∫},
          s = {s},
          t = {t}
        )}}
    }),
    full = %true
  }
}
