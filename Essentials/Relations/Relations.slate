%../../../../logics/hlm%

[
  $~"Cartesian product" = $../Sets/"Cartesian product"
]

/**
 * @remarks This definition encodes a relation from `S` to `T` as a proposition depending on an element of `S` and an element of `T` (up to equivalence). It would be equally possible to encode relations as subsets of the Cartesian product; the given definition is just more convenient.
 *
 * @references * https://en.wikipedia.org/wiki/Binary_relation
 *             * https://mathworld.wolfram.com/Relation.html
 *             * https://proofwiki.org/wiki/Definition:Relation
 *             * https://ncatlab.org/nlab/show/relation#binary_relations
 *             * https://leanprover-community.github.io/mathlib_docs/data/rel.html#rel
 */
$Relations(S,T: %Set(auto = %true)): %Construction {
  $relation(_1: %Binder(
    #(
      s: %Element(S),
      t: %Element(T)
    ),
    #(p: %Prop)
  )): %Constructor {
    notation = $SubSup(
      body = $Parens(body = p, style = '[]'),
      sub = $Group(items = [
        $ElementRelation(operands = [s, S]),
        $ElementRelation(operands = [t, T])
      ])
    ),
    abbreviations = [{
      parameters = #(relation: %Expr),
      originalParameter = p,
      originalParameterValue = $Relation(
        symbol = relation,
        operands = [s, t]
      ),
      abbreviation = relation
    }],
    equalityDefinition = {
      leftParameters = #(_1: %Binder(
        #(
          s: %Element(S),
          t: %Element(T)
        ),
        #(p: %Prop)
      )),
      rightParameters = #(_1: %Binder(
        #(
          s: %Element(S),
          t: %Element(T)
        ),
        #(q: %Prop)
      )),
      definition = [%forall(
        #(
          s: %Element(S),
          t: %Element(T)
        ),
        %equiv(
          p[s = s, t = t],
          q[s = s, t = t]
        )
      )],
      isomorphic = %true
    }
  }

  notation = $Function(
    function = 'ùì°ùìÆùìµ',
    arguments = [S, T]
  ),
  definitionNotation = {
    parameter = #(‚â∫: %Expr),
    singularName = ['relation', ' from ', S, ' to ', T],
    pluralName = ['relations', ' from ', S, ' to ', T],
    nameOptional = %true
  },
  embedding = {
    parameter = #(r: %Element($../Properties/Properties(S = $~"Cartesian product"(S = S, T = T)))),
    target = $Relations(S = S, T = T).relation(_1 = {
        #(
          s: %Element(S),
          t: %Element(T)
        ),
        {p = $../Properties/"has property"(
          S = $~"Cartesian product"(S = S, T = T),
          p = r,
          s = $~"Cartesian product"(S = S, T = T).pair(s = s, t = t)
        )}
    }),
    full = %true
  }
}
