%../../../../logics/hlm%

/**
 * @remarks This definition uses the "construction" concept to define quotient sets and equivalence classes, which is straightforward because the requirements for an equality definition are precisely the properties of an equivalence relation.
 *
 *          A more traditional definition where equivalence classes are subsets of `S` is possible as well, of course. Then the set of equivalence classes is a subset of the power set. However, the given definition has the advantage that well-definedness proofs can be stated more easily. On the other hand, there is the drawback that since equivalence classes are not sets, it is not directly possible to ask about their cardinality, etc. Moreover, there should be a general definition of a partition, and a theorem that equivalence classes form a partition; this requires the powerset approach.
 *
 *          In the end, there may need to be two different but interchangeable definitions of equivalence classes.
 *
 * @references * https://en.wikipedia.org/wiki/Equivalence_class
 *             * https://mathworld.wolfram.com/EquivalenceClass.html
 *             * https://proofwiki.org/wiki/Definition:Equivalence_Class
 *             * https://ncatlab.org/nlab/show/equivalence+class
 *             * https://leanprover-community.github.io/mathlib_docs/core/init/data/quot.html#quotient
 */
$"Equivalence classes"(
  S: %Set(auto = %true),
  ∼: %Element($Endorelations(S = S)),
  _1: %Constraint($equivalence(
    S = S,
    ≺ = ∼
  ))
): %Construction {
  $class(s: %Element(S)): %Constructor {
    notation = $SubSup(
      body = $Parens(
        body = s,
        style = '[]'
      ),
      sub = ∼
    ),
    equalityDefinition = {
      leftParameters = #(s: %Element(S)),
      rightParameters = #(t: %Element(S)),
      definition = [$related(
        S = S,
        T = S,
        ≺ = ∼,
        s = s,
        t = t
      )]
    }
  }

  notation = $DivisionOperator(operands = [S, ∼])
}
