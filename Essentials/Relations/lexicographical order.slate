%../../../../logics/hlm%

/**
 * @remarks This definition constructs a partial order on the Cartesian product of two sets `S` and `T` from partial orders on `S` and `T`, combining the two partial orders lexicographically. It is used to define multiplication of ordinal numbers (see `$../Numbers/Ordinal/product`).
 *
 * @references * https://en.wikipedia.org/wiki/Lexicographical_order#Cartesian_products
 *             * https://mathworld.wolfram.com/LexicographicOrder.html
 *             * https://proofwiki.org/wiki/Definition:Lexicographic_Order
 *             * https://ncatlab.org/nlab/show/lexicographic+order
 *             * https://leanprover-community.github.io/mathlib_docs/core/init/wf.html#prod.lex
 */
$"lexicographical order"(
  S,T: %Set(auto = %true),
  ⪯: %Element($Endorelations(S = {S})),
  _1: %Constraint($"partial order"(
    S = {S},
    ⪯ = {⪯}
  )),
  ⊑: %Element($Endorelations(S = {T})),
  _2: %Constraint($"partial order"(
    S = {T},
    ⪯ = {⊑}
  ))
): %ExplicitOperator {
  notation = $Operator(
    symbol = '∠',
    operands = [⪯, ⊑]
  ),
  definition = [$Endorelations(S = {$../Sets/"Cartesian product"(
      S = {S},
      T = {T}
    )}).relation(_s = {
      #(a,b: %Element($../Sets/"Cartesian product"(
        S = {S},
        T = {T}
      ))),
      {p = {%structural(
        b,
        $../Sets/"Cartesian product"(
          S = {S},
          T = {T}
        ),
        [{
          constructor = $../Sets/"Cartesian product".pair,
          parameters = #(
            "s'": %Element(S),
            "t'": %Element(T)
          ),
          value = %structural(
            a,
            $../Sets/"Cartesian product"(
              S = {S},
              T = {T}
            ),
            [{
              constructor = $../Sets/"Cartesian product".pair,
              parameters = #(
                s: %Element(S),
                t: %Element(T)
              ),
              value = %and(
                $related(
                  S = {S},
                  T = {S},
                  ≺ = {⪯},
                  s = {s},
                  t = {"s'"}
                ),
                %or(
                  %not(%equals(s, "s'")),
                  $related(
                    S = {T},
                    T = {T},
                    ≺ = {⊑},
                    s = {t},
                    t = {"t'"}
                  )
                )
              )
            }]
          )
        }]
      )}}
  })]
}
